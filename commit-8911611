From 89116117da7d0c55e7ce69301d8fcb24482beb96 Mon Sep 17 00:00:00 2001
From: Kritchapon Choktananan <iwestz120@gmail.com>
Date: Fri, 23 Dec 2016 17:49:17 +0700
Subject: Update UI and Attribute


diff --git a/.gitignore b/.gitignore
index 87194bc..ee4f10c 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1 +1,2 @@
 /js
+/fileinput
diff --git a/editable/extension.js b/editable/extension.js
new file mode 100644
index 0000000..2556412
--- /dev/null
+++ b/editable/extension.js
@@ -0,0 +1,3 @@
+$('button[data-target="#modelEditorhtmlimages"]').on("toggle", function() {
+    debugger;
+});
\ No newline at end of file
diff --git a/editable/initial.js b/editable/initial.js
index e6e9190..07e0a83 100644
--- a/editable/initial.js
+++ b/editable/initial.js
@@ -15,7 +15,7 @@
 // xmlhttp.send();
 // html_main = xmlhttp.responseText;
 // debugger;
-
+// initialize with defaults
 // HTML for Main Container //
 var html_main = "";
 html_main += "<div class=\"svd_container\">";
@@ -127,15 +127,17 @@ html_main += "		<\/div>";
 html_main += "	<\/div>";
 html_main += "<\/div>";
 // javascript section //
-html_main += '<script type="text/html" id="objecteditor">    <table class="table svd_table-nowrap">        <tbody data-bind="foreach: koProperties">            <tr data-bind="click: $parent.changeActiveProperty($data), css: {\'active\': $parent.koActiveProperty() == $data}">                <td data-bind="text: displayName, attr: {title: title}" width="50%"></td>                <td width="50%">                    <span data-bind="text: koText, visible: $parent.koActiveProperty() != $data && (koText() || $data.editorType == \'boolean\'), attr: {title: koText}" style="text-overflow:ellipsis;white-space:nowrap;overflow:hidden"></span>                    <div data-bind="visible: $parent.koActiveProperty() == $data || (!koText() && $data.editorType != \'boolean\')">                        <!-- ko template: { name: \'propertyeditor-\' + editorType, data: $data } -->                        <!-- /ko -->                    </div>                </td>            </tr>        </tbody>    </table></script><script type="text/html" id="objectverbs">    <!-- ko foreach: koVerbs -->        <div class="row">            <div class="input-group">                <span  class="input-group-addon" data-bind="text:text"></span>                <select class="form-control" data-bind="options: koItems, optionsText: \'text\', optionsValue:\'value\', value: koSelectedItem"></select>            </div>        </div>    <!-- /ko  --></script><script type="text/html" id="pageeditor">    <ul class="nav nav-tabs" data-bind="tabs:true">        <!-- ko foreach: koPages -->        <li data-bind="css: {active: koSelected()},event:{           keydown:function(el, e){ $parent.keyDown(el, e); },           dragstart:function(el, e){ $parent.dragStart(el); return true; },           dragover:function(el, e){ $parent.dragOver(el);},           dragend:function(el, e){ $parent.dragEnd();},           drop:function(el, e){ $parent.dragDrop(el);}         }">             <a class="svd_page_nav" href="#" data-bind="click:$parent.selectPageClick">                <span data-bind="text: title"></span>            </a>        </li>        <!-- /ko  -->        <li><button class="btn btn-default svd_add_new_page_btn" data-bind="click:addNewPageClick"><span class="glyphicon glyphicon-plus"></span></button></li>    </ul></script><script type="text/html" id="surveyembeding">    <div class="row">        <select data-bind="value:koLibraryVersion">            <option value="knockout" data-bind="text: $root.getLocString(\'ew.knockout\')"></option>            <option value="react" data-bind="text: $root.getLocString(\'ew.react\')"></option>        </select>        <select data-bind="value:koScriptUsing">            <option value="bootstrap" data-bind="text: $root.getLocString(\'ew.bootstrap\')"></option>            <option value="standard" data-bind="text: $root.getLocString(\'ew.standard\')"></option>        </select>        <select data-bind="value:koShowAsWindow">            <option value="page" data-bind="text: $root.getLocString(\'ew.showOnPage\')"></option>            <option value="window" data-bind="text: $root.getLocString(\'ew.showInWindow\')"></option>        </select>        <label class="checkbox-inline" data-bind="visible:koHasIds">            <input type="checkbox" data-bind="checked:koLoadSurvey" />            <span data-bind="text: $root.getLocString(\'ew.loadFromServer\')"></span>        </label>    </div>    <div class="panel">        <div class="panel-heading" data-bind="text: $root.getLocString(\'ew.titleScript\')"></div>        <div id="surveyEmbedingHead" style="height:70px;width:100%"></div>    </div>    <div class="panel" data-bind="visible: koVisibleHtml">        <div class="panel-heading"  data-bind="text: $root.getLocString(\'ew.titleHtml\')"></div>        <div id="surveyEmbedingBody" style="height:30px;width:100%"></div>    </div>    <div class="panel">        <div class="panel-heading"  data-bind="text: $root.getLocString(\'ew.titleJavaScript\')"></div>        <div id="surveyEmbedingJava" style="height:300px;width:100%"></div>    </div></script><script type="text/html" id="propertyeditor-boolean">    <input class="form-control" type="checkbox" data-bind="checked: koValue" /></script><script type="text/html" id="propertyeditor-dropdown">    <div class="custom-select">        <select class="form-control" data-bind="value: koValue, options: choices"  style="width:100%"></select>    </div></script><script type="text/html" id="propertyeditor-html">    <!-- ko template: { name: \'propertyeditor-modal\', data: $data } --><!-- /ko --></script><script type="text/html" id="propertyeditorcontent-html">    <textarea class="form-control" data-bind="value:koValue" style="width:100%" rows="10" autofocus="autofocus"></textarea></script><script type="text/html" id="propertyeditor-itemvalues">    <!-- ko template: { name: \'propertyeditor-modal\', data: $data } --><!-- /ko --></script><script type="text/html" id="propertyeditorcontent-itemvalues">    <div style="overflow-y: auto; overflow-x:hidden; max-height:400px">        <table class="table">            <thead>                <tr>                    <th></th>                    <th data-bind="text: $root.getLocString(\'pe.value\')"></th>                    <th data-bind="text: $root.getLocString(\'pe.text\')"></th>                    <th></th>                </tr>            </thead>            <tbody>                <!-- ko foreach: koItems -->                <tr>                    <td>                        <div class="btn-group" role="group">                            <button type="button" class="btn btn-xs" data-bind="visible: $index() > 0, click: $parent.onMoveUpClick"><span class="glyphicon glyphicon-arrow-up" aria-hidden="true"></span></button>                            <button type="button" class="btn btn-xs" style="float:none" data-bind="visible: $index() < $parent.koItems().length - 1, click: $parent.onMoveDownClick"><span class="glyphicon glyphicon-arrow-down" aria-hidden="true"></span></button>                        </div>                    </td>                    <td>                        <input type="text" class="form-control" data-bind="value:koValue" style="width:200px" />                        <div class="alert alert-danger no-padding" role="alert" data-bind="visible:koHasError, text: $root.getLocString(\'pe.enterNewValue\')"></div>                    </td>                    <td><input type="text" class="form-control" data-bind="value:koText" style="width:200px" /></td>                    <td><button type="button" class="btn btn-xs" data-bind="click: $parent.onDeleteClick"><span class="glyphicon glyphicon-trash" aria-hidden="true"></span></button></td>                </tr>                <!-- /ko -->            </tbody>        </table>    </div>    <div class="row btn-toolbar">        <input type="button" class="btn btn-success" data-bind="click: onAddClick, value: $root.getLocString(\'pe.addNew\')" />        <input type="button" class="btn btn-danger" data-bind="click: onClearClick, value: $root.getLocString(\'pe.removeAll\')" />    </div></script><script type="text/html" id="propertyeditor-matrixdropdowncolumns">    <!-- ko template: { name: \'propertyeditor-modal\', data: $data } --><!-- /ko --></script><script type="text/html" id="propertyeditorcontent-matrixdropdowncolumns">    <table class="table">        <thead>            <tr>                <th data-bind="text: $root.getLocString(\'pe.required\')"></th>                <th data-bind="text: $root.getLocString(\'pe.cellType\')"></th>                <th data-bind="text: $root.getLocString(\'pe.name\')"></th>                <th data-bind="text: $root.getLocString(\'pe.title\')"></th>                <th></th>            </tr>        </thead>        <tbody>            <!-- ko foreach: koItems -->            <tr>                <td>                    <a href="#" data-bind="visible:koHasChoices, click: onShowChoicesClick">                        <span class="glyphicon" data-bind="css: {\'glyphicon-chevron-down\': !koShowChoices(), \'glyphicon-chevron-up\': koShowChoices()}"></span>                    </a>                    <input type="checkbox" data-bind="checked: koIsRequired" />                </td>                <td>                    <select class="form-control" data-bind="options: cellTypeChoices, value: koCellType"  style="width:110px"></select>                </td>                <td>                    <input type="text" class="form-control" data-bind="value:koName" style="width:100px" />                    <div class="alert alert-danger no-padding" role="alert" data-bind="visible:koHasError, text: $root.getLocString(\'pe.enterNewValue\')"></div>                </td>                <td><input type="text" class="form-control" data-bind="value:koTitle" style="width:120px" /></td>                <td><input type="button" class="btn" data-bind="click: $parent.onDeleteClick, value: $root.getLocString(\'pe.delete\')"/></td>            </tr>            <tr data-bind="visible: koShowChoices() && koHasChoices()">                <td colspan="4" style="border-top-style:none">                    <div class="form-group">                        <label class="control-label col-sm-3" data-bind="text:$root.getLocString(\'pe.hasOther\')"></label>                        <div class="col-sm-2">                            <input type="checkbox" data-bind="checked: koHasOther" />                        </div>                        <div class="col-sm-7" data-bind="visible: !koHasColCount()"></div>                        <label class="control-label col-sm-3" data-bind="visible:koHasColCount, text:$root.getLocString(\'pe.colCount\')"></label>                        <select class="form-control col-sm-4" data-bind="visible:koHasColCount, options: colCountChoices, value: koColCount" style="width:110px"></select>                    </div>                    <div class="modal-body svd_notopbottompaddings">                        <!-- ko template: { name: \'propertyeditorcontent-itemvalues\', data: choicesEditor } -->                        <!-- /ko -->                    </div>                </td>            </tr>            <!-- /ko -->            <tr>                <td colspan="3">                    <div class="row btn-toolbar">                        <input type="button" class="btn btn-success" data-bind="click: onAddClick, value: $root.getLocString(\'pe.addNew\')"/>                        <input type="button" class="btn btn-danger" data-bind="click: onClearClick, value: $root.getLocString(\'pe.removeAll\')"" />                    </div>                </td>            </tr>        </tbody>    </table></script><script type="text/html" id="propertyeditor-modal">    <div class="input-group" data-bind="visible:!editor.isEditable">        <span data-bind="text: koText"></span>        <div class="input-group-btn">            <button type="button"  class="btn btn-default"data-toggle="modal" style="padding: 2px;" data-bind="attr: {\'data-target\' : modalNameTarget}">                <span class="glyphicon glyphicon-edit" aria-hidden="true"></span>            </button>        </div>    </div>    <div class="input-group" data-bind="visible:editor.isEditable" style="display:table">        <input class="form-control" type="text" data-bind="value: koValue" style="display:table-cell; width:100%" />        <div class="input-group-btn">            <button type="button" class="btn btn-default" style="display:table-cell; padding: 2px;"  data-toggle="modal" data-bind="attr: {\'data-target\' : modalNameTarget}">                <span class="glyphicon glyphicon-edit" aria-hidden="true"></span>            </button>        </div>    </div>    <div data-bind="attr: {id : modalName}" class="modal fade" role="dialog">        <div class="modal-dialog">            <div class="modal-content">                <div class="modal-header">                    <button type="button" class="close" data-dismiss="modal">&times;</button>                    <h4 class="modal-title" data-bind="text:editor.title"></h4>                </div>                  <div class="modal-body svd_notopbottompaddings">                    <!-- ko template: { name: \'propertyeditorcontent-\' + editorType, data: editor } -->                    <!-- /ko -->                </div>                <div class="modal-footer">                    <input type="button" class="btn btn-primary" data-bind="click: editor.onApplyClick, value: $root.getLocString(\'pe.apply\')" style="width:100px" />                    <input type="button" class="btn btn-default" data-bind="click: editor.onResetClick, value: $root.getLocString(\'pe.reset\')" style="width:100px" />                    <input type="button" class="btn btn-default" data-dismiss="modal" data-bind="value: $root.getLocString(\'pe.close\')" style="width:100px" />                </div>            </div>        </div>    </div></script><script type="text/html" id="propertyeditor-number">    <input class="form-control" type="number" data-bind="value: koValue" style="width:100%" /></script><script type="text/html" id="propertyeditor-restfull">    <!-- ko template: { name: \'propertyeditor-modal\', data: $data } --><!-- /ko --></script><script type="text/html" id="propertyeditorcontent-restfull">    <form>        <div class="form-group">            <label for="url">Url:</label>            <input id="url" type="text" data-bind="value:koUrl" class="form-control" />        </div>        <div class="form-group">            <label for="path">Path:</label>            <input id="path" type="text" data-bind="value:koPath" class="form-control" />        </div>        <div class="form-group">            <label for="valueName">valueName:</label>            <input id="valueName" type="text" data-bind="value:koValueName" class="form-control" />        </div>        <div class="form-group">            <label for="titleName">titleName:</label>            <input id="titleName" type="text" data-bind="value:koTitleName" class="form-control" />        </div>    </form>    <div id="restfullSurvey" style="width:100%;height:150px"></div></script><script type="text/html" id="propertyeditor-string">    <input class="form-control" type="text" data-bind="value: koValue" style="width:100%" /></script><script type="text/html" id="propertyeditor-text">    <!-- ko template: { name: \'propertyeditor-modal\', data: $data } --><!-- /ko --></script><script type="text/html" id="propertyeditorcontent-text">    <textarea class="form-control" data-bind="value:koValue" style="width:100%" rows="10" autofocus="autofocus"></textarea></script><script type="text/html" id="propertyeditor-textitems">    <!-- ko template: { name: \'propertyeditor-modal\', data: $data } --><!-- /ko --></script><script type="text/html" id="propertyeditorcontent-textitems"><div class="panel">    <table class="table">        <thead>            <tr>                <th data-bind="text: $root.getLocString(\'pe.name\')"></th>                <th data-bind="text: $root.getLocString(\'pe.title\')"></th>                <th></th>            </tr>        </thead>        <tbody>            <!-- ko foreach: koItems -->            <tr>                <td><input type="text" class="form-control" data-bind="value:koName" style="width:200px" /></td>                <td><input type="text" class="form-control" data-bind="value:koTitle" style="width:200px" /></td>                <td><input type="button" class="btn" data-bind="click: $parent.onDeleteClick, value: $root.getLocString(\'pe.delete\')"/></td>            </tr>            <!-- /ko -->            <tr>                <td colspan="4"><input type="button" class="btn btn-success" data-bind="click: onAddClick, value: $root.getLocString(\'pe.addNew\')"/></td>            </tr>        </tbody>    </table></div></script><script type="text/html" id="propertyeditor-triggers">    <!-- ko template: { name: \'propertyeditor-modal\', data: $data } --><!-- /ko --></script><script type="text/html" id="propertyeditorcontent-triggers"><div class="panel">    <div class="panel-heading">        <div class="row input-group">            <button type="button" class="dropdown-toggle input-group-addon" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">                <span class="glyphicon glyphicon-plus"></span>            </button>            <ul class="dropdown-menu input-group">                <!-- ko foreach: availableTriggers -->                <li><a href="#" data-bind="click: $parent.onAddClick($data)"><span data-bind="text:$data"></span></a></li>                <!-- /ko  -->            </ul>            <select class="form-control" data-bind="options: koItems, optionsText: \'koText\', value: koSelected"></select>            <span class="input-group-btn">                <button type="button" data-bind="enable: koSelected() != null, click: onDeleteClick" class="btn btn-default"><span class="glyphicon glyphicon-remove"></span></button>            </span>        </div>    </div>    <div data-bind="visible: koSelected() == null">        <div data-bind="visible: koQuestions().length == 0, text: $root.getLocString(\'pe.noquestions\')"></div>        <div data-bind="visible: koQuestions().length > 0, text: $root.getLocString(\'pe.createtrigger\')"></div>    </div>    <div data-bind="visible: koSelected() != null">        <div data-bind="with: koSelected">            <div class="row form-inline">                <div class="col-sm-4">                    <span data-bind="text: $root.getLocString(\'pe.triggerOn\')"></span><select class="form-control" data-bind="options:$parent.koQuestions, value: koName"></select> <span> </span>                </div>                <div class="col-sm-4">                    <select class="form-control" data-bind="options:availableOperators, optionsValue: \'name\', optionsText: \'text\', value:koOperator"></select>                </div>                <div class="col-sm-4">                    <input class="form-control" style="padding: 0" type="text" data-bind="visible: koRequireValue, value:koValue" />                </div>            </div>            <!-- ko if: koType() == \'visibletrigger\' -->            <div class="row">                <div class="col-sm-6">                    <!-- ko template: { name: \'propertyeditor-triggersitems\', data: pages } -->                    <!-- /ko -->                </div>                <div class="col-sm-6">                    <!-- ko template: { name: \'propertyeditor-triggersitems\', data: questions } -->                    <!-- /ko -->                </div>            </div>            <!-- /ko -->            <!-- ko if: koType() == \'completetrigger\' -->            <div class="row">               <div style="margin: 10px" data-bind="text: $root.getLocString(\'pe.triggerCompleteText\')"></div>            </div>            <!-- /ko -->            <!-- ko if: koType() == \'setvaluetrigger\' -->            <div class="row form-inline" style="margin-top:10px">                <div class="col-sm-6">                    <span data-bind="text: $root.getLocString(\'pe.triggerSetToName\')"></span><input class="form-control" type="text" data-bind="value:kosetToName" />                </div>                <div class="col-sm-1">                </div>                <div class="col-sm-5">                    <span data-bind="text: $root.getLocString(\'pe.triggerSetValue\')"></span><input class="form-control" type="text" data-bind="value:kosetValue" />                </div>            </div>            <div class="row form-inline">                <div class="col-sm-12">                    <input type="checkbox" data-bind="checked: koisVariable" /> <span data-bind="text: $root.getLocString(\'pe.triggerIsVariable\')"></span>                </div>            </div>            <!-- /ko -->        </div>    </div></div></script><script type="text/html" id="propertyeditor-triggersitems">    <div class="panel no-margins no-padding">        <div class="panel-heading">            <span data-bind="text: title"></span>        </div>        <div class="input-group">            <select class="form-control" multiple="multiple" data-bind="options:koChoosen, value: koChoosenSelected"></select>            <span class="input-group-btn" style="vertical-align:top">                <button type="button" data-bind="enable: koChoosenSelected() != null, click: onDeleteClick" class="btn"><span class="glyphicon glyphicon-remove"></span></button>            </span>        </div>        <div class="input-group" style="margin-top:5px">            <select class="form-control" data-bind="options:koObjects, value: koSelected"></select>            <span class="input-group-btn">                <button type="button" data-bind="enable: koSelected() != null, click: onAddClick" style="width:40px" class="btn btn-success"><span class="glyphicon glyphicon-plus"></span></button>            </span>        </div>    </div></script><script type="text/html" id="propertyeditor-validators">    <!-- ko template: { name: \'propertyeditor-modal\', data: $data } --><!-- /ko --></script><script type="text/html" id="propertyeditorcontent-validators"><div class="panel">    <div class="panel-heading">        <div class="row input-group">            <button type="button" class="dropdown-toggle input-group-addon" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">                <span class="glyphicon glyphicon-plus"></span>            </button>            <ul class="dropdown-menu input-group">                <!-- ko foreach: availableValidators -->                <li><a href="#" data-bind="click: $parent.onAddClick($data)"><span data-bind="text:$data"></span></a></li>                <!-- /ko  -->            </ul>            <select class="form-control" data-bind="options: koItems, optionsText: \'text\', value: koSelected"></select>            <span class="input-group-btn">                <button type="button" data-bind="enable: koSelected() != null, click: onDeleteClick" class="btn"><span class="glyphicon glyphicon-remove"></span></button>            </span>        </div>    </div>    <div data-bind="template: { name: \'objecteditor\', data: selectedObjectEditor }"></div></div></script>';
+html_main += '<script type="text/html" id="objecteditor">    <table class="table svd_table-nowrap">        <tbody data-bind="foreach: koProperties">            <tr data-bind="click: $parent.changeActiveProperty($data), css: {\'active\': $parent.koActiveProperty() == $data}">                <td data-bind="text: displayName, attr: {title: title}" width="50%"></td>                <td width="50%">                    <span data-bind="text: koText, visible: $parent.koActiveProperty() != $data && (koText() || $data.editorType == \'boolean\'), attr: {title: koText}" style="text-overflow:ellipsis;white-space:nowrap;overflow:hidden"></span>                    <div data-bind="visible: $parent.koActiveProperty() == $data || (!koText() && $data.editorType != \'boolean\')">                        <!-- ko template: { name: \'propertyeditor-\' + editorType, data: $data } -->                        <!-- /ko -->                    </div>                </td>            </tr>        </tbody>    </table></script><script type="text/html" id="objectverbs">    <!-- ko foreach: koVerbs -->        <!-- /ko  --></script><script type="text/html" id="pageeditor">    <ul class="nav nav-tabs" data-bind="tabs:true">        <!-- ko foreach: koPages -->        <li data-bind="css: {active: koSelected()},event:{           keydown:function(el, e){ $parent.keyDown(el, e); },           dragstart:function(el, e){ $parent.dragStart(el); return true; },           dragover:function(el, e){ $parent.dragOver(el);},           dragend:function(el, e){ $parent.dragEnd();},           drop:function(el, e){ $parent.dragDrop(el);}         }">             <a class="svd_page_nav" href="#" data-bind="click:$parent.selectPageClick">                <span data-bind="text: title"></span>            </a>        </li>        <!-- /ko  -->        <li><button class="btn btn-default svd_add_new_page_btn" data-bind="click:addNewPageClick"><span class="glyphicon glyphicon-plus"></span></button></li>    </ul></script><script type="text/html" id="surveyembeding">    <div class="row">        <select data-bind="value:koLibraryVersion">            <option value="knockout" data-bind="text: $root.getLocString(\'ew.knockout\')"></option>            <option value="react" data-bind="text: $root.getLocString(\'ew.react\')"></option>        </select>        <select data-bind="value:koScriptUsing">            <option value="bootstrap" data-bind="text: $root.getLocString(\'ew.bootstrap\')"></option>            <option value="standard" data-bind="text: $root.getLocString(\'ew.standard\')"></option>        </select>        <select data-bind="value:koShowAsWindow">            <option value="page" data-bind="text: $root.getLocString(\'ew.showOnPage\')"></option>            <option value="window" data-bind="text: $root.getLocString(\'ew.showInWindow\')"></option>        </select>        <label class="checkbox-inline" data-bind="visible:koHasIds">            <input type="checkbox" data-bind="checked:koLoadSurvey" />            <span data-bind="text: $root.getLocString(\'ew.loadFromServer\')"></span>        </label>    </div>    <div class="panel">        <div class="panel-heading" data-bind="text: $root.getLocString(\'ew.titleScript\')"></div>        <div id="surveyEmbedingHead" style="height:70px;width:100%"></div>    </div>    <div class="panel" data-bind="visible: koVisibleHtml">        <div class="panel-heading"  data-bind="text: $root.getLocString(\'ew.titleHtml\')"></div>        <div id="surveyEmbedingBody" style="height:30px;width:100%"></div>    </div>    <div class="panel">        <div class="panel-heading"  data-bind="text: $root.getLocString(\'ew.titleJavaScript\')"></div>        <div id="surveyEmbedingJava" style="height:300px;width:100%"></div>    </div></script><script type="text/html" id="propertyeditor-boolean">    <input class="form-control" type="checkbox" data-bind="checked: koValue" /></script><script type="text/html" id="propertyeditor-dropdown">    <div class="custom-select">        <select class="form-control" data-bind="value: koValue, options: choices"  style="width:100%"></select>    </div></script><script type="text/html" id="propertyeditor-html">    <!-- ko template: { name: \'propertyeditor-modal\', data: $data } --><!-- /ko --></script><script type="text/html" id="propertyeditorcontent-html">    <textarea id="TxtAreaContent" class="form-control" data-bind="value:koValue" style="width:100%" rows="10" autofocus="autofocus"></textarea></script><script type="text/html" id="propertyeditor-itemvalues">    <!-- ko template: { name: \'propertyeditor-modal\', data: $data } --><!-- /ko --></script><script type="text/html" id="propertyeditorcontent-itemvalues">    <div style="overflow-y: auto; overflow-x:hidden; max-height:400px">        <table class="table">            <thead>                <tr>                    <th></th>                    <th data-bind="text: $root.getLocString(\'pe.value\')"></th>                    <th data-bind="text: $root.getLocString(\'pe.text\')"></th>                    <th></th>                </tr>            </thead>            <tbody>                <!-- ko foreach: koItems -->                <tr>                    <td>                        <div class="btn-group" role="group">                            <button type="button" class="btn btn-xs" data-bind="visible: $index() > 0, click: $parent.onMoveUpClick"><span class="glyphicon glyphicon-arrow-up" aria-hidden="true"></span></button>                            <button type="button" class="btn btn-xs" style="float:none" data-bind="visible: $index() < $parent.koItems().length - 1, click: $parent.onMoveDownClick"><span class="glyphicon glyphicon-arrow-down" aria-hidden="true"></span></button>                        </div>                    </td>                    <td>                        <input type="text" class="form-control" data-bind="value:koValue" style="width:200px" />                        <div class="alert alert-danger no-padding" role="alert" data-bind="visible:koHasError, text: $root.getLocString(\'pe.enterNewValue\')"></div>                    </td>                    <td><input type="text" class="form-control" data-bind="value:koText" style="width:200px" /></td>                    <td><button type="button" class="btn btn-xs" data-bind="click: $parent.onDeleteClick"><span class="glyphicon glyphicon-trash" aria-hidden="true"></span></button></td>                </tr>                <!-- /ko -->            </tbody>        </table>    </div>    <div class="row btn-toolbar">        <input type="button" class="btn btn-success" data-bind="click: onAddClick, value: $root.getLocString(\'pe.addNew\')" />        <input type="button" class="btn btn-danger" data-bind="click: onClearClick, value: $root.getLocString(\'pe.removeAll\')" />    </div></script><script type="text/html" id="propertyeditor-matrixdropdowncolumns">    <!-- ko template: { name: \'propertyeditor-modal\', data: $data } --><!-- /ko --></script><script type="text/html" id="propertyeditorcontent-matrixdropdowncolumns">    <table class="table">        <thead>            <tr>                <th data-bind="text: $root.getLocString(\'pe.required\')"></th>                <th data-bind="text: $root.getLocString(\'pe.cellType\')"></th>                <th data-bind="text: $root.getLocString(\'pe.name\')"></th>                <th data-bind="text: $root.getLocString(\'pe.title\')"></th>                <th></th>            </tr>        </thead>        <tbody>            <!-- ko foreach: koItems -->            <tr>                <td>                    <a href="#" data-bind="visible:koHasChoices, click: onShowChoicesClick">                        <span class="glyphicon" data-bind="css: {\'glyphicon-chevron-down\': !koShowChoices(), \'glyphicon-chevron-up\': koShowChoices()}"></span>                    </a>                    <input type="checkbox" data-bind="checked: koIsRequired" />                </td>                <td>                    <select class="form-control" data-bind="options: cellTypeChoices, value: koCellType"  style="width:110px"></select>                </td>                <td>                    <input type="text" class="form-control" data-bind="value:koName" style="width:100px" />                    <div class="alert alert-danger no-padding" role="alert" data-bind="visible:koHasError, text: $root.getLocString(\'pe.enterNewValue\')"></div>                </td>                <td><input type="text" class="form-control" data-bind="value:koTitle" style="width:120px" /></td>                <td><input type="button" class="btn" data-bind="click: $parent.onDeleteClick, value: $root.getLocString(\'pe.delete\')"/></td>            </tr>            <tr data-bind="visible: koShowChoices() && koHasChoices()">                <td colspan="4" style="border-top-style:none">                    <div class="form-group">                        <label class="control-label col-sm-3" data-bind="text:$root.getLocString(\'pe.hasOther\')"></label>                        <div class="col-sm-2">                            <input type="checkbox" data-bind="checked: koHasOther" />                        </div>                        <div class="col-sm-7" data-bind="visible: !koHasColCount()"></div>                        <label class="control-label col-sm-3" data-bind="visible:koHasColCount, text:$root.getLocString(\'pe.colCount\')"></label>                        <select class="form-control col-sm-4" data-bind="visible:koHasColCount, options: colCountChoices, value: koColCount" style="width:110px"></select>                    </div>                    <div class="modal-body svd_notopbottompaddings">                        <!-- ko template: { name: \'propertyeditorcontent-itemvalues\', data: choicesEditor } -->                        <!-- /ko -->                    </div>                </td>            </tr>            <!-- /ko -->            <tr>                <td colspan="3">                    <div class="row btn-toolbar">                        <input type="button" class="btn btn-success" data-bind="click: onAddClick, value: $root.getLocString(\'pe.addNew\')"/>                        <input type="button" class="btn btn-danger" data-bind="click: onClearClick, value: $root.getLocString(\'pe.removeAll\')"" />                    </div>                </td>            </tr>        </tbody>    </table></script><script type="text/html" id="propertyeditor-modal">    <div class="input-group" data-bind="visible:!editor.isEditable">        <span data-bind="text: koText"></span>        <div class="input-group-btn">            <button type="button"  class="btn btn-default"data-toggle="modal" style="padding: 2px;" data-bind="attr: {\'data-target\' : modalNameTarget}">                <span class="glyphicon glyphicon-edit" aria-hidden="true"></span>            </button>        </div>    </div>    <div class="input-group" data-bind="visible:editor.isEditable" style="display:table">        <input class="form-control" type="text" data-bind="value: koValue" style="display:table-cell; width:100%" />        <div class="input-group-btn">            <button type="button" class="btn btn-default" style="display:table-cell; padding: 2px;"  data-toggle="modal" data-bind="attr: {\'data-target\' : modalNameTarget}">                <span class="glyphicon glyphicon-edit" aria-hidden="true"></span>            </button>        </div>    </div>    <div data-bind="attr: {id : modalName}" class="modal fade" role="dialog">        <div class="modal-dialog">            <div class="modal-content">                <div class="modal-header">                    <button type="button" class="close" data-dismiss="modal">&times;</button>                    <h4 class="modal-title" data-bind="text:editor.title"></h4>                </div>                  <div class="modal-body svd_notopbottompaddings">                    <!-- ko template: { name: \'propertyeditorcontent-\' + editorType, data: editor } -->                    <!-- /ko -->                </div>                <div class="modal-footer">    <input type="button" class="btn btn-primary" data-bind="click: editor.onUploadClick, value: $root.getLocString(\'pe.upload\')" style="width:100px" />                <input type="button" class="btn btn-success" data-bind="click: editor.onApplyClick, value: $root.getLocString(\'pe.apply\')" style="width:100px" />                    <input type="button" class="btn btn-default" data-bind="click: editor.onResetClick, value: $root.getLocString(\'pe.reset\')" style="width:100px" />                    <input type="button" class="btn btn-default" data-dismiss="modal" data-bind="value: $root.getLocString(\'pe.close\')" style="width:100px" />                </div>            </div>        </div>    </div></script><script type="text/html" id="propertyeditor-number">    <input class="form-control" type="number" data-bind="value: koValue" style="width:100%" /></script><script type="text/html" id="propertyeditor-restfull">    <!-- ko template: { name: \'propertyeditor-modal\', data: $data } --><!-- /ko --></script><script type="text/html" id="propertyeditorcontent-restfull">    <form>        <div class="form-group">            <label for="url">Url:</label>            <input id="url" type="text" data-bind="value:koUrl" class="form-control" />        </div>        <div class="form-group">            <label for="path">Path:</label>            <input id="path" type="text" data-bind="value:koPath" class="form-control" />        </div>        <div class="form-group">            <label for="valueName">valueName:</label>            <input id="valueName" type="text" data-bind="value:koValueName" class="form-control" />        </div>        <div class="form-group">            <label for="titleName">titleName:</label>            <input id="titleName" type="text" data-bind="value:koTitleName" class="form-control" />        </div>    </form>    <div id="restfullSurvey" style="width:100%;height:150px"></div></script><script type="text/html" id="propertyeditor-string">    <input class="form-control" type="text" data-bind="value: koValue" style="width:100%" /></script><script type="text/html" id="propertyeditor-text">    <!-- ko template: { name: \'propertyeditor-modal\', data: $data } --><!-- /ko --></script><script type="text/html" id="propertyeditorcontent-text">    <textarea class="form-control" data-bind="value:koValue" style="width:100%" rows="10" autofocus="autofocus"></textarea></script><script type="text/html" id="propertyeditor-textitems">    <!-- ko template: { name: \'propertyeditor-modal\', data: $data } --><!-- /ko --></script><script type="text/html" id="propertyeditorcontent-textitems"><div class="panel">    <table class="table">        <thead>            <tr>                <th data-bind="text: $root.getLocString(\'pe.name\')"></th>                <th data-bind="text: $root.getLocString(\'pe.title\')"></th>                <th></th>            </tr>        </thead>        <tbody>            <!-- ko foreach: koItems -->            <tr>                <td><input type="text" class="form-control" data-bind="value:koName" style="width:200px" /></td>                <td><input type="text" class="form-control" data-bind="value:koTitle" style="width:200px" /></td>                <td><input type="button" class="btn" data-bind="click: $parent.onDeleteClick, value: $root.getLocString(\'pe.delete\')"/></td>            </tr>            <!-- /ko -->            <tr>                <td colspan="4"><input type="button" class="btn btn-success" data-bind="click: onAddClick, value: $root.getLocString(\'pe.addNew\')"/></td>            </tr>        </tbody>    </table></div></script><script type="text/html" id="propertyeditor-triggers">    <!-- ko template: { name: \'propertyeditor-modal\', data: $data } --><!-- /ko --></script><script type="text/html" id="propertyeditorcontent-triggers"><div class="panel">    <div class="panel-heading">        <div class="row input-group">            <button type="button" class="dropdown-toggle input-group-addon" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">                <span class="glyphicon glyphicon-plus"></span>            </button>            <ul class="dropdown-menu input-group">                <!-- ko foreach: availableTriggers -->                <li><a href="#" data-bind="click: $parent.onAddClick($data)"><span data-bind="text:$data"></span></a></li>                <!-- /ko  -->            </ul>            <select class="form-control" data-bind="options: koItems, optionsText: \'koText\', value: koSelected"></select>            <span class="input-group-btn">                <button type="button" data-bind="enable: koSelected() != null, click: onDeleteClick" class="btn btn-default"><span class="glyphicon glyphicon-remove"></span></button>            </span>        </div>    </div>    <div data-bind="visible: koSelected() == null">        <div data-bind="visible: koQuestions().length == 0, text: $root.getLocString(\'pe.noquestions\')"></div>        <div data-bind="visible: koQuestions().length > 0, text: $root.getLocString(\'pe.createtrigger\')"></div>    </div>    <div data-bind="visible: koSelected() != null">        <div data-bind="with: koSelected">            <div class="row form-inline">                <div class="col-sm-4">                    <span data-bind="text: $root.getLocString(\'pe.triggerOn\')"></span><select class="form-control" data-bind="options:$parent.koQuestions, value: koName"></select> <span> </span>                </div>                <div class="col-sm-4">                    <select class="form-control" data-bind="options:availableOperators, optionsValue: \'name\', optionsText: \'text\', value:koOperator"></select>                </div>                <div class="col-sm-4">                    <input class="form-control" style="padding: 0" type="text" data-bind="visible: koRequireValue, value:koValue" />                </div>            </div>            <!-- ko if: koType() == \'visibletrigger\' -->            <div class="row">                <div class="col-sm-6">                    <!-- ko template: { name: \'propertyeditor-triggersitems\', data: pages } -->                    <!-- /ko -->                </div>                <div class="col-sm-6">                    <!-- ko template: { name: \'propertyeditor-triggersitems\', data: questions } -->                    <!-- /ko -->                </div>            </div>            <!-- /ko -->            <!-- ko if: koType() == \'completetrigger\' -->            <div class="row">               <div style="margin: 10px" data-bind="text: $root.getLocString(\'pe.triggerCompleteText\')"></div>            </div>            <!-- /ko -->            <!-- ko if: koType() == \'setvaluetrigger\' -->            <div class="row form-inline" style="margin-top:10px">                <div class="col-sm-6">                    <span data-bind="text: $root.getLocString(\'pe.triggerSetToName\')"></span><input class="form-control" type="text" data-bind="value:kosetToName" />                </div>                <div class="col-sm-1">                </div>                <div class="col-sm-5">                    <span data-bind="text: $root.getLocString(\'pe.triggerSetValue\')"></span><input class="form-control" type="text" data-bind="value:kosetValue" />                </div>            </div>            <div class="row form-inline">                <div class="col-sm-12">                    <input type="checkbox" data-bind="checked: koisVariable" /> <span data-bind="text: $root.getLocString(\'pe.triggerIsVariable\')"></span>                </div>            </div>            <!-- /ko -->        </div>    </div></div></script><script type="text/html" id="propertyeditor-triggersitems">    <div class="panel no-margins no-padding">        <div class="panel-heading">            <span data-bind="text: title"></span>        </div>        <div class="input-group">            <select class="form-control" multiple="multiple" data-bind="options:koChoosen, value: koChoosenSelected"></select>            <span class="input-group-btn" style="vertical-align:top">                <button type="button" data-bind="enable: koChoosenSelected() != null, click: onDeleteClick" class="btn"><span class="glyphicon glyphicon-remove"></span></button>            </span>        </div>        <div class="input-group" style="margin-top:5px">            <select class="form-control" data-bind="options:koObjects, value: koSelected"></select>            <span class="input-group-btn">                <button type="button" data-bind="enable: koSelected() != null, click: onAddClick" style="width:40px" class="btn btn-success"><span class="glyphicon glyphicon-plus"></span></button>            </span>        </div>    </div></script><script type="text/html" id="propertyeditor-validators">    <!-- ko template: { name: \'propertyeditor-modal\', data: $data } --><!-- /ko --></script><script type="text/html" id="propertyeditorcontent-validators"><div class="panel">    <div class="panel-heading">        <div class="row input-group">            <button type="button" class="dropdown-toggle input-group-addon" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">                <span class="glyphicon glyphicon-plus"></span>            </button>            <ul class="dropdown-menu input-group">                <!-- ko foreach: availableValidators -->                <li><a href="#" data-bind="click: $parent.onAddClick($data)"><span data-bind="text:$data"></span></a></li>                <!-- /ko  -->            </ul>            <select class="form-control" data-bind="options: koItems, optionsText: \'text\', value: koSelected"></select>            <span class="input-group-btn">                <button type="button" data-bind="enable: koSelected() != null, click: onDeleteClick" class="btn"><span class="glyphicon glyphicon-remove"></span></button>            </span>        </div>    </div>    <div data-bind="template: { name: \'objecteditor\', data: selectedObjectEditor }"></div></div></script>';
 
 // Designer Section //
 
 var html_design = "";
 html_design += "<div data-bind=\"event:{ dragenter:function(el, e){ dragEnter(e);}, dragleave:function(el, e){ dragLeave(e);}, dragover:function(el, e){ return false;}, drop:function(el, e){ dragDrop(e);}}\">";
 html_design += "	<h4 data-bind=\"visible: (title.length &gt; 0) && data.showPageTitles, text: koNo() + processedTitle, css: $root.css.pageTitle\"><\/h4><!-- ko foreach: { data: rows, as: \'row\'} -->";
+// html_design += "<div class=\"itemCount\">";
 html_design += "	<div class=\"svd_question_container\" data-bind=\"visible: row.koVisible, css: $root.css.row\">";
 html_design += "		<!-- ko foreach: { data: row.questions, as: \'question\' , afterRender: row.koAfterRender } -->";
+html_design += "<div class=\"itemCount\"></div>";
 html_design += "		<div data-bind=\"visible: question.koIsDragging\">";
 html_design += "			<!-- ko template: { if: $root.koDraggingSource(), name: \'survey-question\', data: $root.koDraggingSource(), as: \'question\', templateOptions: { isDragging: true } } --><!-- \/ko -->";
 html_design += "		<\/div><!-- ko template: { name: \'survey-question\', data: question, templateOptions: { isDragging: false } } --><!-- \/ko --><!-- \/ko -->";
@@ -149,6 +151,7 @@ html_design += "	<\/div>";
 html_design += "	<div data-bind=\"visible: questions.length &gt; 0 && koDraggingBottom()\">";
 html_design += "		<!-- ko template: { if: $root.koDraggingSource(), name: \'survey-question\', data: $root.koDraggingSource(), as: \'question\', templateOptions: { isDragging: true } } --><!-- \/ko -->";
 html_design += "	<\/div>";
+// html_design += "</div>";
 html_design += "<\/div>";
 
 // Header Section
@@ -161,6 +164,7 @@ html_header += "			<div>";
 html_header += "				<span aria-hidden=\"true\" class=\"glyphicon glyphicon-exclamation-sign\"><\/span> <span data-bind=\"text:$data.getText()\"><\/span>";
 html_header += "			<\/div>";
 html_header += "		<\/div><!-- ko if: question.hasTitle -->";
+html_header += "<div data-bind=\"html: question.images\"></div>";
 html_header += "		<h5 data-bind=\"visible: $root.questionTitleLocation == \'top\', text: question.koTitle(), css: $root.css.question.title\"><\/h5><!-- \/ko --><!-- ko template: { name: \'survey-question-\' + question.getType(), data: question } --><!-- \/ko -->";
 html_header += "		<div data-bind=\"visible: question.hasComment\">";
 html_header += "			<div data-bind=\"text:question.commentText\"><\/div>";
@@ -168,11 +172,90 @@ html_header += "			<div data-bind=\"template: { name: \'survey-comment\', data:
 html_header += "		<\/div><!-- ko if: question.hasTitle -->";
 html_header += "		<h5 data-bind=\"visible: $root.questionTitleLocation == \'bottom\', text: question.koTitle(), css: $root.css.question.title\"><\/h5><!-- \/ko -->";
 html_header += "	<\/div>";
-html_header += "	<div class=\"svd_question_menu\" data-bind=\"visible: koIsSelected\">";
-html_header += "		<button aria-expanded=\"false\" aria-haspopup=\"true\" class=\"btn btn-primary btn-xs dropdown-toggle\" data-toggle=\"dropdown\" type=\"button\"><span class=\"glyphicon glyphicon-option-horizontal\"><\/span><\/button>";
-html_header += "		<ul class=\"dropdown-menu\">";
-html_header += "			<li><button class=\"btn btn-primary btn-xs\" data-bind=\"click: $root.copyQuestionClick, text:$root.getEditorLocString(\'survey.addToToolbox\')\"><\/button><\/li>";
-html_header += "			<li><button class=\"btn btn-primary btn-xs\" data-bind=\"click: $root.fastCopyQuestionClick, text:$root.getEditorLocString(\'survey.copy\')\"><\/button><\/li>";
-html_header += "		<\/ul>";
-html_header += "	<\/div>";
-html_header += "<\/div>";
\ No newline at end of file
+// html_header += "	<div class=\"svd_question_menu\" data-bind=\"visible: koIsSelected\">";
+// html_header += "		<button aria-expanded=\"false\" aria-haspopup=\"true\" class=\"btn btn-primary btn-xs dropdown-toggle\" data-toggle=\"dropdown\" type=\"button\"><span class=\"glyphicon glyphicon-option-horizontal\"><\/span><\/button>";
+// html_header += "		<ul class=\"dropdown-menu\">";
+// html_header += "			<li><button class=\"btn btn-primary btn-xs\" data-bind=\"click: $root.copyQuestionClick, text:$root.getEditorLocString(\'survey.addToToolbox\')\"><\/button><\/li>";
+// html_header += "			<li><button class=\"btn btn-primary btn-xs\" data-bind=\"click: $root.fastCopyQuestionClick, text:$root.getEditorLocString(\'survey.copy\')\"><\/button><\/li>";
+// html_header += "		<\/ul>";
+// html_header += "	<\/div>";
+html_header += "<\/div>";
+
+// Suyvey template
+
+var template = "";
+template += "<script id=\"survey-comment\" type=\"text\/html\">";
+template += "  <input data-bind=\"value:$data.question.koComment, visible:$data.visible, css: $root.css.question.comment\" \/>";
+template += "<\/script>";
+template += "<div data-bind=\"css: $root.css.root\">";
+template += "	<div data-bind=\"visible: (title.length &gt; 0) && showTitle && koState() != \'completed\', css: $root.css.header\">";
+template += "		<h1 data-bind=\"html:title\"><\/h1>";
+template += "		<h4 data-bind=\"html:description\"><\/h4>";
+template += "	<\/div><!-- ko if: koState() == \"running\" -->";
+template += "	<div data-bind=\"css: $root.css.body\">";
+template += "		<div data-bind=\"visible: showProgressBar ==\'top\', template: { name: \'survey-progress\', data: $data }\"><\/div>";
+template += "		<div data-bind=\"template: { name: \'survey-page\', data: koCurrentPage }\" id=\"sq_page\"><\/div>";
+template += "		<div data-bind=\"visible: showProgressBar ==\'bottom\', template: { name: \'survey-progress\', data: $data }\" style=\"margin-top:10px\"><\/div>";
+template += "	<\/div>";
+template += "	<div data-bind=\"visible: showNavigationButtons && !isDesignMode, css: $root.css.footer\">";
+template += "		<input data-bind=\"value: pagePrevText, click: prevPage, visible: !koIsFirstPage(), css: $root.cssNavigationPrev\" type=\"button\"> <input data-bind=\"value: pageNextText, click: nextPage, visible: !koIsLastPage(), css: $root.cssNavigationNext\" type=\"button\"> <input data-bind=\"value: completeText, click: completeLastPage, visible: koIsLastPage(), css: $root.cssNavigationComplete\" type=\"button\">";
+template += "	<\/div><!-- \/ko --><!-- ko if: koState() == \"completed\" -->";
+template += "	<div data-bind=\"html: processedCompletedHtml\"><\/div><!-- \/ko --><!-- ko if: koState() == \"loading\" -->";
+template += "	<div data-bind=\"html: processedLoadingHtml\"><\/div><!-- \/ko --><!-- ko if: koState() == \"empty\" -->";
+template += "	<div data-bind=\"text:emptySurveyText, css: $root.css.body\"><\/div><!-- \/ko -->";
+template += "<\/div>";
+template += "<script id=\"survey-page\" type=\"text\/html\">";
+template += "    <h4 data-bind=\"visible: (title.length > 0) && data.showPageTitles, text: koNo() + processedTitle, css: $root.css.pageTitle\"><\/h4>    <!-- ko foreach: { data: rows, as: \'row\'} -->    <div data-bind=\"visible: row.koVisible, css: $root.css.row\">        <!-- ko foreach: { data: row.questions, as: \'question\' , afterRender: row.koAfterRender } -->";
+// template += "<div data-bind=\"html: question.images\"></div>";
+template += "            <!-- ko template: { name: \'survey-question\', data: question } --><!-- \/ko -->        <!-- \/ko -->    <\/div>    <!-- \/ko -->";
+// template += "<div data-bind=\"html: question.images\"></div>";
+template += "<\/script>";
+template += "<script id=\"survey-progress\" type=\"text\/html\">";
+template += "    <div style=\"width:60%;\" data-bind=\"css: $root.css.progress\">        <div data-bind=\"css: $root.css.progressBar, style:{width: koProgress() + \'%\'}\"             role=\"progressbar\" aria-valuemin=\"0\"             aria-valuemax=\"100\">            <span data-bind=\"text:koProgressText\"><\/span>        <\/div>    <\/div>";
+template += "<\/script>";
+template += "<script id=\"survey-question-checkbox\" type=\"text\/html\">";
+// template += "<div data-bind=\"html: question.images\"></div>";
+// template += "<div data-bind=\"html: question.images\"><\/div>";
+template += "    <form data-bind=\"css: $root.css.checkbox.root\">";
+template += "        <!-- ko foreach: { data: question.koVisibleChoices, as: \'item\', afterRender: question.koAfterRender}  -->        <div id=\"choices_items\" data-bind=\"style:{width: question.koWidth, \'margin-right\': question.colCount == 0 ? \'5px\': \'0px\'}, css: $root.css.checkbox.item\">";
+template += "            <label data-bind=\"css: $root.css.checkbox.item\">                <input type=\"checkbox\" data-bind=\"attr: {name: question.name, value: item.value}, checked: question.koValue\" \/>                <span data-bind=\"text: item.text\"><\/span>            <\/label>            <div data-bind=\"visible: question.hasOther && ($index() == question.koVisibleChoices().length-1)\">                <div data-bind=\"template: { name: \'survey-comment\', data: {\'question\': question, \'visible\': question.koOtherVisible } }, css: $root.css.checkbox.other\"><\/div>            <\/div>        <\/div>        <!-- \/ko -->    <\/form>";
+template += "<\/script>";
+template += "<script id=\"survey-question-comment\" type=\"text\/html\">";
+template += "    <textarea type=\"text\" data-bind=\"attr: {cols: question.cols, rows: question.rows}, value:question.koValue, css: $root.css.comment\" \/>";
+template += "<\/script>";
+template += "<script id=\"survey-question-dropdown\" type=\"text\/html\">";
+template += "    <select data-bind=\"options: question.koVisibleChoices, optionsText: \'text\', optionsValue: \'value\', value: question.koValue, optionsCaption: question.optionsCaption, css: $root.css.dropdown\"><\/select>    <div data-bind=\"visible: question.hasOther\">        <div data-bind=\"template: { name: \'survey-comment\', data: {\'question\': question, \'visible\': question.koOtherVisible } }\"><\/div>    <\/div>";
+template += "<\/script>";
+template += "<script id=\"survey-question-errors\" type=\"text\/html\">";
+template += "    <div role=\"alert\" data-bind=\"visible: koErrors().length > 0, foreach: { data: koErrors, as: \'error\'}, css: $root.css.error.root\">        <div>            <span aria-hidden=\"true\" data-bind=\"css: $root.css.error.icon\"><\/span>            <span data-bind=\"text:error.getText(), css: $root.css.error.item\"><\/span>        <\/div>    <\/div>";
+template += "<\/script>";
+template += "<script id=\"survey-question-file\" type=\"text\/html\">";
+template += "    <input type=\"file\" data-bind=\"event: {change: dochange}\">    <div>        <img data-bind=\"attr: { src: question.koData, height: question.imageHeight, width: question.imageWidth }, visible: question.koHasValue\">    <\/div>";
+template += "<\/script>";
+template += "<script id=\"survey-question-html\" type=\"text\/html\">";
+template += "    <div data-bind=\"html: question.processedHtml\"><\/div>";
+template += "<\/script>";
+template += "<script id=\"survey-question-matrix\" type=\"text\/html\">";
+template += "    <table data-bind=\"css: $root.css.matrix.root\">        <thead>            <tr>                <th data-bind=\"visible: question.hasRows\"><\/th>                <!-- ko foreach: question.columns -->                <th data-bind=\"text:$data.text\"><\/th>                <!-- \/ko -->            <\/tr>        <\/thead>        <tbody>            <!-- ko foreach: { data: question.visibleRows, as: \'row\' } -->            <tr>                <td data-bind=\"visible: question.hasRows, text:row.text\"><\/td>                <!-- ko foreach: question.columns -->                <td>                    <input type=\"radio\" data-bind=\"attr: {name: row.fullName, value: $data.value}, checked: row.koValue\"\/>                <\/td>                <!-- \/ko -->            <\/tr>            <!-- \/ko -->        <\/tbody>    <\/table>";
+template += "<\/script>";
+template += "<script id=\"survey-question-matrixdropdown\" type=\"text\/html\">";
+template += "    <div data-bind=\"style: {overflowX: question.horizontalScroll? \'scroll\': \'\'}\">        <table data-bind=\"css: $root.css.matrixdropdown.root\">            <thead>                <tr>                    <th><\/th>                    <!-- ko foreach: question.columns -->                    <th data-bind=\"text: question.getColumnTitle($data), style: { minWidth: question.getColumnWidth($data) }\"><\/th>                    <!-- \/ko -->                <\/tr>            <\/thead>            <tbody>                <!-- ko foreach: { data: question.visibleRows, as: \'row\' } -->                <tr>                    <td data-bind=\"text:row.text\"><\/td>                    <!-- ko foreach: row.cells-->                    <td>                        <!-- ko template: { name: \'survey-question-errors\', data: $data.question } -->                        <!-- \/ko -->                        <!-- ko template: { name: \'survey-question-\' + $data.question.getType(), data: $data.question, as: \'question\' } -->                        <!-- \/ko -->                    <\/td>                    <!-- \/ko -->                <\/tr>                <!-- \/ko -->            <\/tbody>        <\/table>    <\/div>";
+template += "<\/script>";
+template += "<script id=\"survey-question-matrixdynamic\" type=\"text\/html\">";
+template += "    <div data-bind=\"style: {overflowX: question.horizontalScroll? \'scroll\': \'\'}\">        <table data-bind=\"css: $root.css.matrixdynamic.root\">            <thead>                <tr>                    <!-- ko foreach: question.columns -->                    <th data-bind=\"text: question.getColumnTitle($data), style: { minWidth: question.getColumnWidth($data) }\"><\/th>                    <!-- \/ko -->                    <th><\/th>                <\/tr>            <\/thead>            <tbody>                <!-- ko foreach: { data: question.koRows, as: \'row\' } -->                <tr>                    <!-- ko foreach: row.cells-->                    <td>                        <!-- ko template: { name: \'survey-question-errors\', data: $data.question } -->                        <!-- \/ko -->                        <!-- ko template: { name: \'survey-question-\' + $data.question.getType(), data: $data.question, as: \'question\' } -->                        <!-- \/ko -->                    <\/td>                    <!-- \/ko -->                    <td><input type=\"button\" data-bind=\"click:question.koRemoveRowClick, css: $root.css.matrixdynamic.button, value: question.removeRowText\" \/><\/td>                <\/tr>                <!-- \/ko -->            <\/tbody>        <\/table>    <\/div>    <input type=\"button\" data-bind=\"click:question.koAddRowClick, css: $root.css.matrixdynamic.button, value: question.addRowText\" \/>";
+template += "<\/script>";
+template += "<script id=\"survey-question-multipletext\" type=\"text\/html\">";
+template += "    <table data-bind=\"css: $root.css.multipletext.root, foreach: { data:  question.koRows, as: \'row\' }\">        <tr data-bind=\"foreach: { data: row, as: \'item\' }\">            <td data-bind=\"text: item.title, css: $root.css.multipletext.itemTitle\"><\/td>            <td><input type=\"text\" style=\"float:left\" data-bind=\"attr: {size: question.itemSize}, value: item.koValue, css: $root.css.multipletext.itemValue\" \/><\/td>        <\/tr>    <\/table>";
+template += "<\/script>";
+template += "<script id=\"survey-question-radiogroup\" type=\"text\/html\">";
+template += "    <form data-bind=\"css: $root.css.radiogroup.root\">        <!-- ko foreach: { data: question.koVisibleChoices, as: \'item\', afterRender: question.koAfterRender}  -->        <div  data-bind=\"style:{width: question.koWidth, \'margin-right\': question.colCount == 0 ? \'5px\': \'0px\'}, css: $root.css.radiogroup.item\">            <label data-bind=\"css: $root.css.radiogroup.item\">                <input type=\"radio\" data-bind=\"attr: {name: question.name, value: item.value}, checked: question.koValue\" \/>                <span data-bind=\"text: item.text\"><\/span>            <\/label>            <div data-bind=\"visible: question.hasOther && ($index() == question.koVisibleChoices().length-1)\">                <div data-bind=\"template: { name: \'survey-comment\', data: {\'question\': question, \'visible\': question.koOtherVisible}}, css: $root.css.radiogroup.other\"><\/div>            <\/div>        <\/div>        <!-- \/ko -->    <\/form>";
+template += "<\/script>";
+template += "<script id=\"survey-question-rating\" type=\"text\/html\">";
+template += "    <div data-bind=\"css: $root.css.rating.root\">        <!-- ko foreach: question.koVisibleRateValues -->        <label data-bind=\"css: question.koGetCss($data)\">            <input type=\"radio\" style=\"display: none;\"                    data-bind=\"attr: {name: question.name, id: question.name + $index(), value: $data.value}, event: { change: question.koChange}\" \/>            <span data-bind=\"visible: $index() == 0, text: question.mininumRateDescription\"><\/span>            <span data-bind=\"text: $data.text\"><\/span>            <span data-bind=\"visible: $index() == (question.koVisibleRateValues().length-1), text: question.maximumRateDescription\"><\/span>        <\/label>        <!-- \/ko -->    <\/div>    <div data-bind=\"visible: question.hasOther\">        <div data-bind=\"template: { name: \'survey-comment\', data: {\'question\': question } }\"><\/div>    <\/div>";
+template += "<\/script>";
+template += "<script id=\"survey-question-text\" type=\"text\/html\">";
+template += "    <input data-bind=\"attr: {type: question.inputType, size: question.size}, value:question.koValue, css: $root.css.text\"\/>";
+template += "<\/script>";
+template += "<script id=\"survey-question\" type=\"text\/html\">";
+template += "    <div style=\"vertical-align:top\" data-bind=\"css: $root.css.question.root, style: {display: question.koVisible() ? \'inline-block\': \'none\', marginLeft: question.koMarginLeft, paddingRight: question.koPaddingRight, width: question.koRenderWidth }, attr: {id: id}\">        <!-- ko if: question.hasTitle -->        <h5 data-bind=\"visible: $root.questionTitleLocation == \'top\', text: question.koTitle(), css: $root.css.question.title\"><\/h5>        <!-- \/ko -->        <!-- ko template: { name: \'survey-question-errors\', data: question } -->        <!-- \/ko -->        <!-- ko template: { name: \'survey-question-\' + question.getType(), data: question, afterRender: question.koQuestionAfterRender } -->        <!-- \/ko -->        <div data-bind=\"visible: question.hasComment\">            <div data-bind=\"text:question.commentText\"><\/div>            <div data-bind=\"template: { name: \'survey-comment\', data: {\'question\': question, \'visible\': true } }\"><\/div>        <\/div>        <!-- ko if: question.hasTitle -->        <h5 data-bind=\"visible: $root.questionTitleLocation == \'bottom\', text: question.koTitle(), css: $root.css.question.title\"><\/h5>        <!-- \/ko -->    <\/div>";
+template += "<\/script>";
\ No newline at end of file
diff --git a/editable/survey.ko.js b/editable/survey.ko.js
index 321d63e..dca3a02 100644
--- a/editable/survey.ko.js
+++ b/editable/survey.ko.js
@@ -2109,9 +2109,11 @@
                         };
                         return ChoicesRestfull;
                     }(_base.Base);
-                    _jsonobject.JsonObject.metaData.addClass("choicesByUrl", ["url", "path", "valueName", "titleName"], function() {
-                        return new ChoicesRestfull();
-                    });
+                    _jsonobject.JsonObject.metaData.addClass(
+                        "choicesByUrl", ["url", "path", "valueName", "titleName"],
+                        function() {
+                            return new ChoicesRestfull();
+                        });
                     /* WEBPACK VAR INJECTION */
                 }.call(exports, __webpack_require__(3)))
 
@@ -3285,16 +3287,20 @@
                         return Question;
                     }(_questionbase.QuestionBase);
                     _jsonobject.JsonObject.metaData.addClass("question", [{
-                        name: "title:text",
-                        onGetValue: function onGetValue(obj) {
-                            return obj.titleValue;
-                        }
-                    }, {
-                        name: "commentText",
-                        onGetValue: function onGetValue(obj) {
-                            return obj.commentTextValue;
-                        }
-                    }, "isRequired:boolean", { name: "validators:validators", baseClassName: "surveyvalidator", classNamePart: "validator" }], null, "questionbase");
+                            // name: "title:text",
+                            onGetValue: function onGetValue(obj) {
+                                return obj.titleValue;
+                            }
+                        },
+                        // {
+                        //     name: "commentText",
+                        //     onGetValue: function onGetValue(obj) {
+                        //         return obj.commentTextValue;
+                        //     }
+                        // }, 
+                        // "isRequired:boolean", 
+                        // { name: "validators:validators", baseClassName: "surveyvalidator", classNamePart: "validator" }
+                    ], null, "questionbase");
                     /* WEBPACK VAR INJECTION */
                 }.call(exports, __webpack_require__(3)))
 
@@ -3447,7 +3453,10 @@
                         QuestionBase.questionCounter = 100;
                         return QuestionBase;
                     }(_base.Base);
-                    _jsonobject.JsonObject.metaData.addClass("questionbase", ["!name", { name: "visible:boolean", default: true }, "visibleIf:text", { name: "width" }, { name: "startWithNewLine:boolean", default: true }, { name: "indent:number", default: 0, choices: [0, 1, 2, 3] }]);
+                    _jsonobject.JsonObject.metaData.addClass("questionbase", ["!name",
+                        // { name: "visible:boolean", default: true }, "visibleIf:text", { name: "width" }, { name: "startWithNewLine:boolean", default: true },
+                        // { name: "indent:number", default: 0, choices: [0, 1, 2, 3] }
+                    ]);
                     /* WEBPACK VAR INJECTION */
                 }.call(exports, __webpack_require__(3)))
 
@@ -3549,6 +3558,7 @@
                             _super.call(this, name);
                             this.visibleChoicesCache = null;
                             this.otherItem = new _base.ItemValue("other", _surveyStrings.surveyLocalization.getString("otherItemText"));
+                            this.allow_multiple = false;
                             this.choicesFromUrl = null;
                             this.cachedValueForUrlRequestion = null;
                             this.choicesValues = new Array();
@@ -3556,12 +3566,27 @@
                             this.storeOthersAsComment = true;
                             this.choicesOrderValue = "none";
                             this.isSettingComment = false;
+                            // Custom Attribute 
+                            this.ItemImages = "";
+                            // 
                             this.choicesByUrl = this.createRestfull();
                             var self = this;
                             this.choicesByUrl.getResultCallback = function(items) {
                                 self.onLoadChoicesFromUrl(items);
                             };
                         }
+                        // Custom Define
+                        Object.defineProperty(QuestionSelectBase.prototype, "images", {
+                            get: function get() {
+                                return this.ItemImages;
+                            },
+                            set: function set(newValue) {
+                                this.ItemImages = newValue;
+                            },
+                            enumerable: true,
+                            configurable: true
+                        });
+                        // Endof Custom Define
                         Object.defineProperty(QuestionSelectBase.prototype, "isOtherSelected", {
                             get: function get() {
                                 return this.getStoreOthersAsComment() ? this.getHasOther(this.value) : this.getHasOther(this.cachedValue);
@@ -3742,6 +3767,16 @@
                                 return 0;
                             });
                         };
+                        Object.defineProperty(QuestionSelectBase.prototype, "AllowMultiple", {
+                            get: function get() {
+                                return this.allow_multiple;
+                            },
+                            set: function set(value) {
+                                this.allow_multiplee = value;
+                            },
+                            enumerable: true,
+                            configurable: true
+                        });
                         QuestionSelectBase.prototype.randomizeArray = function(array) {
                             for (var i = array.length - 1; i > 0; i--) {
                                 var j = Math.floor(Math.random() * (i + 1));
@@ -3775,25 +3810,35 @@
                         });
                         return QuestionCheckboxBase;
                     }(QuestionSelectBase);
-                    _jsonobject.JsonObject.metaData.addClass("selectbase", ["hasComment:boolean", "hasOther:boolean", {
-                        name: "choices:itemvalues",
-                        onGetValue: function onGetValue(obj) {
-                            return _base.ItemValue.getData(obj.choices);
-                        },
-                        onSetValue: function onSetValue(obj, value) {
-                            obj.choices = value;
-                        }
-                    }, { name: "choicesOrder", default: "none", choices: ["none", "asc", "desc", "random"] }, {
-                        name: "choicesByUrl:restfull",
-                        className: "ChoicesRestfull",
-                        onGetValue: function onGetValue(obj) {
-                            return obj.choicesByUrl.isEmpty ? null : obj.choicesByUrl;
+                    _jsonobject.JsonObject.metaData.addClass("selectbase", [
+                        // "hasComment:boolean", "hasOther:boolean",
+                        {
+                            name: "choices:itemvalues",
+                            onGetValue: function onGetValue(obj) {
+                                return _base.ItemValue.getData(obj.choices);
+                            },
+                            onSetValue: function onSetValue(obj, value) {
+                                obj.choices = value;
+                            }
                         },
-                        onSetValue: function onSetValue(obj, value) {
-                            obj.choicesByUrl.setData(value);
-                        }
-                    }, { name: "otherText", default: _surveyStrings.surveyLocalization.getString("otherItemText") }, "otherErrorText", { name: "storeOthersAsComment:boolean", default: true }], null, "question");
-                    _jsonobject.JsonObject.metaData.addClass("checkboxbase", [{ name: "colCount:number", default: 1, choices: [0, 1, 2, 3, 4] }], null, "selectbase");
+                        "AllowMultiple:boolean",
+                        "images:html",
+                        // { name: "choicesOrder", default: "none", choices: ["none", "asc", "desc", "random"] }, 
+                        // {
+                        //     name: "choicesByUrl:restfull",
+                        //     className: "ChoicesRestfull",
+                        //     onGetValue: function onGetValue(obj) {
+                        //         return obj.choicesByUrl.isEmpty ? null : obj.choicesByUrl;
+                        //     },
+                        //     onSetValue: function onSetValue(obj, value) {
+                        //         obj.choicesByUrl.setData(value);
+                        //     }
+                        // }, 
+                        // { name: "otherText", default: _surveyStrings.surveyLocalization.getString("otherItemText") }, "otherErrorText", { name: "storeOthersAsComment:boolean", default: true }
+                    ], null, "question");
+                    _jsonobject.JsonObject.metaData.addClass("checkboxbase", [
+                        // { name: "colCount:number", default: 1, choices: [0, 1, 2, 3, 4] }
+                    ], null, "selectbase");
                     /* WEBPACK VAR INJECTION */
                 }.call(exports, __webpack_require__(3)))
 
@@ -3826,7 +3871,7 @@
                         return creator(name);
                     };
                     QuestionFactory.Instance = new QuestionFactory();
-                    QuestionFactory.DefaultChoices = ["one", "two|second value", "three|third value"];
+                    QuestionFactory.DefaultChoices = ["one|first value", "two|second value", "three|third value"];
                     return QuestionFactory;
                 }();
 
@@ -4835,7 +4880,11 @@
                         PageModel.pageCounter = 100;
                         return PageModel;
                     }(_base.Base);
-                    _jsonobject.JsonObject.metaData.addClass("page", ["name", { name: "questions", baseClassName: "question" }, { name: "visible:boolean", default: true }, "visibleIf", "title"], function() {
+                    _jsonobject.JsonObject.metaData.addClass("page", [
+                        "name",
+                        { name: "questions", baseClassName: "question" },
+                        //  { name: "visible:boolean", default: true }, "visibleIf", "title"
+                    ], function() {
                         return new PageModel();
                     });
                     /* WEBPACK VAR INJECTION */
@@ -5412,7 +5461,9 @@
                             this.cookieName = null;
                             this.sendResultOnPageNext = false;
                             this.commentPrefix = "-Comment";
-                            this.title = "Title";
+                            this.title = "Survey Title";
+
+                            this.description = "Description";
                             this.showNavigationButtons = true;
                             this.showTitle = true;
                             this.showPageTitles = true;
@@ -5420,9 +5471,9 @@
                             this.requiredText = "*";
                             this.questionStartIndex = "";
                             this.questionTitleTemplate = "";
-                            this.showProgressBar = "off";
+                            this.showProgressBar = "bottom";
                             this.storeOthersAsComment = true;
-                            this.goNextPageAutomatic = false;
+                            this.goNextPageAutomatic = true;
                             this.pages = new Array();
                             this.triggers = new Array();
                             this.clearInvisibleValues = false;
@@ -6310,37 +6361,62 @@
                         };
                         return SurveyModel;
                     }(_base.Base);
-                    _jsonobject.JsonObject.metaData.addClass("survey", [{
-                        name: "locale",
-                        choices: function choices() {
-                            return _surveyStrings.surveyLocalization.getLocales();
-                        }
-                    }, "title", "completedHtml:html", { name: "pages", className: "page" }, {
-                        name: "questions",
-                        baseClassName: "question",
-                        onGetValue: function onGetValue(obj) {
-                            return null;
+                    _jsonobject.JsonObject.metaData.addClass("survey", [
+                        // {
+                        //     name: "locale",
+                        //     choices: function choices() {
+                        //         return _surveyStrings.surveyLocalization.getLocales();
+                        //     }
+                        // }, 
+                        "title:html",
+                        "description:html",
+                        // "completedHtml:html",
+                        { name: "pages", className: "page" },
+                        {
+                            name: "questions",
+                            baseClassName: "question",
+                            onGetValue: function onGetValue(obj) {
+                                return null;
+                            },
+                            onSetValue: function onSetValue(obj, value, jsonConverter) {
+                                var page = obj.addNewPage("");
+                                jsonConverter.toObject({ questions: value }, page);
+                            }
                         },
-                        onSetValue: function onSetValue(obj, value, jsonConverter) {
-                            var page = obj.addNewPage("");
-                            jsonConverter.toObject({ questions: value }, page);
-                        }
-                    }, { name: "triggers:triggers", baseClassName: "surveytrigger", classNamePart: "trigger" }, "surveyId", "surveyPostId", "cookieName", "sendResultOnPageNext:boolean", { name: "showNavigationButtons:boolean", default: true }, { name: "showTitle:boolean", default: true }, { name: "showPageTitles:boolean", default: true }, "showPageNumbers:boolean", { name: "showQuestionNumbers", default: "on", choices: ["on", "onPage", "off"] }, { name: "questionTitleLocation", default: "top", choices: ["top", "bottom"] }, { name: "showProgressBar", default: "off", choices: ["off", "top", "bottom"] }, { name: "storeOthersAsComment:boolean", default: true }, "goNextPageAutomatic:boolean", "clearInvisibleValues:boolean", {
-                        name: "pagePrevText",
-                        onGetValue: function onGetValue(obj) {
-                            return obj.pagePrevTextValue;
-                        }
-                    }, {
-                        name: "pageNextText",
-                        onGetValue: function onGetValue(obj) {
-                            return obj.pageNextTextValue;
-                        }
-                    }, {
-                        name: "completeText",
-                        onGetValue: function onGetValue(obj) {
-                            return obj.completeTextValue;
-                        }
-                    }, { name: "requiredText", default: "*" }, "questionStartIndex", "questionTitleTemplate"]);
+                        // {
+                        //     name: "triggers:triggers",
+                        //     baseClassName: "surveytrigger",
+                        //     classNamePart: "trigger"
+                        // },
+                        // "surveyId", "surveyPostId", "cookieName", "sendResultOnPageNext:boolean",
+                        // { name: "showNavigationButtons:boolean", default: true },
+                        // { name: "showTitle:boolean", default: true },
+                        // { name: "showPageTitles:boolean", default: false }, "showPageNumbers:boolean",
+                        // { name: "showQuestionNumbers", default: "on", choices: ["on", "onPage", "off"] },
+                        // { name: "questionTitleLocation", default: "top", choices: ["top", "bottom"] },
+                        // { name: "showProgressBar", default: "off", choices: ["off", "top", "bottom"] },
+                        // { name: "storeOthersAsComment:boolean", default: true },
+                        // "goNextPageAutomatic:boolean",
+                        // "clearInvisibleValues:boolean", 
+                        // {
+                        //     name: "pagePrevText",
+                        //     onGetValue: function onGetValue(obj) {
+                        //         return obj.pagePrevTextValue;
+                        //     }
+                        // }, {
+                        //     name: "pageNextText",
+                        //     onGetValue: function onGetValue(obj) {
+                        //         return obj.pageNextTextValue;
+                        //     }
+                        // },
+                        //  {
+                        //     name: "completeText",
+                        //     onGetValue: function onGetValue(obj) {
+                        //         return obj.completeTextValue;
+                        //     }
+                        // },
+                        // { name: "requiredText", default: "*" }, "questionStartIndex", "questionTitleTemplate"
+                    ]);
                     /* WEBPACK VAR INJECTION */
                 }.call(exports, __webpack_require__(3)))
 
@@ -7070,7 +7146,8 @@
 
                 exports.__esModule = true;
                 var koTemplate = exports.koTemplate = { html: "" };
-                koTemplate.html = '<script type="text/html" id="survey-comment">  <input data-bind="value:$data.question.koComment, visible:$data.visible, css: $root.css.question.comment" /></script><div data-bind="css: $root.css.root">    <div data-bind="visible: (title.length > 0) && showTitle && koState() != \'completed\', css: $root.css.header">        <h3 data-bind="text:title"></h3>    </div>    <!-- ko if: koState() == "running" -->    <div data-bind="css: $root.css.body">        <div data-bind="visible: showProgressBar ==\'top\', template: { name: \'survey-progress\', data: $data }"></div>        <div id="sq_page" data-bind="template: { name: \'survey-page\', data: koCurrentPage }"></div>        <div style="margin-top:10px" data-bind="visible: showProgressBar ==\'bottom\', template: { name: \'survey-progress\', data: $data }"></div>    </div>    <div data-bind="visible: showNavigationButtons && !isDesignMode, css: $root.css.footer">        <input type="button" data-bind="value: pagePrevText, click: prevPage, visible: !koIsFirstPage(), css: $root.cssNavigationPrev" />        <input type="button" data-bind="value: pageNextText, click: nextPage, visible: !koIsLastPage(), css: $root.cssNavigationNext" />        <input type="button" data-bind="value: completeText, click: completeLastPage, visible: koIsLastPage(), css: $root.cssNavigationComplete" />    </div>    <!-- /ko -->    <!-- ko if: koState() == "completed" -->    <div data-bind="html: processedCompletedHtml"></div>    <!-- /ko -->    <!-- ko if: koState() == "loading" -->    <div data-bind="html: processedLoadingHtml"></div>    <!-- /ko -->    <!-- ko if: koState() == "empty" -->    <div data-bind="text:emptySurveyText, css: $root.css.body"></div>    <!-- /ko --></div><script type="text/html" id="survey-page">    <h4 data-bind="visible: (title.length > 0) && data.showPageTitles, text: koNo() + processedTitle, css: $root.css.pageTitle"></h4>    <!-- ko foreach: { data: rows, as: \'row\'} -->    <div data-bind="visible: row.koVisible, css: $root.css.row">        <!-- ko foreach: { data: row.questions, as: \'question\' , afterRender: row.koAfterRender } -->            <!-- ko template: { name: \'survey-question\', data: question } --><!-- /ko -->        <!-- /ko -->    </div>    <!-- /ko --></script><script type="text/html" id="survey-progress">    <div style="width:60%;" data-bind="css: $root.css.progress">        <div data-bind="css: $root.css.progressBar, style:{width: koProgress() + \'%\'}"             role="progressbar" aria-valuemin="0"             aria-valuemax="100">            <span data-bind="text:koProgressText"></span>        </div>    </div></script><script type="text/html" id="survey-question-checkbox">    <form data-bind="css: $root.css.checkbox.root">        <!-- ko foreach: { data: question.koVisibleChoices, as: \'item\', afterRender: question.koAfterRender}  -->        <div data-bind="style:{width: question.koWidth, \'margin-right\': question.colCount == 0 ? \'5px\': \'0px\'}, css: $root.css.checkbox.item">            <label data-bind="css: $root.css.checkbox.item">                <input type="checkbox" data-bind="attr: {name: question.name, value: item.value}, checked: question.koValue" />                <span data-bind="text: item.text"></span>            </label>            <div data-bind="visible: question.hasOther && ($index() == question.koVisibleChoices().length-1)">                <div data-bind="template: { name: \'survey-comment\', data: {\'question\': question, \'visible\': question.koOtherVisible } }, css: $root.css.checkbox.other"></div>            </div>        </div>        <!-- /ko -->    </form></script><script type="text/html" id="survey-question-comment">    <textarea type="text" data-bind="attr: {cols: question.cols, rows: question.rows}, value:question.koValue, css: $root.css.comment" /></script><script type="text/html" id="survey-question-dropdown">    <select data-bind="options: question.koVisibleChoices, optionsText: \'text\', optionsValue: \'value\', value: question.koValue, optionsCaption: question.optionsCaption, css: $root.css.dropdown"></select>    <div data-bind="visible: question.hasOther">        <div data-bind="template: { name: \'survey-comment\', data: {\'question\': question, \'visible\': question.koOtherVisible } }"></div>    </div></script><script type="text/html" id="survey-question-errors">    <div role="alert" data-bind="visible: koErrors().length > 0, foreach: { data: koErrors, as: \'error\'}, css: $root.css.error.root">        <div>            <span aria-hidden="true" data-bind="css: $root.css.error.icon"></span>            <span data-bind="text:error.getText(), css: $root.css.error.item"></span>        </div>    </div></script><script type="text/html" id="survey-question-file">    <input type="file" data-bind="event: {change: dochange}">    <div>        <img data-bind="attr: { src: question.koData, height: question.imageHeight, width: question.imageWidth }, visible: question.koHasValue">    </div></script><script type="text/html" id="survey-question-html">    <div data-bind="html: question.processedHtml"></div></script><script type="text/html" id="survey-question-matrix">    <table data-bind="css: $root.css.matrix.root">        <thead>            <tr>                <th data-bind="visible: question.hasRows"></th>                <!-- ko foreach: question.columns -->                <th data-bind="text:$data.text"></th>                <!-- /ko -->            </tr>        </thead>        <tbody>            <!-- ko foreach: { data: question.visibleRows, as: \'row\' } -->            <tr>                <td data-bind="visible: question.hasRows, text:row.text"></td>                <!-- ko foreach: question.columns -->                <td>                    <input type="radio" data-bind="attr: {name: row.fullName, value: $data.value}, checked: row.koValue"/>                </td>                <!-- /ko -->            </tr>            <!-- /ko -->        </tbody>    </table></script><script type="text/html" id="survey-question-matrixdropdown">    <div data-bind="style: {overflowX: question.horizontalScroll? \'scroll\': \'\'}">        <table data-bind="css: $root.css.matrixdropdown.root">            <thead>                <tr>                    <th></th>                    <!-- ko foreach: question.columns -->                    <th data-bind="text: question.getColumnTitle($data), style: { minWidth: question.getColumnWidth($data) }"></th>                    <!-- /ko -->                </tr>            </thead>            <tbody>                <!-- ko foreach: { data: question.visibleRows, as: \'row\' } -->                <tr>                    <td data-bind="text:row.text"></td>                    <!-- ko foreach: row.cells-->                    <td>                        <!-- ko template: { name: \'survey-question-errors\', data: $data.question } -->                        <!-- /ko -->                        <!-- ko template: { name: \'survey-question-\' + $data.question.getType(), data: $data.question, as: \'question\' } -->                        <!-- /ko -->                    </td>                    <!-- /ko -->                </tr>                <!-- /ko -->            </tbody>        </table>    </div></script><script type="text/html" id="survey-question-matrixdynamic">    <div data-bind="style: {overflowX: question.horizontalScroll? \'scroll\': \'\'}">        <table data-bind="css: $root.css.matrixdynamic.root">            <thead>                <tr>                    <!-- ko foreach: question.columns -->                    <th data-bind="text: question.getColumnTitle($data), style: { minWidth: question.getColumnWidth($data) }"></th>                    <!-- /ko -->                    <th></th>                </tr>            </thead>            <tbody>                <!-- ko foreach: { data: question.koRows, as: \'row\' } -->                <tr>                    <!-- ko foreach: row.cells-->                    <td>                        <!-- ko template: { name: \'survey-question-errors\', data: $data.question } -->                        <!-- /ko -->                        <!-- ko template: { name: \'survey-question-\' + $data.question.getType(), data: $data.question, as: \'question\' } -->                        <!-- /ko -->                    </td>                    <!-- /ko -->                    <td><input type="button" data-bind="click:question.koRemoveRowClick, css: $root.css.matrixdynamic.button, value: question.removeRowText" /></td>                </tr>                <!-- /ko -->            </tbody>        </table>    </div>    <input type="button" data-bind="click:question.koAddRowClick, css: $root.css.matrixdynamic.button, value: question.addRowText" /></script><script type="text/html" id="survey-question-multipletext">    <table data-bind="css: $root.css.multipletext.root, foreach: { data:  question.koRows, as: \'row\' }">        <tr data-bind="foreach: { data: row, as: \'item\' }">            <td data-bind="text: item.title, css: $root.css.multipletext.itemTitle"></td>            <td><input type="text" style="float:left" data-bind="attr: {size: question.itemSize}, value: item.koValue, css: $root.css.multipletext.itemValue" /></td>        </tr>    </table></script><script type="text/html" id="survey-question-radiogroup">    <form data-bind="css: $root.css.radiogroup.root">        <!-- ko foreach: { data: question.koVisibleChoices, as: \'item\', afterRender: question.koAfterRender}  -->        <div  data-bind="style:{width: question.koWidth, \'margin-right\': question.colCount == 0 ? \'5px\': \'0px\'}, css: $root.css.radiogroup.item">            <label data-bind="css: $root.css.radiogroup.item">                <input type="radio" data-bind="attr: {name: question.name, value: item.value}, checked: question.koValue" />                <span data-bind="text: item.text"></span>            </label>            <div data-bind="visible: question.hasOther && ($index() == question.koVisibleChoices().length-1)">                <div data-bind="template: { name: \'survey-comment\', data: {\'question\': question, \'visible\': question.koOtherVisible}}, css: $root.css.radiogroup.other"></div>            </div>        </div>        <!-- /ko -->    </form></script><script type="text/html" id="survey-question-rating">    <div data-bind="css: $root.css.rating.root">        <!-- ko foreach: question.koVisibleRateValues -->        <label data-bind="css: question.koGetCss($data)">            <input type="radio" style="display: none;"                    data-bind="attr: {name: question.name, id: question.name + $index(), value: $data.value}, event: { change: question.koChange}" />            <span data-bind="visible: $index() == 0, text: question.mininumRateDescription"></span>            <span data-bind="text: $data.text"></span>            <span data-bind="visible: $index() == (question.koVisibleRateValues().length-1), text: question.maximumRateDescription"></span>        </label>        <!-- /ko -->    </div>    <div data-bind="visible: question.hasOther">        <div data-bind="template: { name: \'survey-comment\', data: {\'question\': question } }"></div>    </div></script><script type="text/html" id="survey-question-text">    <input data-bind="attr: {type: question.inputType, size: question.size}, value:question.koValue, css: $root.css.text"/></script><script type="text/html" id="survey-question">    <div style="vertical-align:top" data-bind="css: $root.css.question.root, style: {display: question.koVisible() ? \'inline-block\': \'none\', marginLeft: question.koMarginLeft, paddingRight: question.koPaddingRight, width: question.koRenderWidth }, attr: {id: id}">        <!-- ko if: question.hasTitle -->        <h5 data-bind="visible: $root.questionTitleLocation == \'top\', text: question.koTitle(), css: $root.css.question.title"></h5>        <!-- /ko -->        <!-- ko template: { name: \'survey-question-errors\', data: question } -->        <!-- /ko -->        <!-- ko template: { name: \'survey-question-\' + question.getType(), data: question, afterRender: question.koQuestionAfterRender } -->        <!-- /ko -->        <div data-bind="visible: question.hasComment">            <div data-bind="text:question.commentText"></div>            <div data-bind="template: { name: \'survey-comment\', data: {\'question\': question, \'visible\': true } }"></div>        </div>        <!-- ko if: question.hasTitle -->        <h5 data-bind="visible: $root.questionTitleLocation == \'bottom\', text: question.koTitle(), css: $root.css.question.title"></h5>        <!-- /ko -->    </div></script>';
+                koTemplate.html = template;
+                // koTemplate.html = '<script type="text/html" id="survey-comment">  <input data-bind="value:$data.question.koComment, visible:$data.visible, css: $root.css.question.comment" /></script><div data-bind="css: $root.css.root">    <div data-bind="visible: (title.length > 0) && showTitle && koState() != \'completed\', css: $root.css.header">        <h1 data-bind="html:title"></h1>  <h4 data-bind="html:description"></h4>  </div>    <!-- ko if: koState() == "running" -->    <div data-bind="css: $root.css.body">        <div data-bind="visible: showProgressBar ==\'top\', template: { name: \'survey-progress\', data: $data }"></div>        <div id="sq_page" data-bind="template: { name: \'survey-page\', data: koCurrentPage }"></div>        <div style="margin-top:10px" data-bind="visible: showProgressBar ==\'bottom\', template: { name: \'survey-progress\', data: $data }"></div>    </div>    <div data-bind="visible: showNavigationButtons && !isDesignMode, css: $root.css.footer">        <input type="button" data-bind="value: pagePrevText, click: prevPage, visible: !koIsFirstPage(), css: $root.cssNavigationPrev" />        <input type="button" data-bind="value: pageNextText, click: nextPage, visible: !koIsLastPage(), css: $root.cssNavigationNext" />        <input type="button" data-bind="value: completeText, click: completeLastPage, visible: koIsLastPage(), css: $root.cssNavigationComplete" />    </div>    <!-- /ko -->    <!-- ko if: koState() == "completed" -->    <div data-bind="html: processedCompletedHtml"></div>    <!-- /ko -->    <!-- ko if: koState() == "loading" -->    <div data-bind="html: processedLoadingHtml"></div>    <!-- /ko -->    <!-- ko if: koState() == "empty" -->    <div data-bind="text:emptySurveyText, css: $root.css.body"></div>    <!-- /ko --></div><script type="text/html" id="survey-page">    <h4 data-bind="visible: (title.length > 0) && data.showPageTitles, text: koNo() + processedTitle, css: $root.css.pageTitle"></h4>    <!-- ko foreach: { data: rows, as: \'row\'} -->    <div data-bind="visible: row.koVisible, css: $root.css.row">        <!-- ko foreach: { data: row.questions, as: \'question\' , afterRender: row.koAfterRender } -->            <!-- ko template: { name: \'survey-question\', data: question } --><!-- /ko -->        <!-- /ko -->    </div>    <!-- /ko --></script><script type="text/html" id="survey-progress">    <div style="width:60%;" data-bind="css: $root.css.progress">        <div data-bind="css: $root.css.progressBar, style:{width: koProgress() + \'%\'}"             role="progressbar" aria-valuemin="0"             aria-valuemax="100">            <span data-bind="text:koProgressText"></span>        </div>    </div></script><script type="text/html" id="survey-question-checkbox">    <form data-bind="css: $root.css.checkbox.root">        <!-- ko foreach: { data: question.koVisibleChoices, as: \'item\', afterRender: question.koAfterRender}  -->        <div data-bind="style:{width: question.koWidth, \'margin-right\': question.colCount == 0 ? \'5px\': \'0px\'}, css: $root.css.checkbox.item">            <label data-bind="css: $root.css.checkbox.item">                <input type="checkbox" data-bind="attr: {name: question.name, value: item.value}, checked: question.koValue" />                <span data-bind="text: item.text"></span>            </label>            <div data-bind="visible: question.hasOther && ($index() == question.koVisibleChoices().length-1)">                <div data-bind="template: { name: \'survey-comment\', data: {\'question\': question, \'visible\': question.koOtherVisible } }, css: $root.css.checkbox.other"></div>            </div>        </div>        <!-- /ko -->    </form></script><script type="text/html" id="survey-question-comment">    <textarea type="text" data-bind="attr: {cols: question.cols, rows: question.rows}, value:question.koValue, css: $root.css.comment" /></script><script type="text/html" id="survey-question-dropdown">    <select data-bind="options: question.koVisibleChoices, optionsText: \'text\', optionsValue: \'value\', value: question.koValue, optionsCaption: question.optionsCaption, css: $root.css.dropdown"></select>    <div data-bind="visible: question.hasOther">        <div data-bind="template: { name: \'survey-comment\', data: {\'question\': question, \'visible\': question.koOtherVisible } }"></div>    </div></script><script type="text/html" id="survey-question-errors">    <div role="alert" data-bind="visible: koErrors().length > 0, foreach: { data: koErrors, as: \'error\'}, css: $root.css.error.root">        <div>            <span aria-hidden="true" data-bind="css: $root.css.error.icon"></span>            <span data-bind="text:error.getText(), css: $root.css.error.item"></span>        </div>    </div></script><script type="text/html" id="survey-question-file">    <input type="file" data-bind="event: {change: dochange}">    <div>        <img data-bind="attr: { src: question.koData, height: question.imageHeight, width: question.imageWidth }, visible: question.koHasValue">    </div></script><script type="text/html" id="survey-question-html">    <div data-bind="html: question.processedHtml"></div></script><script type="text/html" id="survey-question-matrix">    <table data-bind="css: $root.css.matrix.root">        <thead>            <tr>                <th data-bind="visible: question.hasRows"></th>                <!-- ko foreach: question.columns -->                <th data-bind="text:$data.text"></th>                <!-- /ko -->            </tr>        </thead>        <tbody>            <!-- ko foreach: { data: question.visibleRows, as: \'row\' } -->            <tr>                <td data-bind="visible: question.hasRows, text:row.text"></td>                <!-- ko foreach: question.columns -->                <td>                    <input type="radio" data-bind="attr: {name: row.fullName, value: $data.value}, checked: row.koValue"/>                </td>                <!-- /ko -->            </tr>            <!-- /ko -->        </tbody>    </table></script><script type="text/html" id="survey-question-matrixdropdown">    <div data-bind="style: {overflowX: question.horizontalScroll? \'scroll\': \'\'}">        <table data-bind="css: $root.css.matrixdropdown.root">            <thead>                <tr>                    <th></th>                    <!-- ko foreach: question.columns -->                    <th data-bind="text: question.getColumnTitle($data), style: { minWidth: question.getColumnWidth($data) }"></th>                    <!-- /ko -->                </tr>            </thead>            <tbody>                <!-- ko foreach: { data: question.visibleRows, as: \'row\' } -->                <tr>                    <td data-bind="text:row.text"></td>                    <!-- ko foreach: row.cells-->                    <td>                        <!-- ko template: { name: \'survey-question-errors\', data: $data.question } -->                        <!-- /ko -->                        <!-- ko template: { name: \'survey-question-\' + $data.question.getType(), data: $data.question, as: \'question\' } -->                        <!-- /ko -->                    </td>                    <!-- /ko -->                </tr>                <!-- /ko -->            </tbody>        </table>    </div></script><script type="text/html" id="survey-question-matrixdynamic">    <div data-bind="style: {overflowX: question.horizontalScroll? \'scroll\': \'\'}">        <table data-bind="css: $root.css.matrixdynamic.root">            <thead>                <tr>                    <!-- ko foreach: question.columns -->                    <th data-bind="text: question.getColumnTitle($data), style: { minWidth: question.getColumnWidth($data) }"></th>                    <!-- /ko -->                    <th></th>                </tr>            </thead>            <tbody>                <!-- ko foreach: { data: question.koRows, as: \'row\' } -->                <tr>                    <!-- ko foreach: row.cells-->                    <td>                        <!-- ko template: { name: \'survey-question-errors\', data: $data.question } -->                        <!-- /ko -->                        <!-- ko template: { name: \'survey-question-\' + $data.question.getType(), data: $data.question, as: \'question\' } -->                        <!-- /ko -->                    </td>                    <!-- /ko -->                    <td><input type="button" data-bind="click:question.koRemoveRowClick, css: $root.css.matrixdynamic.button, value: question.removeRowText" /></td>                </tr>                <!-- /ko -->            </tbody>        </table>    </div>    <input type="button" data-bind="click:question.koAddRowClick, css: $root.css.matrixdynamic.button, value: question.addRowText" /></script><script type="text/html" id="survey-question-multipletext">    <table data-bind="css: $root.css.multipletext.root, foreach: { data:  question.koRows, as: \'row\' }">        <tr data-bind="foreach: { data: row, as: \'item\' }">            <td data-bind="text: item.title, css: $root.css.multipletext.itemTitle"></td>            <td><input type="text" style="float:left" data-bind="attr: {size: question.itemSize}, value: item.koValue, css: $root.css.multipletext.itemValue" /></td>        </tr>    </table></script><script type="text/html" id="survey-question-radiogroup">    <form data-bind="css: $root.css.radiogroup.root">        <!-- ko foreach: { data: question.koVisibleChoices, as: \'item\', afterRender: question.koAfterRender}  -->        <div  data-bind="style:{width: question.koWidth, \'margin-right\': question.colCount == 0 ? \'5px\': \'0px\'}, css: $root.css.radiogroup.item">            <label data-bind="css: $root.css.radiogroup.item">                <input type="radio" data-bind="attr: {name: question.name, value: item.value}, checked: question.koValue" />                <span data-bind="text: item.text"></span>            </label>            <div data-bind="visible: question.hasOther && ($index() == question.koVisibleChoices().length-1)">                <div data-bind="template: { name: \'survey-comment\', data: {\'question\': question, \'visible\': question.koOtherVisible}}, css: $root.css.radiogroup.other"></div>            </div>        </div>        <!-- /ko -->    </form></script><script type="text/html" id="survey-question-rating">    <div data-bind="css: $root.css.rating.root">        <!-- ko foreach: question.koVisibleRateValues -->        <label data-bind="css: question.koGetCss($data)">            <input type="radio" style="display: none;"                    data-bind="attr: {name: question.name, id: question.name + $index(), value: $data.value}, event: { change: question.koChange}" />            <span data-bind="visible: $index() == 0, text: question.mininumRateDescription"></span>            <span data-bind="text: $data.text"></span>            <span data-bind="visible: $index() == (question.koVisibleRateValues().length-1), text: question.maximumRateDescription"></span>        </label>        <!-- /ko -->    </div>    <div data-bind="visible: question.hasOther">        <div data-bind="template: { name: \'survey-comment\', data: {\'question\': question } }"></div>    </div></script><script type="text/html" id="survey-question-text">    <input data-bind="attr: {type: question.inputType, size: question.size}, value:question.koValue, css: $root.css.text"/></script><script type="text/html" id="survey-question">    <div style="vertical-align:top" data-bind="css: $root.css.question.root, style: {display: question.koVisible() ? \'inline-block\': \'none\', marginLeft: question.koMarginLeft, paddingRight: question.koPaddingRight, width: question.koRenderWidth }, attr: {id: id}">        <!-- ko if: question.hasTitle -->        <h5 data-bind="visible: $root.questionTitleLocation == \'top\', text: question.koTitle(), css: $root.css.question.title"></h5>        <!-- /ko -->        <!-- ko template: { name: \'survey-question-errors\', data: question } -->        <!-- /ko -->        <!-- ko template: { name: \'survey-question-\' + question.getType(), data: question, afterRender: question.koQuestionAfterRender } -->        <!-- /ko -->        <div data-bind="visible: question.hasComment">            <div data-bind="text:question.commentText"></div>            <div data-bind="template: { name: \'survey-comment\', data: {\'question\': question, \'visible\': true } }"></div>        </div>        <!-- ko if: question.hasTitle -->        <h5 data-bind="visible: $root.questionTitleLocation == \'bottom\', text: question.koTitle(), css: $root.css.question.title"></h5>        <!-- /ko -->    </div></script>';
 
                 /***/
             },
diff --git a/editable/surveyeditor.js b/editable/surveyeditor.js
index 8ef54a9..7f2e1b0 100644
--- a/editable/surveyeditor.js
+++ b/editable/surveyeditor.js
@@ -14,4593 +14,4611 @@
     else
         root["SurveyEditor"] = factory(root["Survey"]);
 })(this, function(__WEBPACK_EXTERNAL_MODULE_2__) {
-    return /******/ (function(modules) { // webpackBootstrap
-            /******/ // The module cache
-            /******/
-            var installedModules = {};
-            /******/
-            /******/ // The require function
-            /******/
-            function __webpack_require__(moduleId) {
-                /******/
-                /******/ // Check if module is in cache
+        return /******/ (function(modules) { // webpackBootstrap
+                /******/ // The module cache
                 /******/
-                if (installedModules[moduleId])
+                var installedModules = {};
                 /******/
-                    return installedModules[moduleId].exports;
+                /******/ // The require function
                 /******/
-                /******/ // Create a new module (and put it into the cache)
-                /******/
-                var module = installedModules[moduleId] = {
+                function __webpack_require__(moduleId) {
+                    /******/
+                    /******/ // Check if module is in cache
                     /******/
-                    exports: {},
+                    if (installedModules[moduleId])
                     /******/
-                    id: moduleId,
+                        return installedModules[moduleId].exports;
                     /******/
-                    loaded: false
+                    /******/ // Create a new module (and put it into the cache)
+                    /******/
+                    var module = installedModules[moduleId] = {
+                        /******/
+                        exports: {},
                         /******/
-                };
+                        id: moduleId,
+                        /******/
+                        loaded: false
+                            /******/
+                    };
+                    /******/
+                    /******/ // Execute the module function
+                    /******/
+                    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
+                    /******/
+                    /******/ // Flag the module as loaded
+                    /******/
+                    module.loaded = true;
+                    /******/
+                    /******/ // Return the exports of the module
+                    /******/
+                    return module.exports;
+                    /******/
+                }
                 /******/
-                /******/ // Execute the module function
                 /******/
-                modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
+                /******/ // expose the modules object (__webpack_modules__)
                 /******/
-                /******/ // Flag the module as loaded
+                __webpack_require__.m = modules;
                 /******/
-                module.loaded = true;
+                /******/ // expose the module cache
                 /******/
-                /******/ // Return the exports of the module
+                __webpack_require__.c = installedModules;
                 /******/
-                return module.exports;
+                /******/ // __webpack_public_path__
                 /******/
-            }
-            /******/
-            /******/
-            /******/ // expose the modules object (__webpack_modules__)
-            /******/
-            __webpack_require__.m = modules;
-            /******/
-            /******/ // expose the module cache
-            /******/
-            __webpack_require__.c = installedModules;
-            /******/
-            /******/ // __webpack_public_path__
-            /******/
-            __webpack_require__.p = "";
-            /******/
-            /******/ // Load entry module and return exports
-            /******/
-            return __webpack_require__(0);
+                __webpack_require__.p = "";
+                /******/
+                /******/ // Load entry module and return exports
+                /******/
+                return __webpack_require__(0);
+                /******/
+            })
+            /************************************************************************/
             /******/
-        })
-        /************************************************************************/
-        /******/
-        ([
-            /* 0 */
-            /***/
-            function(module, exports, __webpack_require__) {
-
-                "use strict";
-
-                exports.__esModule = true;
-
-                var _dragdrophelper = __webpack_require__(1);
-
-                Object.defineProperty(exports, "DragDropHelper", {
-                    enumerable: true,
-                    get: function get() {
-                        return _dragdrophelper.DragDropHelper;
-                    }
-                });
-
-                var _propertyEditorBase = __webpack_require__(3);
-
-                Object.defineProperty(exports, "SurveyPropertyEditorBase", {
-                    enumerable: true,
-                    get: function get() {
-                        return _propertyEditorBase.SurveyPropertyEditorBase;
-                    }
-                });
-                Object.defineProperty(exports, "SurveyStringPropertyEditor", {
-                    enumerable: true,
-                    get: function get() {
-                        return _propertyEditorBase.SurveyStringPropertyEditor;
-                    }
-                });
-                Object.defineProperty(exports, "SurveyDropdownPropertyEditor", {
-                    enumerable: true,
-                    get: function get() {
-                        return _propertyEditorBase.SurveyDropdownPropertyEditor;
-                    }
-                });
-                Object.defineProperty(exports, "SurveyBooleanPropertyEditor", {
-                    enumerable: true,
-                    get: function get() {
-                        return _propertyEditorBase.SurveyBooleanPropertyEditor;
-                    }
-                });
-                Object.defineProperty(exports, "SurveyNumberPropertyEditor", {
-                    enumerable: true,
-                    get: function get() {
-                        return _propertyEditorBase.SurveyNumberPropertyEditor;
-                    }
-                });
-
-                var _propertyTextItemsEditor = __webpack_require__(4);
-
-                Object.defineProperty(exports, "SurveyPropertyTextItemsEditor", {
-                    enumerable: true,
-                    get: function get() {
-                        return _propertyTextItemsEditor.SurveyPropertyTextItemsEditor;
-                    }
-                });
-
-                var _propertyItemsEditor = __webpack_require__(5);
-
-                Object.defineProperty(exports, "SurveyPropertyItemsEditor", {
-                    enumerable: true,
-                    get: function get() {
-                        return _propertyItemsEditor.SurveyPropertyItemsEditor;
-                    }
-                });
-
-                var _propertyItemValuesEditor = __webpack_require__(12);
-
-                Object.defineProperty(exports, "SurveyPropertyItemValuesEditor", {
-                    enumerable: true,
-                    get: function get() {
-                        return _propertyItemValuesEditor.SurveyPropertyItemValuesEditor;
-                    }
-                });
-
-                var _propertyMatrixDropdownColumnsEditor = __webpack_require__(13);
-
-                Object.defineProperty(exports, "SurveyPropertyDropdownColumnsEditor", {
-                    enumerable: true,
-                    get: function get() {
-                        return _propertyMatrixDropdownColumnsEditor.SurveyPropertyDropdownColumnsEditor;
-                    }
-                });
-                Object.defineProperty(exports, "SurveyPropertyMatrixDropdownColumnsItem", {
-                    enumerable: true,
-                    get: function get() {
-                        return _propertyMatrixDropdownColumnsEditor.SurveyPropertyMatrixDropdownColumnsItem;
-                    }
-                });
-
-                var _propertyModalEditor = __webpack_require__(6);
-
-                Object.defineProperty(exports, "SurveyPropertyModalEditor", {
-                    enumerable: true,
-                    get: function get() {
-                        return _propertyModalEditor.SurveyPropertyModalEditor;
-                    }
-                });
-
-                var _propertyRestfullEditor = __webpack_require__(14);
-
-                Object.defineProperty(exports, "SurveyPropertyResultfullEditor", {
-                    enumerable: true,
-                    get: function get() {
-                        return _propertyRestfullEditor.SurveyPropertyResultfullEditor;
-                    }
-                });
-
-                var _propertyTriggersEditor = __webpack_require__(15);
-
-                Object.defineProperty(exports, "SurveyPropertyTriggersEditor", {
-                    enumerable: true,
-                    get: function get() {
-                        return _propertyTriggersEditor.SurveyPropertyTriggersEditor;
-                    }
-                });
-
-                var _propertyValidatorsEditor = __webpack_require__(9);
-
-                Object.defineProperty(exports, "SurveyPropertyValidatorsEditor", {
-                    enumerable: true,
-                    get: function get() {
-                        return _propertyValidatorsEditor.SurveyPropertyValidatorsEditor;
-                    }
-                });
-
-                var _objectProperty = __webpack_require__(11);
-
-                Object.defineProperty(exports, "SurveyObjectProperty", {
-                    enumerable: true,
-                    get: function get() {
-                        return _objectProperty.SurveyObjectProperty;
-                    }
-                });
-
-                var _objectEditor = __webpack_require__(10);
-
-                Object.defineProperty(exports, "SurveyObjectEditor", {
-                    enumerable: true,
-                    get: function get() {
-                        return _objectEditor.SurveyObjectEditor;
-                    }
-                });
-
-                var _pagesEditor = __webpack_require__(16);
-
-                Object.defineProperty(exports, "SurveyPagesEditor", {
-                    enumerable: true,
-                    get: function get() {
-                        return _pagesEditor.SurveyPagesEditor;
-                    }
-                });
-
-                var _textWorker = __webpack_require__(17);
-
-                Object.defineProperty(exports, "SurveyTextWorker", {
-                    enumerable: true,
-                    get: function get() {
-                        return _textWorker.SurveyTextWorker;
-                    }
-                });
-
-                var _surveyHelper = __webpack_require__(8);
-
-                Object.defineProperty(exports, "ObjType", {
-                    enumerable: true,
-                    get: function get() {
-                        return _surveyHelper.ObjType;
-                    }
-                });
-                Object.defineProperty(exports, "SurveyHelper", {
-                    enumerable: true,
-                    get: function get() {
-                        return _surveyHelper.SurveyHelper;
-                    }
-                });
-
-                var _surveyEmbedingWindow = __webpack_require__(19);
-
-                Object.defineProperty(exports, "SurveyEmbedingWindow", {
-                    enumerable: true,
-                    get: function get() {
-                        return _surveyEmbedingWindow.SurveyEmbedingWindow;
-                    }
-                });
-
-                var _objectVerbs = __webpack_require__(20);
-
-                Object.defineProperty(exports, "SurveyVerbs", {
-                    enumerable: true,
-                    get: function get() {
-                        return _objectVerbs.SurveyVerbs;
-                    }
-                });
-                Object.defineProperty(exports, "SurveyVerbItem", {
-                    enumerable: true,
-                    get: function get() {
-                        return _objectVerbs.SurveyVerbItem;
-                    }
-                });
-                Object.defineProperty(exports, "SurveyVerbChangeTypeItem", {
-                    enumerable: true,
-                    get: function get() {
-                        return _objectVerbs.SurveyVerbChangeTypeItem;
-                    }
-                });
-                Object.defineProperty(exports, "SurveyVerbChangePageItem", {
-                    enumerable: true,
-                    get: function get() {
-                        return _objectVerbs.SurveyVerbChangePageItem;
-                    }
-                });
-
-                var _undoredo = __webpack_require__(21);
-
-                Object.defineProperty(exports, "SurveyUndoRedo", {
-                    enumerable: true,
-                    get: function get() {
-                        return _undoredo.SurveyUndoRedo;
-                    }
-                });
-                Object.defineProperty(exports, "UndoRedoItem", {
-                    enumerable: true,
-                    get: function get() {
-                        return _undoredo.UndoRedoItem;
-                    }
-                });
-
-                var _editor = __webpack_require__(22);
-
-                Object.defineProperty(exports, "SurveyEditor", {
-                    enumerable: true,
-                    get: function get() {
-                        return _editor.SurveyEditor;
-                    }
-                });
-
-                /***/
-            },
-            /* 1 */
-            /***/
-            function(module, exports, __webpack_require__) {
-
-                "use strict";
-
-                exports.__esModule = true;
-                exports.DragDropHelper = undefined;
-
-                var _surveyKnockout = __webpack_require__(2);
-
-                var Survey = _interopRequireWildcard(_surveyKnockout);
-
-                function _interopRequireWildcard(obj) {
-                    if (obj && obj.__esModule) { return obj; } else {
-                        var newObj = {};
-                        if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } }
-                        newObj.default = obj;
-                        return newObj;
-                    }
-                }
+            ([
+                    /* 0 */
+                    /***/
+                    function(module, exports, __webpack_require__) {
 
-                var DragDropHelper = exports.DragDropHelper = function() {
-                    function DragDropHelper(data, onModifiedCallback, scrollableElName) {
-                        if (scrollableElName === void 0) {
-                            scrollableElName = null;
-                        }
-                        this.data = data;
-                        this.scrollableElement = null;
-                        this.sourceIndex = -1;
-                        this.isScrollStop = true;
-                        this.onModifiedCallback = onModifiedCallback;
-                        this.scrollableElement = document.getElementById(scrollableElName ? scrollableElName : "scrollableDiv");
-                    }
-                    Object.defineProperty(DragDropHelper.prototype, "survey", {
-                        get: function get() {
-                            return this.data;
-                        },
-                        enumerable: true,
-                        configurable: true
-                    });
-                    DragDropHelper.prototype.startDragNewQuestion = function(event, questionType, questionName) {
-                        this.prepareData(event, questionType, questionName);
-                    };
-                    DragDropHelper.prototype.startDragQuestion = function(event, questionName) {
-                        this.prepareData(event, null, questionName);
-                    };
-                    DragDropHelper.prototype.startDragCopiedQuestion = function(event, questionName, questionJson) {
-                        this.prepareData(event, null, questionName, questionJson);
-                    };
-                    DragDropHelper.prototype.isSurveyDragging = function(event) {
-                        if (!event) return false;
-                        var data = this.getData(event).text;
-                        return data && data.indexOf(DragDropHelper.dataStart) == 0;
-                    };
-                    DragDropHelper.prototype.doDragDropOver = function(event, question) {
-                        event = this.getEvent(event);
-                        this.checkScrollY(event);
-                        var targetQuestion = DragDropHelper.dragData.targetQuestion;
-                        if (!question || question == targetQuestion || !this.isSurveyDragging(event) || this.isSamePlace(event, question)) return;
-                        var index = this.getQuestionIndex(event, question);
-                        if (this.sourceIndex > -1) {
-                            if (this.sourceIndex == index || this.sourceIndex + 1 == index) index = -1;
-                        }
-                        this.survey.currentPage["koDragging"](index);
-                    };
-                    DragDropHelper.prototype.end = function() {
-                        this.isScrollStop = true;
-                        this.setIsDraggingSource(this.survey["koDraggingSource"](), false);
-                        this.survey["koDraggingSource"](null);
-                        this.survey.currentPage["koDragging"](-1);
-                        this.sourceIndex = -1;
-                        this.clearData();
-                    };
-                    DragDropHelper.prototype.doDrop = function(event, question) {
-                        if (question === void 0) {
-                            question = null;
-                        }
-                        if (event.stopPropagation) {
-                            event.stopPropagation();
-                        }
-                        if (this.isSurveyDragging(event)) {
-                            var index = this.survey.currentPage["koDragging"]();
-                            var targetQuestion = DragDropHelper.dragData.targetQuestion;
-                            if (targetQuestion && index > -1) {
-                                var oldIndex = this.survey.currentPage.questions.indexOf(targetQuestion);
-                                if (oldIndex > -1 && oldIndex < index) {
-                                    index--;
-                                }
-                                this.moveQuestionTo(targetQuestion, index);
+                        "use strict";
+
+                        exports.__esModule = true;
+
+                        var _dragdrophelper = __webpack_require__(1);
+
+                        Object.defineProperty(exports, "DragDropHelper", {
+                            enumerable: true,
+                            get: function get() {
+                                return _dragdrophelper.DragDropHelper;
                             }
-                        }
-                        this.end();
-                    };
-                    DragDropHelper.prototype.doLeavePage = function(event) {
-                        event = this.getEvent(event);
-                        if (!this.scrollableElement) return;
-                        if (event.clientX <= 0 || event.clientY <= 0 || event.clientX >= this.scrollableElement.offsetWidth || event.clientY >= this.scrollableElement.offsetHeight) {
-                            this.survey.currentPage["koDragging"](-1);
-                        }
-                    };
-                    DragDropHelper.prototype.createTargetQuestion = function(questionType, questionName, json) {
-                        if (!questionName) return null;
-                        var targetQuestion = this.survey.getQuestionByName(questionName);
-                        this.sourceIndex = -1;
-                        if (targetQuestion) {
-                            this.sourceIndex = this.survey.currentPage.questions.indexOf(targetQuestion);
-                        }
-                        if (!targetQuestion) {
-                            if (json) {
-                                targetQuestion = Survey.QuestionFactory.Instance.createQuestion(json["type"], name);
-                                new Survey.JsonObject().toObject(json, targetQuestion);
-                                targetQuestion.name = questionName;
+                        });
+
+                        var _propertyEditorBase = __webpack_require__(3);
+
+                        Object.defineProperty(exports, "SurveyPropertyEditorBase", {
+                            enumerable: true,
+                            get: function get() {
+                                return _propertyEditorBase.SurveyPropertyEditorBase;
                             }
-                            if (!targetQuestion && questionType) {
-                                targetQuestion = Survey.QuestionFactory.Instance.createQuestion(questionType, questionName);
+                        });
+                        Object.defineProperty(exports, "SurveyStringPropertyEditor", {
+                            enumerable: true,
+                            get: function get() {
+                                return _propertyEditorBase.SurveyStringPropertyEditor;
                             }
-                            targetQuestion.setData(this.survey);
-                            targetQuestion.renderWidth = "100%";
-                        }
-                        this.setIsDraggingSource(targetQuestion, true);
-                        return targetQuestion;
-                    };
-                    DragDropHelper.prototype.setIsDraggingSource = function(question, val) {
-                        if (question && question["koIsDraggingSource"]) question["koIsDraggingSource"](val);
-                    };
-                    DragDropHelper.prototype.getQuestionIndex = function(event, question) {
-                        var page = this.survey.currentPage;
-                        if (!question) return page.questions.length;
-                        var index = page.questions.indexOf(question);
-                        event = this.getEvent(event);
-                        var height = event.currentTarget["clientHeight"];
-                        var y = event.offsetY;
-                        if (event.hasOwnProperty('layerX')) {
-                            y = event.layerY - event.currentTarget["offsetTop"];
-                        }
-                        if (y > height / 2) index++;
-                        return index;
-                    };
-                    DragDropHelper.prototype.isSamePlace = function(event, question) {
-                        var prev = DragDropHelper.prevEvent;
-                        if (prev.question != question || Math.abs(event.clientX - prev.x) > 5 || Math.abs(event.clientY - prev.y) > 5) {
-                            prev.question = question;
-                            prev.x = event.clientX;
-                            prev.y = event.clientY;
-                            return false;
-                        }
-                        return true;
-                    };
-                    DragDropHelper.prototype.checkScrollY = function(e) {
-                        if (!this.scrollableElement) return;
-                        var y = this.getScrollableElementPosY(e);
-                        if (y < 0) return;
-                        this.isScrollStop = true;
-                        var height = this.scrollableElement["clientHeight"];
-                        if (y < DragDropHelper.ScrollOffset && y >= 0) {
-                            this.isScrollStop = false;
-                            this.doScrollY(-1);
-                        }
-                        if (height - y < DragDropHelper.ScrollOffset && height >= y) {
-                            this.isScrollStop = false;
-                            this.doScrollY(1);
-                        }
-                    };
-                    DragDropHelper.prototype.doScrollY = function(step) {
-                        var el = this.scrollableElement;
-                        var scrollY = el.scrollTop + step;
-                        if (scrollY < 0) {
-                            this.isScrollStop = true;
-                            return;
-                        }
-                        el.scrollTop = scrollY;
-                        var self = this;
-                        if (!this.isScrollStop) {
-                            setTimeout(function() {
-                                self.doScrollY(step);
-                            }, DragDropHelper.ScrollDelay);
-                        }
-                    };
-                    DragDropHelper.prototype.getScrollableElementPosY = function(e) {
-                        if (!this.scrollableElement || !e.currentTarget) return -1;
-                        return e.offsetY + e.currentTarget["offsetTop"] - this.scrollableElement.offsetTop - this.scrollableElement.scrollTop;
-                    };
-                    DragDropHelper.prototype.getEvent = function(event) {
-                        return event["originalEvent"] ? event["originalEvent"] : event;
-                    };
-                    DragDropHelper.prototype.moveQuestionTo = function(targetQuestion, index) {
-                        if (targetQuestion == null) return;
-                        var page = this.survey.getPageByQuestion(targetQuestion);
-                        if (page == this.survey.currentPage && index == page.questions.indexOf(targetQuestion)) return;
-                        if (page) {
-                            page.removeQuestion(targetQuestion);
-                        }
-                        this.survey.currentPage.addQuestion(targetQuestion, index);
-                        if (this.onModifiedCallback) this.onModifiedCallback();
-                    };
-                    DragDropHelper.prototype.getDataInfo = function(event) {
-                        var data = this.getData(event);
-                        if (!data) return null;
-                        var text = data.text.substr(DragDropHelper.dataStart.length);
-                        var array = text.split(',');
-                        var result = { json: null };
-                        for (var i = 0; i < array.length; i++) {
-                            var item = array[i].split(':');
-                            result[item[0]] = item[1];
-                        }
-                        result.json = data.json;
-                        return result;
-                    };
-                    DragDropHelper.prototype.getY = function(element) {
-                        var result = 0;
-                        while (element) {
-                            result += element.offsetTop - element.scrollTop + element.clientTop;
-                            element = element.offsetParent;
-                        }
-                        return result;
-                    };
-                    DragDropHelper.prototype.prepareData = function(event, questionType, questionName, json) {
-                        if (json === void 0) {
-                            json = null;
-                        }
-                        var str = DragDropHelper.dataStart;
-                        if (questionType) str += "questiontype:" + questionType + ',';
-                        str += "questionname:" + questionName;
-                        this.setData(event, str, json);
-                        var targetQuestion = this.createTargetQuestion(questionType, questionName, json);
-                        DragDropHelper.dragData.targetQuestion = targetQuestion;
-                        this.survey["koDraggingSource"](targetQuestion);
-                    };
-                    DragDropHelper.prototype.setData = function(event, text, json) {
-                        if (json === void 0) {
-                            json = null;
-                        }
-                        if (event["originalEvent"]) {
-                            event = event["originalEvent"];
-                        }
-                        if (event.dataTransfer) {
-                            event.dataTransfer.setData("Text", text);
-                            event.dataTransfer.effectAllowed = "copy";
-                        }
-                        DragDropHelper.dragData = { text: text, json: json };
-                    };
-                    DragDropHelper.prototype.getData = function(event) {
-                        if (event["originalEvent"]) {
-                            event = event["originalEvent"];
-                        }
-                        if (event.dataTransfer) {
-                            var text = event.dataTransfer.getData("Text");
-                            if (text) {
-                                DragDropHelper.dragData.text = text;
+                        });
+                        Object.defineProperty(exports, "SurveyDropdownPropertyEditor", {
+                            enumerable: true,
+                            get: function get() {
+                                return _propertyEditorBase.SurveyDropdownPropertyEditor;
                             }
-                        }
-                        return DragDropHelper.dragData;
-                    };
-                    DragDropHelper.prototype.clearData = function() {
-                        DragDropHelper.dragData = { text: "", json: null, targetQuestion: null };
-                        var prev = DragDropHelper.prevEvent;
-                        prev.question = null;
-                        prev.x = -1;
-                        prev.y = -1;
-                    };
-                    DragDropHelper.dataStart = "surveyjs,";
-                    DragDropHelper.dragData = { text: "", json: null };
-                    DragDropHelper.prevEvent = { question: null, x: -1, y: -1 };
-                    DragDropHelper.ScrollDelay = 30;
-                    DragDropHelper.ScrollOffset = 100;
-                    return DragDropHelper;
-                }();
-
-                /***/
-            },
-            /* 2 */
-            /***/
-            function(module, exports) {
-
-                module.exports = __WEBPACK_EXTERNAL_MODULE_2__;
-
-                /***/
-            },
-            /* 3 */
-            /***/
-            function(module, exports) {
-
-                "use strict";
-
-                exports.__esModule = true;
-                var __extends = undefined && undefined.__extends || function(d, b) {
-                    for (var p in b) {
-                        if (b.hasOwnProperty(p)) d[p] = b[p];
-                    }
-
-                    function __() {
-                        this.constructor = d;
-                    }
-                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
-                };
-                var SurveyPropertyEditorBase = exports.SurveyPropertyEditorBase = function() {
-                    function SurveyPropertyEditorBase() {
-                        this.value_ = null;
-                        this.options = null;
-                    }
-                    SurveyPropertyEditorBase.registerEditor = function(name, creator) {
-                        SurveyPropertyEditorBase.editorRegisteredList[name] = creator;
-                    };
-                    SurveyPropertyEditorBase.createEditor = function(editorType, func) {
-                        var creator = SurveyPropertyEditorBase.editorRegisteredList[editorType];
-                        if (!creator) creator = SurveyPropertyEditorBase.editorRegisteredList[SurveyPropertyEditorBase.defaultEditor];
-                        var propertyEditor = creator();
-                        propertyEditor.onChanged = func;
-                        return propertyEditor;
-                    };
-                    Object.defineProperty(SurveyPropertyEditorBase.prototype, "editorType", {
-                        get: function get() {
-                            throw "editorType is not defined";
-                        },
-                        enumerable: true,
-                        configurable: true
-                    });
-                    SurveyPropertyEditorBase.prototype.getValueText = function(value) {
-                        return value;
-                    };
-                    Object.defineProperty(SurveyPropertyEditorBase.prototype, "value", {
-                        get: function get() {
-                            return this.value_;
-                        },
-                        set: function set(value) {
-                            value = this.getCorrectedValue(value);
-                            this.setValueCore(value);
-                            this.onValueChanged();
-                        },
-                        enumerable: true,
-                        configurable: true
-                    });
-                    SurveyPropertyEditorBase.prototype.setValueCore = function(value) {
-                        this.value_ = value;
-                    };
-                    SurveyPropertyEditorBase.prototype.setTitle = function(value) {};
-                    SurveyPropertyEditorBase.prototype.setObject = function(value) {};
-                    SurveyPropertyEditorBase.prototype.onValueChanged = function() {};
-                    SurveyPropertyEditorBase.prototype.getCorrectedValue = function(value) {
-                        return value;
-                    };
-                    SurveyPropertyEditorBase.defaultEditor = "string";
-                    SurveyPropertyEditorBase.editorRegisteredList = {};
-                    return SurveyPropertyEditorBase;
-                }();
-                var SurveyStringPropertyEditor = exports.SurveyStringPropertyEditor = function(_super) {
-                    __extends(SurveyStringPropertyEditor, _super);
-
-                    function SurveyStringPropertyEditor() {
-                        _super.call(this);
-                    }
-                    Object.defineProperty(SurveyStringPropertyEditor.prototype, "editorType", {
-                        get: function get() {
-                            return "string";
-                        },
-                        enumerable: true,
-                        configurable: true
-                    });
-                    return SurveyStringPropertyEditor;
-                }(SurveyPropertyEditorBase);
-                var SurveyDropdownPropertyEditor = exports.SurveyDropdownPropertyEditor = function(_super) {
-                    __extends(SurveyDropdownPropertyEditor, _super);
-
-                    function SurveyDropdownPropertyEditor() {
-                        _super.call(this);
-                    }
-                    Object.defineProperty(SurveyDropdownPropertyEditor.prototype, "editorType", {
-                        get: function get() {
-                            return "dropdown";
-                        },
-                        enumerable: true,
-                        configurable: true
-                    });
-                    return SurveyDropdownPropertyEditor;
-                }(SurveyPropertyEditorBase);
-                var SurveyBooleanPropertyEditor = exports.SurveyBooleanPropertyEditor = function(_super) {
-                    __extends(SurveyBooleanPropertyEditor, _super);
-
-                    function SurveyBooleanPropertyEditor() {
-                        _super.call(this);
-                    }
-                    Object.defineProperty(SurveyBooleanPropertyEditor.prototype, "editorType", {
-                        get: function get() {
-                            return "boolean";
-                        },
-                        enumerable: true,
-                        configurable: true
-                    });
-                    return SurveyBooleanPropertyEditor;
-                }(SurveyPropertyEditorBase);
-                var SurveyNumberPropertyEditor = exports.SurveyNumberPropertyEditor = function(_super) {
-                    __extends(SurveyNumberPropertyEditor, _super);
-
-                    function SurveyNumberPropertyEditor() {
-                        _super.call(this);
-                    }
-                    Object.defineProperty(SurveyNumberPropertyEditor.prototype, "editorType", {
-                        get: function get() {
-                            return "number";
-                        },
-                        enumerable: true,
-                        configurable: true
-                    });
-                    return SurveyNumberPropertyEditor;
-                }(SurveyPropertyEditorBase);
-                SurveyPropertyEditorBase.registerEditor("string", function() {
-                    return new SurveyStringPropertyEditor();
-                });
-                SurveyPropertyEditorBase.registerEditor("dropdown", function() {
-                    return new SurveyDropdownPropertyEditor();
-                });
-                SurveyPropertyEditorBase.registerEditor("boolean", function() {
-                    return new SurveyBooleanPropertyEditor();
-                });
-                SurveyPropertyEditorBase.registerEditor("number", function() {
-                    return new SurveyNumberPropertyEditor();
-                });
-
-                /***/
-            },
-            /* 4 */
-            /***/
-            function(module, exports, __webpack_require__) {
-
-                "use strict";
-
-                exports.__esModule = true;
-                exports.SurveyPropertyTextItemsEditor = undefined;
-
-                var _propertyItemsEditor = __webpack_require__(5);
-
-                var _propertyEditorBase = __webpack_require__(3);
-
-                var _surveyHelper = __webpack_require__(8);
-
-                var _editorLocalization = __webpack_require__(7);
-
-                var _propertyValidatorsEditor = __webpack_require__(9);
-
-                var _surveyKnockout = __webpack_require__(2);
-
-                var Survey = _interopRequireWildcard(_surveyKnockout);
-
-                function _interopRequireWildcard(obj) {
-                    if (obj && obj.__esModule) { return obj; } else {
-                        var newObj = {};
-                        if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } }
-                        newObj.default = obj;
-                        return newObj;
-                    }
-                }
-
-                var __extends = undefined && undefined.__extends || function(d, b) {
-                    for (var p in b) {
-                        if (b.hasOwnProperty(p)) d[p] = b[p];
-                    }
-
-                    function __() {
-                        this.constructor = d;
-                    }
-                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
-                };
-                var SurveyPropertyTextItemsEditor = exports.SurveyPropertyTextItemsEditor = function(_super) {
-                    __extends(SurveyPropertyTextItemsEditor, _super);
-
-                    function SurveyPropertyTextItemsEditor() {
-                        _super.call(this);
-                    }
-                    Object.defineProperty(SurveyPropertyTextItemsEditor.prototype, "editorType", {
-                        get: function get() {
-                            return "textitems";
-                        },
-                        enumerable: true,
-                        configurable: true
-                    });
-                    SurveyPropertyTextItemsEditor.prototype.createNewEditorItem = function() {
-                        var objs = [];
-                        var items = this.koItems();
-                        for (var i = 0; i < items.length; i++) {
-                            objs.push({ name: items[i].koName() });
-                        }
-                        var editItem = { koName: ko.observable(_surveyHelper.SurveyHelper.getNewName(objs, "text")), koTitle: ko.observable() };
-                        this.createValidatorsEditor(editItem, []);
-                        return editItem;
-                    };
-                    SurveyPropertyTextItemsEditor.prototype.createEditorItem = function(item) {
-                        var editItem = { koName: ko.observable(item.name), koTitle: ko.observable(item.title) };
-                        this.createValidatorsEditor(editItem, item.validators);
-                        return editItem;
-                    };
-                    SurveyPropertyTextItemsEditor.prototype.createItemFromEditorItem = function(editorItem) {
-                        var itemText = new Survey.MultipleTextItem(editorItem.koName(), editorItem.koTitle());
-                        itemText.validators = editorItem.validators;
-                        return itemText;
-                    };
-                    SurveyPropertyTextItemsEditor.prototype.createValidatorsEditor = function(item, validators) {
-                        item.validators = validators.slice();
-                        var self = this;
-                        var onItemChanged = function onItemChanged(newValue) {
-                            item.validators = newValue;
-                            item.koText(self.getText(newValue.length));
-                        };
-                        var propertyEditor = new _propertyValidatorsEditor.SurveyPropertyValidatorsEditor();
-                        item.editor = propertyEditor;
-                        propertyEditor.onChanged = function(newValue) {
-                            onItemChanged(newValue);
-                        };
-                        propertyEditor.object = item;
-                        propertyEditor.title(_editorLocalization.editorLocalization.getString("pe.editProperty")["format"]("Validators"));
-                        propertyEditor.value = item.validators;
-                        item.koText = ko.observable(this.getText(validators.length));
-                    };
-                    SurveyPropertyTextItemsEditor.prototype.getText = function(length) {
-                        return _editorLocalization.editorLocalization.getString("pe.items")["format"](length);
-                    };
-                    return SurveyPropertyTextItemsEditor;
-                }(_propertyItemsEditor.SurveyPropertyItemsEditor);
-                _propertyEditorBase.SurveyPropertyEditorBase.registerEditor("textitems", function() {
-                    return new SurveyPropertyTextItemsEditor();
-                });
-
-                /***/
-            },
-            /* 5 */
-            /***/
-            function(module, exports, __webpack_require__) {
-
-                "use strict";
-
-                exports.__esModule = true;
-                exports.SurveyPropertyItemsEditor = undefined;
-
-                var _propertyModalEditor = __webpack_require__(6);
-
-                var _editorLocalization = __webpack_require__(7);
-
-                var __extends = undefined && undefined.__extends || function(d, b) {
-                    for (var p in b) {
-                        if (b.hasOwnProperty(p)) d[p] = b[p];
-                    }
-
-                    function __() {
-                        this.constructor = d;
-                    }
-                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
-                };
-                var SurveyPropertyItemsEditor = exports.SurveyPropertyItemsEditor = function(_super) {
-                    __extends(SurveyPropertyItemsEditor, _super);
-
-                    function SurveyPropertyItemsEditor() {
-                        _super.call(this);
-                        this.koItems = ko.observableArray();
-                        this.value = [];
-                        var self = this;
-                        self.onDeleteClick = function(item) {
-                            self.koItems.remove(item);
-                        };
-                        self.onClearClick = function(item) {
-                            self.koItems.removeAll();
-                        };
-                        self.onAddClick = function() {
-                            self.AddItem();
-                        };
-                        self.onMoveUpClick = function(item) {
-                            self.moveUp(item);
-                        };
-                        self.onMoveDownClick = function(item) {
-                            self.moveDown(item);
-                        };
-                    }
-                    SurveyPropertyItemsEditor.prototype.getValueText = function(value) {
-                        var len = value ? value.length : 0;
-                        return _editorLocalization.editorLocalization.getString("pe.items")["format"](len);
-                    };
-                    SurveyPropertyItemsEditor.prototype.getCorrectedValue = function(value) {
-                        if (value == null || !Array.isArray(value)) value = [];
-                        return value;
-                    };
-                    SurveyPropertyItemsEditor.prototype.AddItem = function() {
-                        this.koItems.push(this.createNewEditorItem());
-                    };
-                    SurveyPropertyItemsEditor.prototype.moveUp = function(item) {
-                        var arr = this.koItems();
-                        var index = arr.indexOf(item);
-                        if (index < 1) return;
-                        arr[index] = arr[index - 1];
-                        arr[index - 1] = item;
-                        this.koItems(arr);
-                    };
-                    SurveyPropertyItemsEditor.prototype.moveDown = function(item) {
-                        var arr = this.koItems();
-                        var index = arr.indexOf(item);
-                        if (index < 0 || index >= arr.length - 1) return;
-                        arr[index] = arr[index + 1];
-                        arr[index + 1] = item;
-                        this.koItems(arr);
-                    };
-                    SurveyPropertyItemsEditor.prototype.onValueChanged = function() {
-                        this.koItems(this.getItemsFromValue());
-                    };
-                    SurveyPropertyItemsEditor.prototype.getItemsFromValue = function() {
-                        var items = [];
-                        var value = this.value;
-                        for (var i = 0; i < value.length; i++) {
-                            items.push(this.createEditorItem(value[i]));
-                        }
-                        return items;
-                    };
-                    SurveyPropertyItemsEditor.prototype.onBeforeApply = function() {
-                        var items = [];
-                        var internalItems = this.koItems();
-                        for (var i = 0; i < internalItems.length; i++) {
-                            items.push(this.createItemFromEditorItem(internalItems[i]));
-                        }
-                        this.setValueCore(items);
-                    };
-                    SurveyPropertyItemsEditor.prototype.createNewEditorItem = function() {
-                        throw "Override 'createNewEditorItem' method";
-                    };
-                    SurveyPropertyItemsEditor.prototype.createEditorItem = function(item) {
-                        return item;
-                    };
-                    SurveyPropertyItemsEditor.prototype.createItemFromEditorItem = function(editorItem) {
-                        return editorItem;
-                    };
-                    return SurveyPropertyItemsEditor;
-                }(_propertyModalEditor.SurveyPropertyModalEditor);
-
-                /***/
-            },
-            /* 6 */
-            /***/
-            function(module, exports, __webpack_require__) {
-
-                "use strict";
-
-                exports.__esModule = true;
-                exports.SurveyPropertyHtmlEditor = exports.SurveyPropertyTextEditor = exports.SurveyPropertyModalEditor = undefined;
-
-                var _propertyEditorBase = __webpack_require__(3);
-
-                var __extends = undefined && undefined.__extends || function(d, b) {
-                    for (var p in b) {
-                        if (b.hasOwnProperty(p)) d[p] = b[p];
-                    }
-
-                    function __() {
-                        this.constructor = d;
-                    }
-                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
-                };
-                var SurveyPropertyModalEditor = exports.SurveyPropertyModalEditor = function(_super) {
-                    __extends(SurveyPropertyModalEditor, _super);
-
-                    function SurveyPropertyModalEditor() {
-                        _super.call(this);
-                        this.title = ko.observable();
-                        var self = this;
-                        self.onApplyClick = function() {
-                            self.apply();
-                        };
-                        self.onResetClick = function() {
-                            self.reset();
-                        };
-                    }
-                    SurveyPropertyModalEditor.prototype.setTitle = function(value) {
-                        this.title(value);
-                    };
-                    SurveyPropertyModalEditor.prototype.hasError = function() {
-                        return false;
-                    };
-                    SurveyPropertyModalEditor.prototype.onBeforeApply = function() {};
-                    SurveyPropertyModalEditor.prototype.reset = function() {
-                        this.value = this.value;
-                    };
-                    SurveyPropertyModalEditor.prototype.setObject = function(value) {
-                        this.object = value;
-                    };
-                    Object.defineProperty(SurveyPropertyModalEditor.prototype, "isEditable", {
-                        get: function get() {
-                            return false;
-                        },
-                        enumerable: true,
-                        configurable: true
-                    });
-                    SurveyPropertyModalEditor.prototype.apply = function() {
-                        if (this.hasError()) return;
-                        this.onBeforeApply();
-                        if (this.onChanged) {
-                            this.onChanged(this.value);
-                        }
-                    };
-                    return SurveyPropertyModalEditor;
-                }(_propertyEditorBase.SurveyPropertyEditorBase);
-                var SurveyPropertyTextEditor = exports.SurveyPropertyTextEditor = function(_super) {
-                    __extends(SurveyPropertyTextEditor, _super);
-
-                    function SurveyPropertyTextEditor() {
-                        _super.call(this);
-                        this.koValue = ko.observable();
-                    }
-                    Object.defineProperty(SurveyPropertyTextEditor.prototype, "editorType", {
-                        get: function get() {
-                            return "text";
-                        },
-                        enumerable: true,
-                        configurable: true
-                    });
-                    Object.defineProperty(SurveyPropertyTextEditor.prototype, "isEditable", {
-                        get: function get() {
-                            return true;
-                        },
-                        enumerable: true,
-                        configurable: true
-                    });
-                    SurveyPropertyTextEditor.prototype.getValueText = function(value) {
-                        if (!value) return null;
-                        var str = value;
-                        if (str.length > 20) {
-                            str = str.substr(0, 20) + "...";
-                        }
-                        return str;
-                    };
-                    SurveyPropertyTextEditor.prototype.onValueChanged = function() {
-                        this.koValue(this.value);
-                    };
-                    SurveyPropertyTextEditor.prototype.onBeforeApply = function() {
-                        this.setValueCore(this.koValue());
-                    };
-                    return SurveyPropertyTextEditor;
-                }(SurveyPropertyModalEditor);
-                var SurveyPropertyHtmlEditor = exports.SurveyPropertyHtmlEditor = function(_super) {
-                    __extends(SurveyPropertyHtmlEditor, _super);
-
-                    function SurveyPropertyHtmlEditor() {
-                        _super.call(this);
-                    }
-                    Object.defineProperty(SurveyPropertyHtmlEditor.prototype, "editorType", {
-                        get: function get() {
-                            return "html";
-                        },
-                        enumerable: true,
-                        configurable: true
-                    });
-                    return SurveyPropertyHtmlEditor;
-                }(SurveyPropertyTextEditor);
-                _propertyEditorBase.SurveyPropertyEditorBase.registerEditor("text", function() {
-                    return new SurveyPropertyTextEditor();
-                });
-                _propertyEditorBase.SurveyPropertyEditorBase.registerEditor("html", function() {
-                    return new SurveyPropertyHtmlEditor();
-                });
-
-                /***/
-            },
-            /* 7 */
-            /***/
-            function(module, exports) {
-
-                "use strict";
-
-                exports.__esModule = true;
-                var editorLocalization = exports.editorLocalization = {
-                    currentLocale: "",
-                    locales: {},
-                    getString: function getString(strName, locale) {
-                        if (locale === void 0) {
-                            locale = null;
-                        }
-                        if (!locale) locale = this.currentLocale;
-                        var loc = locale ? this.locales[this.currentLocale] : defaultStrings;
-                        if (!loc) loc = defaultStrings;
-                        var path = strName.split('.');
-                        var obj = loc;
-                        for (var i = 0; i < path.length; i++) {
-                            obj = obj[path[i]];
-                            if (!obj) {
-                                if (loc === defaultStrings) return path[i];
-                                return this.getString(strName, "en");
+                        });
+                        Object.defineProperty(exports, "SurveyBooleanPropertyEditor", {
+                            enumerable: true,
+                            get: function get() {
+                                return _propertyEditorBase.SurveyBooleanPropertyEditor;
                             }
-                        }
-                        return obj;
-                    },
-                    getPropertyName: function getPropertyName(strName, local) {
-                        if (local === void 0) {
-                            local = null;
-                        }
-                        var obj = this.getProperty(strName, local);
-                        if (obj["name"]) return obj["name"];
-                        return obj;
-                    },
-                    getPropertyTitle: function getPropertyTitle(strName, local) {
-                        if (local === void 0) {
-                            local = null;
-                        }
-                        var obj = this.getProperty(strName, local);
-                        if (obj["title"]) return obj["title"];
-                        return "";
-                    },
-                    getProperty: function getProperty(strName, local) {
-                        if (local === void 0) {
-                            local = null;
-                        }
-                        var obj = this.getString("p." + strName, local);
-                        if (obj !== strName) return obj;
-                        var pos = strName.indexOf('_');
-                        if (pos < -1) return obj;
-                        strName = strName.substr(pos + 1);
-                        return this.getString("p." + strName, local);
-                    },
-                    getLocales: function getLocales() {
-                        var res = [];
-                        res.push("");
-                        for (var key in this.locales) {
-                            res.push(key);
-                        }
-                        return res;
-                    }
-                };
-                var defaultStrings = exports.defaultStrings = {
-                    //survey templates
-                    survey: {
-                        dropQuestion: "Please drop a question here.",
-                        copy: "Copy",
-                        addToToolbox: "Add to toolbox"
-                    },
-                    //questionTypes
-                    qt: {
-                        checkbox: "Checkbox",
-                        comment: "Comment",
-                        dropdown: "Dropdown",
-                        file: "File",
-                        html: "Html",
-                        matrix: "Matrix (single choice)",
-                        matrixdropdown: "Matrix (multiple choice)",
-                        matrixdynamic: "Matrix (dynamic rows)",
-                        multipletext: "Multiple Text",
-                        radiogroup: "Radiogroup",
-                        rating: "Rating",
-                        text: "Single Input"
-                    },
-                    //Strings in Editor
-                    ed: {
-                        newPageName: "page",
-                        newQuestionName: "question",
-                        testSurvey: "Test Survey",
-                        testSurveyAgain: "Test Survey Again",
-                        testSurveyWidth: "Survey width: ",
-                        embedSurvey: "Embed Survey",
-                        saveSurvey: "Save Survey",
-                        designer: "Survey Designer",
-                        jsonEditor: "JSON Editor",
-                        undo: "Undo",
-                        redo: "Redo",
-                        options: "Options",
-                        generateValidJSON: "Generate Valid JSON",
-                        generateReadableJSON: "Generate Readable JSON",
-                        toolbox: "Toolbox",
-                        delSelObject: "Delete selected object",
-                        correctJSON: "Please correct JSON.",
-                        surveyResults: "Survey Result: "
-                    },
-                    //Property Editors
-                    pe: {
-                        apply: "Apply",
-                        reset: "Reset",
-                        close: "Close",
-                        delete: "Delete",
-                        addNew: "Add New",
-                        removeAll: "Remove All",
-                        edit: "Edit",
-                        empty: "<empty>",
-                        testService: "Test the service",
-                        value: "Value",
-                        text: "Text",
-                        required: "Required?",
-                        hasOther: "Has Other Item",
-                        name: "Name",
-                        title: "Title",
-                        cellType: "Cell Type",
-                        colCount: "Column Count",
-                        editProperty: "Edit property '{0}'",
-                        items: "[ Items: {0} ]",
-                        enterNewValue: "Please, enter the value.",
-                        noquestions: "There is no any question in the survey.",
-                        createtrigger: "Please create a trigger",
-                        triggerOn: "On ",
-                        triggerMakePagesVisible: "Make pages visible:",
-                        triggerMakeQuestionsVisible: "Make questions visible:",
-                        triggerCompleteText: "Complete the survey if succeed.",
-                        triggerNotSet: "The trigger is not set",
-                        triggerRunIf: "Run if",
-                        triggerSetToName: "Change value of: ",
-                        triggerSetValue: "to: ",
-                        triggerIsVariable: "Do not put the variable into the survey result.",
-                        verbChangeType: "Change type ",
-                        verbChangePage: "Change page "
-                    },
-                    //Operators
-                    op: {
-                        empty: "is empty",
-                        notempty: "is not empty",
-                        equal: "equals",
-                        notequal: "not equals",
-                        contains: "contains",
-                        notcontains: "not contains",
-                        greater: "greater",
-                        less: "less",
-                        greaterorequal: "greater or equals",
-                        lessorequal: "Less or Equals"
-                    },
-                    //Embed window
-                    ew: {
-                        knockout: "Use Knockout version",
-                        react: "Use React version",
-                        bootstrap: "For bootstrap framework",
-                        standard: "No bootstrap",
-                        showOnPage: "Show survey on a page",
-                        showInWindow: "Show survey in a window",
-                        loadFromServer: "Load Survey JSON from server",
-                        titleScript: "Scripts and styles",
-                        titleHtml: "HTML",
-                        titleJavaScript: "JavaScript"
-                    },
-                    //Properties
-                    p: {
-                        name: "name",
-                        title: { name: "title", title: "Leave it empty, if it is the same as 'Name'" },
-                        survey_title: { name: "title", title: "It will be shown on every page." },
-                        page_title: { name: "title", title: "Page title" }
-                    }
-                };
-                editorLocalization.locales["en"] = defaultStrings;
-
-                /***/
-            },
-            /* 8 */
-            /***/
-            function(module, exports, __webpack_require__) {
-
-                "use strict";
-
-                exports.__esModule = true;
-                exports.SurveyHelper = exports.ObjType = undefined;
-
-                var _editorLocalization = __webpack_require__(7);
-
-                var ObjType = exports.ObjType = undefined;
-                (function(ObjType) {
-                    ObjType[ObjType["Unknown"] = 0] = "Unknown";
-                    ObjType[ObjType["Survey"] = 1] = "Survey";
-                    ObjType[ObjType["Page"] = 2] = "Page";
-                    ObjType[ObjType["Question"] = 3] = "Question";
-                })(ObjType || (exports.ObjType = ObjType = {}));
-                var SurveyHelper = exports.SurveyHelper = function() {
-                    function SurveyHelper() {}
-                    SurveyHelper.getNewPageName = function(objs) {
-                        return SurveyHelper.getNewName(objs, _editorLocalization.editorLocalization.getString("ed.newPageName"));
-                    };
-                    SurveyHelper.getNewQuestionName = function(objs) {
-                        return SurveyHelper.getNewName(objs, _editorLocalization.editorLocalization.getString("ed.newQuestionName"));
-                    };
-                    SurveyHelper.getNewName = function(objs, baseName) {
-                        var hash = {};
-                        for (var i = 0; i < objs.length; i++) {
-                            hash[objs[i].name] = true;
-                        }
-                        var num = 1;
-                        while (true) {
-                            if (!hash[baseName + num.toString()]) break;
-                            num++;
-                        }
-                        return baseName + num.toString();
-                    };
-                    SurveyHelper.getObjectType = function(obj) {
-                        if (!obj || !obj["getType"]) return ObjType.Unknown;
-                        if (obj.getType() == "page") return ObjType.Page;
-                        if (obj.getType() == "survey") return ObjType.Survey;
-                        if (obj["name"]) return ObjType.Question;
-                        return ObjType.Unknown;
-                    };
-                    SurveyHelper.getObjectName = function(obj) {
-                        if (obj["name"]) return obj["name"];
-                        var objType = SurveyHelper.getObjectType(obj);
-                        if (objType != ObjType.Page) return "";
-                        var data = obj.data;
-                        var index = data.pages.indexOf(obj);
-                        return "[Page " + (index + 1) + "]";
-                    };
-                    return SurveyHelper;
-                }();
-
-                /***/
-            },
-            /* 9 */
-            /***/
-            function(module, exports, __webpack_require__) {
-
-                "use strict";
+                        });
+                        Object.defineProperty(exports, "SurveyNumberPropertyEditor", {
+                            enumerable: true,
+                            get: function get() {
+                                return _propertyEditorBase.SurveyNumberPropertyEditor;
+                            }
+                        });
 
-                exports.__esModule = true;
-                exports.SurveyPropertyValidatorItem = exports.SurveyPropertyValidatorsEditor = undefined;
+                        var _propertyTextItemsEditor = __webpack_require__(4);
 
-                var _propertyItemsEditor = __webpack_require__(5);
+                        Object.defineProperty(exports, "SurveyPropertyTextItemsEditor", {
+                            enumerable: true,
+                            get: function get() {
+                                return _propertyTextItemsEditor.SurveyPropertyTextItemsEditor;
+                            }
+                        });
 
-                var _propertyEditorBase = __webpack_require__(3);
+                        var _propertyItemsEditor = __webpack_require__(5);
 
-                var _objectEditor = __webpack_require__(10);
+                        Object.defineProperty(exports, "SurveyPropertyItemsEditor", {
+                            enumerable: true,
+                            get: function get() {
+                                return _propertyItemsEditor.SurveyPropertyItemsEditor;
+                            }
+                        });
 
-                var _surveyKnockout = __webpack_require__(2);
+                        var _propertyItemValuesEditor = __webpack_require__(12);
 
-                var Survey = _interopRequireWildcard(_surveyKnockout);
+                        Object.defineProperty(exports, "SurveyPropertyItemValuesEditor", {
+                            enumerable: true,
+                            get: function get() {
+                                return _propertyItemValuesEditor.SurveyPropertyItemValuesEditor;
+                            }
+                        });
 
-                function _interopRequireWildcard(obj) {
-                    if (obj && obj.__esModule) { return obj; } else {
-                        var newObj = {};
-                        if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } }
-                        newObj.default = obj;
-                        return newObj;
-                    }
-                }
+                        var _propertyMatrixDropdownColumnsEditor = __webpack_require__(13);
 
-                var __extends = undefined && undefined.__extends || function(d, b) {
-                    for (var p in b) {
-                        if (b.hasOwnProperty(p)) d[p] = b[p];
-                    }
-
-                    function __() {
-                        this.constructor = d;
-                    }
-                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
-                };
-                var SurveyPropertyValidatorsEditor = exports.SurveyPropertyValidatorsEditor = function(_super) {
-                    __extends(SurveyPropertyValidatorsEditor, _super);
-
-                    function SurveyPropertyValidatorsEditor() {
-                        _super.call(this);
-                        this.availableValidators = [];
-                        this.validatorClasses = [];
-                        var self = this;
-                        this.selectedObjectEditor = new _objectEditor.SurveyObjectEditor();
-                        this.selectedObjectEditor.onPropertyValueChanged.add(function(sender, options) {
-                            self.onPropertyValueChanged(options.property, options.object, options.newValue);
+                        Object.defineProperty(exports, "SurveyPropertyDropdownColumnsEditor", {
+                            enumerable: true,
+                            get: function get() {
+                                return _propertyMatrixDropdownColumnsEditor.SurveyPropertyDropdownColumnsEditor;
+                            }
                         });
-                        this.koSelected = ko.observable(null);
-                        this.koSelected.subscribe(function(newValue) {
-                            self.selectedObjectEditor.selectedObject = newValue != null ? newValue.validator : null;
+                        Object.defineProperty(exports, "SurveyPropertyMatrixDropdownColumnsItem", {
+                            enumerable: true,
+                            get: function get() {
+                                return _propertyMatrixDropdownColumnsEditor.SurveyPropertyMatrixDropdownColumnsItem;
+                            }
                         });
-                        this.validatorClasses = Survey.JsonObject.metaData.getChildrenClasses("surveyvalidator", true);
-                        this.availableValidators = this.getAvailableValidators();
-                        this.onDeleteClick = function() {
-                            self.koItems.remove(self.koSelected());
-                        };
-                        this.onAddClick = function(validatorType) {
-                            self.addItem(validatorType);
-                        };
-                    }
-                    Object.defineProperty(SurveyPropertyValidatorsEditor.prototype, "editorType", {
-                        get: function get() {
-                            return "validators";
-                        },
-                        enumerable: true,
-                        configurable: true
-                    });
-                    SurveyPropertyValidatorsEditor.prototype.onValueChanged = function() {
-                        _super.prototype.onValueChanged.call(this);
-                        if (this.koSelected) {
-                            this.koSelected(this.koItems().length > 0 ? this.koItems()[0] : null);
-                        }
-                    };
-                    SurveyPropertyValidatorsEditor.prototype.createEditorItem = function(item) {
-                        var jsonObj = new Survey.JsonObject();
-                        var validator = Survey.JsonObject.metaData.createClass(item.getType());
-                        jsonObj.toObject(item, validator);
-                        return new SurveyPropertyValidatorItem(validator);
-                    };
-                    SurveyPropertyValidatorsEditor.prototype.createItemFromEditorItem = function(editorItem) {
-                        var item = editorItem;
-                        return item.validator;
-                    };
-                    SurveyPropertyValidatorsEditor.prototype.addItem = function(validatorType) {
-                        var newValidator = new SurveyPropertyValidatorItem(Survey.JsonObject.metaData.createClass(validatorType));
-                        this.koItems.push(newValidator);
-                        this.koSelected(newValidator);
-                    };
-                    SurveyPropertyValidatorsEditor.prototype.getAvailableValidators = function() {
-                        var result = [];
-                        for (var i = 0; i < this.validatorClasses.length; i++) {
-                            result.push(this.validatorClasses[i].name);
-                        }
-                        return result;
-                    };
-                    SurveyPropertyValidatorsEditor.prototype.onPropertyValueChanged = function(property, obj, newValue) {
-                        if (this.koSelected() == null) return;
-                        this.koSelected().validator[property.name] = newValue;
-                    };
-                    return SurveyPropertyValidatorsEditor;
-                }(_propertyItemsEditor.SurveyPropertyItemsEditor);
-                var SurveyPropertyValidatorItem = exports.SurveyPropertyValidatorItem = function() {
-                    function SurveyPropertyValidatorItem(validator) {
-                        this.validator = validator;
-                        this.text = validator.getType();
-                    }
-                    return SurveyPropertyValidatorItem;
-                }();
-                _propertyEditorBase.SurveyPropertyEditorBase.registerEditor("validators", function() {
-                    return new SurveyPropertyValidatorsEditor();
-                });
-
-                /***/
-            },
-            /* 10 */
-            /***/
-            function(module, exports, __webpack_require__) {
-
-                "use strict";
-
-                exports.__esModule = true;
-                exports.SurveyObjectEditor = undefined;
-
-                var _objectProperty = __webpack_require__(11);
-
-                var _editorLocalization = __webpack_require__(7);
-
-                var _surveyKnockout = __webpack_require__(2);
-
-                var Survey = _interopRequireWildcard(_surveyKnockout);
-
-                function _interopRequireWildcard(obj) {
-                    if (obj && obj.__esModule) { return obj; } else {
-                        var newObj = {};
-                        if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } }
-                        newObj.default = obj;
-                        return newObj;
-                    }
-                }
 
-                var SurveyObjectEditor = exports.SurveyObjectEditor = function() {
-                    function SurveyObjectEditor(propertyEditorOptions) {
-                        if (propertyEditorOptions === void 0) {
-                            propertyEditorOptions = null;
-                        }
-                        this.propertyEditorOptions = null;
-                        this.onPropertyValueChanged = new Survey.Event();
-                        this.propertyEditorOptions = propertyEditorOptions;
-                        this.koProperties = ko.observableArray();
-                        this.koActiveProperty = ko.observable();
-                        this.koHasObject = ko.observable();
-                    }
-                    Object.defineProperty(SurveyObjectEditor.prototype, "selectedObject", {
-                        get: function get() {
-                            return this.selectedObjectValue;
-                        },
-                        set: function set(value) {
-                            if (this.selectedObjectValue == value) return;
-                            this.koHasObject(value != null);
-                            this.selectedObjectValue = value;
-                            this.updateProperties();
-                            this.updatePropertiesObject();
-                        },
-                        enumerable: true,
-                        configurable: true
-                    });
-                    SurveyObjectEditor.prototype.getPropertyEditor = function(name) {
-                        var properties = this.koProperties();
-                        for (var i = 0; i < properties.length; i++) {
-                            if (properties[i].name == name) return properties[i];
-                        }
-                        return null;
-                    };
-                    SurveyObjectEditor.prototype.changeActiveProperty = function(property) {
-                        this.koActiveProperty(property);
-                    };
-                    SurveyObjectEditor.prototype.ObjectChanged = function() {
-                        this.updatePropertiesObject();
-                    };
-                    SurveyObjectEditor.prototype.updateProperties = function() {
-                        var _this = this;
-                        if (!this.selectedObject || !this.selectedObject.getType) {
-                            this.koProperties([]);
-                            this.koActiveProperty(null);
-                            return;
-                        }
-                        var properties = Survey.JsonObject.metaData.getProperties(this.selectedObject.getType());
-                        properties.sort(function(a, b) {
-                            if (a.name == b.name) return 0;
-                            if (a.name > b.name) return 1;
-                            return -1;
+                        var _propertyModalEditor = __webpack_require__(6);
+
+                        Object.defineProperty(exports, "SurveyPropertyModalEditor", {
+                            enumerable: true,
+                            get: function get() {
+                                return _propertyModalEditor.SurveyPropertyModalEditor;
+                            }
                         });
-                        var objectProperties = [];
-                        var self = this;
-                        var propEvent = function propEvent(property, newValue) {
-                            self.onPropertyValueChanged.fire(_this, { property: property.property, object: property.object, newValue: newValue });
-                        };
-                        for (var i = 0; i < properties.length; i++) {
-                            if (!this.canShowProperty(properties[i])) continue;
-                            var objectProperty = new _objectProperty.SurveyObjectProperty(properties[i], propEvent, this.propertyEditorOptions);
-                            var locName = this.selectedObject.getType() + '_' + properties[i].name;
-                            objectProperty.displayName = _editorLocalization.editorLocalization.getPropertyName(locName);
-                            var title = _editorLocalization.editorLocalization.getPropertyTitle(locName);
-                            if (!title) title = objectProperty.displayName;
-                            objectProperty.title = title;
-                            objectProperties.push(objectProperty);
-                        }
-                        this.koProperties(objectProperties);
-                        this.koActiveProperty(this.getPropertyEditor("name"));
-                    };
-                    SurveyObjectEditor.prototype.canShowProperty = function(property) {
-                        var name = property.name;
-                        if (name == 'questions' || name == 'pages') return false;
-                        return true;
-                    };
-                    SurveyObjectEditor.prototype.updatePropertiesObject = function() {
-                        var properties = this.koProperties();
-                        for (var i = 0; i < properties.length; i++) {
-                            properties[i].object = this.selectedObject;
-                        }
-                    };
-                    return SurveyObjectEditor;
-                }();
 
-                /***/
-            },
-            /* 11 */
-            /***/
-            function(module, exports, __webpack_require__) {
+                        var _propertyRestfullEditor = __webpack_require__(14);
 
-                "use strict";
+                        Object.defineProperty(exports, "SurveyPropertyResultfullEditor", {
+                            enumerable: true,
+                            get: function get() {
+                                return _propertyRestfullEditor.SurveyPropertyResultfullEditor;
+                            }
+                        });
 
-                exports.__esModule = true;
-                exports.SurveyObjectProperty = undefined;
+                        var _propertyTriggersEditor = __webpack_require__(15);
 
-                var _propertyEditorBase = __webpack_require__(3);
+                        Object.defineProperty(exports, "SurveyPropertyTriggersEditor", {
+                            enumerable: true,
+                            get: function get() {
+                                return _propertyTriggersEditor.SurveyPropertyTriggersEditor;
+                            }
+                        });
 
-                var _editorLocalization = __webpack_require__(7);
+                        var _propertyValidatorsEditor = __webpack_require__(9);
 
-                var SurveyObjectProperty = exports.SurveyObjectProperty = function() {
-                    function SurveyObjectProperty(property, onPropertyChanged, propertyEditorOptions) {
-                        if (onPropertyChanged === void 0) {
-                            onPropertyChanged = null;
-                        }
-                        if (propertyEditorOptions === void 0) {
-                            propertyEditorOptions = null;
-                        }
-                        this.property = property;
-                        this.isApplyingNewValue = false;
-                        this.onPropertyChanged = onPropertyChanged;
-                        this.name = this.property.name;
-                        this.koValue = ko.observable();
-                        this.choices = property.choices;
-                        var self = this;
-                        this.editorType = property.type;
-                        //TODO
-                        if (this.choices != null) {
-                            this.editorType = "dropdown";
-                        }
-                        var onItemChanged = function onItemChanged(newValue) {
-                            self.onApplyEditorValue(newValue);
-                        };
-                        this.editor = _propertyEditorBase.SurveyPropertyEditorBase.createEditor(this.editorType, onItemChanged);
-                        this.editor.options = propertyEditorOptions;
-                        this.editorType = this.editor.editorType;
-                        this.modalName = "modelEditor" + this.editorType + this.name;
-                        this.modalNameTarget = "#" + this.modalName;
-                        this.koValue.subscribe(function(newValue) {
-                            self.onkoValueChanged(newValue);
-                        });
-                        this.koText = ko.computed(function() {
-                            return self.getValueText(self.koValue());
-                        });
-                        this.koIsDefault = ko.computed(function() {
-                            return self.property.isDefaultValue(self.koValue());
+                        Object.defineProperty(exports, "SurveyPropertyValidatorsEditor", {
+                            enumerable: true,
+                            get: function get() {
+                                return _propertyValidatorsEditor.SurveyPropertyValidatorsEditor;
+                            }
                         });
-                    }
-                    Object.defineProperty(SurveyObjectProperty.prototype, "object", {
-                        get: function get() {
-                            return this.objectValue;
-                        },
-                        set: function set(value) {
-                            this.objectValue = value;
-                            this.updateValue();
-                        },
-                        enumerable: true,
-                        configurable: true
-                    });
-                    SurveyObjectProperty.prototype.updateValue = function() {
-                        this.isValueUpdating = true;
-                        this.koValue(this.getValue());
-                        this.editor.setObject(this.object);
-                        this.editor.setTitle(_editorLocalization.editorLocalization.getString("pe.editProperty")["format"](this.property.name));
-                        this.updateEditorData(this.koValue());
-                        this.isValueUpdating = false;
-                    };
-                    SurveyObjectProperty.prototype.onApplyEditorValue = function(newValue) {
-                        this.isApplyingNewValue = true;
-                        this.koValue(newValue);
-                        this.isApplyingNewValue = false;
-                    };
-                    SurveyObjectProperty.prototype.onkoValueChanged = function(newValue) {
-                        if (!this.isApplyingNewValue) {
-                            this.updateEditorData(newValue);
-                        }
-                        if (this.object == null) return;
-                        if (this.object[this.name] == newValue) return;
-                        if (this.onPropertyChanged != null && !this.isValueUpdating) this.onPropertyChanged(this, newValue);
-                    };
-                    SurveyObjectProperty.prototype.updateEditorData = function(newValue) {
-                        this.editor.value = newValue;
-                    };
-                    SurveyObjectProperty.prototype.getValue = function() {
-                        if (this.property.hasToUseGetValue) return this.property.getValue(this.object);
-                        return this.object[this.name];
-                    };
-                    SurveyObjectProperty.prototype.getValueText = function(value) {
-                        return this.editor.getValueText(value);
-                    };
-                    return SurveyObjectProperty;
-                }();
-
-                /***/
-            },
-            /* 12 */
-            /***/
-            function(module, exports, __webpack_require__) {
-
-                "use strict";
-
-                exports.__esModule = true;
-                exports.SurveyPropertyItemValuesEditor = undefined;
-
-                var _propertyItemsEditor = __webpack_require__(5);
-
-                var _propertyEditorBase = __webpack_require__(3);
-
-                var __extends = undefined && undefined.__extends || function(d, b) {
-                    for (var p in b) {
-                        if (b.hasOwnProperty(p)) d[p] = b[p];
-                    }
-
-                    function __() {
-                        this.constructor = d;
-                    }
-                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
-                };
-                var SurveyPropertyItemValuesEditor = exports.SurveyPropertyItemValuesEditor = function(_super) {
-                    __extends(SurveyPropertyItemValuesEditor, _super);
-
-                    function SurveyPropertyItemValuesEditor() {
-                        _super.call(this);
-                    }
-                    Object.defineProperty(SurveyPropertyItemValuesEditor.prototype, "editorType", {
-                        get: function get() {
-                            return "itemvalues";
-                        },
-                        enumerable: true,
-                        configurable: true
-                    });
-                    SurveyPropertyItemValuesEditor.prototype.hasError = function() {
-                        var result = false;
-                        for (var i = 0; i < this.koItems().length; i++) {
-                            var item = this.koItems()[i];
-                            item.koHasError(!item.koValue());
-                            result = result || item.koHasError();
-                        }
-                        return result;
-                    };
-                    SurveyPropertyItemValuesEditor.prototype.createNewEditorItem = function() {
-                        return { koValue: ko.observable(), koText: ko.observable(), koHasError: ko.observable(false) };
-                    };
-                    SurveyPropertyItemValuesEditor.prototype.createEditorItem = function(item) {
-                        var itemValue = item;
-                        var itemText = null;
-                        if (item.value) {
-                            itemValue = item.value;
-                            itemText = item.text;
-                        }
-                        return { koValue: ko.observable(itemValue), koText: ko.observable(itemText), koHasError: ko.observable(false) };
-                    };
-                    SurveyPropertyItemValuesEditor.prototype.createItemFromEditorItem = function(editorItem) {
-                        var alwaySaveTextInPropertyEditors = this.options && this.options.alwaySaveTextInPropertyEditors;
-                        var text = editorItem.koText();
-                        if (!alwaySaveTextInPropertyEditors && editorItem.koText() == editorItem.koValue()) {
-                            text = null;
-                        }
-                        return { value: editorItem.koValue(), text: text };
-                    };
-                    return SurveyPropertyItemValuesEditor;
-                }(_propertyItemsEditor.SurveyPropertyItemsEditor);
-                _propertyEditorBase.SurveyPropertyEditorBase.registerEditor("itemvalues", function() {
-                    return new SurveyPropertyItemValuesEditor();
-                });
 
-                /***/
-            },
-            /* 13 */
-            /***/
-            function(module, exports, __webpack_require__) {
+                        var _objectProperty = __webpack_require__(11);
 
-                "use strict";
+                        Object.defineProperty(exports, "SurveyObjectProperty", {
+                            enumerable: true,
+                            get: function get() {
+                                return _objectProperty.SurveyObjectProperty;
+                            }
+                        });
 
-                exports.__esModule = true;
-                exports.SurveyPropertyMatrixDropdownColumnsItem = exports.SurveyPropertyDropdownColumnsEditor = undefined;
+                        var _objectEditor = __webpack_require__(10);
 
-                var _propertyItemsEditor = __webpack_require__(5);
+                        Object.defineProperty(exports, "SurveyObjectEditor", {
+                            enumerable: true,
+                            get: function get() {
+                                return _objectEditor.SurveyObjectEditor;
+                            }
+                        });
 
-                var _propertyEditorBase = __webpack_require__(3);
+                        var _pagesEditor = __webpack_require__(16);
 
-                var _propertyItemValuesEditor = __webpack_require__(12);
+                        Object.defineProperty(exports, "SurveyPagesEditor", {
+                            enumerable: true,
+                            get: function get() {
+                                return _pagesEditor.SurveyPagesEditor;
+                            }
+                        });
 
-                var _surveyKnockout = __webpack_require__(2);
+                        var _textWorker = __webpack_require__(17);
 
-                var Survey = _interopRequireWildcard(_surveyKnockout);
+                        Object.defineProperty(exports, "SurveyTextWorker", {
+                            enumerable: true,
+                            get: function get() {
+                                return _textWorker.SurveyTextWorker;
+                            }
+                        });
 
-                function _interopRequireWildcard(obj) {
-                    if (obj && obj.__esModule) { return obj; } else {
-                        var newObj = {};
-                        if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } }
-                        newObj.default = obj;
-                        return newObj;
-                    }
-                }
+                        var _surveyHelper = __webpack_require__(8);
 
-                var __extends = undefined && undefined.__extends || function(d, b) {
-                    for (var p in b) {
-                        if (b.hasOwnProperty(p)) d[p] = b[p];
-                    }
-
-                    function __() {
-                        this.constructor = d;
-                    }
-                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
-                };
-                var SurveyPropertyDropdownColumnsEditor = exports.SurveyPropertyDropdownColumnsEditor = function(_super) {
-                    __extends(SurveyPropertyDropdownColumnsEditor, _super);
-
-                    function SurveyPropertyDropdownColumnsEditor() {
-                        _super.call(this);
-                    }
-                    Object.defineProperty(SurveyPropertyDropdownColumnsEditor.prototype, "editorType", {
-                        get: function get() {
-                            return "matrixdropdowncolumns";
-                        },
-                        enumerable: true,
-                        configurable: true
-                    });
-                    SurveyPropertyDropdownColumnsEditor.prototype.hasError = function() {
-                        var result = false;
-                        for (var i = 0; i < this.koItems().length; i++) {
-                            result = result || this.koItems()[i].hasError();
-                        }
-                        return result;
-                    };
-                    SurveyPropertyDropdownColumnsEditor.prototype.createNewEditorItem = function() {
-                        return new SurveyPropertyMatrixDropdownColumnsItem(new Survey.MatrixDropdownColumn("", this.options));
-                    };
-                    SurveyPropertyDropdownColumnsEditor.prototype.createEditorItem = function(item) {
-                        return new SurveyPropertyMatrixDropdownColumnsItem(item, this.options);
-                    };
-                    SurveyPropertyDropdownColumnsEditor.prototype.createItemFromEditorItem = function(editorItem) {
-                        var columItem = editorItem;
-                        columItem.apply();
-                        return columItem.column;
-                    };
-                    return SurveyPropertyDropdownColumnsEditor;
-                }(_propertyItemsEditor.SurveyPropertyItemsEditor);
-                var SurveyPropertyMatrixDropdownColumnsItem = exports.SurveyPropertyMatrixDropdownColumnsItem = function() {
-                    function SurveyPropertyMatrixDropdownColumnsItem(column, options) {
-                        if (options === void 0) {
-                            options = null;
-                        }
-                        this.column = column;
-                        this.options = options;
-                        this.cellTypeChoices = this.getPropertyChoices("cellType");
-                        this.colCountChoices = this.getPropertyChoices("colCount");
-                        this.koName = ko.observable(column.name);
-                        this.koCellType = ko.observable(column.cellType);
-                        this.koColCount = ko.observable(column.colCount);
-                        this.koIsRequired = ko.observable(column.isRequired ? true : false);
-                        this.koHasOther = ko.observable(column.hasOther ? true : false);
-                        this.koTitle = ko.observable(column.name === column.title ? "" : column.title);
-                        this.koShowChoices = ko.observable(false);
-                        this.koChoices = ko.observableArray(column.choices);
-                        this.koHasError = ko.observable(false);
-                        this.choicesEditor = new _propertyItemValuesEditor.SurveyPropertyItemValuesEditor();
-                        this.choicesEditor.object = this.column;
-                        this.choicesEditor.value = this.koChoices();
-                        this.choicesEditor.options = this.options;
-                        var self = this;
-                        this.onShowChoicesClick = function() {
-                            self.koShowChoices(!self.koShowChoices());
-                        };
-                        this.koHasChoices = ko.computed(function() {
-                            return self.koCellType() == "dropdown" || self.koCellType() == "checkbox" || self.koCellType() == "radiogroup";
+                        Object.defineProperty(exports, "ObjType", {
+                            enumerable: true,
+                            get: function get() {
+                                return _surveyHelper.ObjType;
+                            }
                         });
-                        this.koHasColCount = ko.computed(function() {
-                            return self.koCellType() == "checkbox" || self.koCellType() == "radiogroup";
+                        Object.defineProperty(exports, "SurveyHelper", {
+                            enumerable: true,
+                            get: function get() {
+                                return _surveyHelper.SurveyHelper;
+                            }
                         });
-                    }
-                    SurveyPropertyMatrixDropdownColumnsItem.prototype.hasError = function() {
-                        this.koHasError(!this.koName());
-                        return this.koHasError() || this.choicesEditor.hasError();
-                    };
-                    SurveyPropertyMatrixDropdownColumnsItem.prototype.apply = function() {
-                        this.column.name = this.koName();
-                        this.column.title = this.koTitle();
-                        this.column.cellType = this.koCellType();
-                        this.column.colCount = this.koColCount();
-                        this.column.isRequired = this.koIsRequired();
-                        this.column.hasOther = this.koHasOther();
-                        this.choicesEditor.onApplyClick();
-                        this.column.choices = this.choicesEditor.value;
-                    };
-                    SurveyPropertyMatrixDropdownColumnsItem.prototype.getPropertyChoices = function(propetyName) {
-                        var properties = Survey.JsonObject.metaData.getProperties("matrixdropdowncolumn");
-                        for (var i = 0; i < properties.length; i++) {
-                            if (properties[i].name == propetyName) return properties[i].choices;
-                        }
-                        return [];
-                    };
-                    return SurveyPropertyMatrixDropdownColumnsItem;
-                }();
-                _propertyEditorBase.SurveyPropertyEditorBase.registerEditor("matrixdropdowncolumns", function() {
-                    return new SurveyPropertyDropdownColumnsEditor();
-                });
 
-                /***/
-            },
-            /* 14 */
-            /***/
-            function(module, exports, __webpack_require__) {
+                        var _surveyEmbedingWindow = __webpack_require__(19);
 
-                "use strict";
+                        Object.defineProperty(exports, "SurveyEmbedingWindow", {
+                            enumerable: true,
+                            get: function get() {
+                                return _surveyEmbedingWindow.SurveyEmbedingWindow;
+                            }
+                        });
 
-                exports.__esModule = true;
-                exports.SurveyPropertyResultfullEditor = undefined;
+                        var _objectVerbs = __webpack_require__(20);
 
-                var _propertyModalEditor = __webpack_require__(6);
+                        Object.defineProperty(exports, "SurveyVerbs", {
+                            enumerable: true,
+                            get: function get() {
+                                return _objectVerbs.SurveyVerbs;
+                            }
+                        });
+                        Object.defineProperty(exports, "SurveyVerbItem", {
+                            enumerable: true,
+                            get: function get() {
+                                return _objectVerbs.SurveyVerbItem;
+                            }
+                        });
+                        Object.defineProperty(exports, "SurveyVerbChangeTypeItem", {
+                            enumerable: true,
+                            get: function get() {
+                                return _objectVerbs.SurveyVerbChangeTypeItem;
+                            }
+                        });
+                        Object.defineProperty(exports, "SurveyVerbChangePageItem", {
+                            enumerable: true,
+                            get: function get() {
+                                return _objectVerbs.SurveyVerbChangePageItem;
+                            }
+                        });
 
-                var _propertyEditorBase = __webpack_require__(3);
+                        var _undoredo = __webpack_require__(21);
 
-                var _editorLocalization = __webpack_require__(7);
+                        Object.defineProperty(exports, "SurveyUndoRedo", {
+                            enumerable: true,
+                            get: function get() {
+                                return _undoredo.SurveyUndoRedo;
+                            }
+                        });
+                        Object.defineProperty(exports, "UndoRedoItem", {
+                            enumerable: true,
+                            get: function get() {
+                                return _undoredo.UndoRedoItem;
+                            }
+                        });
 
-                var _surveyKnockout = __webpack_require__(2);
+                        var _editor = __webpack_require__(22);
 
-                var Survey = _interopRequireWildcard(_surveyKnockout);
+                        Object.defineProperty(exports, "SurveyEditor", {
+                            enumerable: true,
+                            get: function get() {
+                                return _editor.SurveyEditor;
+                            }
+                        });
 
-                function _interopRequireWildcard(obj) {
-                    if (obj && obj.__esModule) { return obj; } else {
-                        var newObj = {};
-                        if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } }
-                        newObj.default = obj;
-                        return newObj;
-                    }
-                }
+                        /***/
+                    },
+                    /* 1 */
+                    /***/
+                    function(module, exports, __webpack_require__) {
 
-                var __extends = undefined && undefined.__extends || function(d, b) {
-                    for (var p in b) {
-                        if (b.hasOwnProperty(p)) d[p] = b[p];
-                    }
-
-                    function __() {
-                        this.constructor = d;
-                    }
-                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
-                };
-                var SurveyPropertyResultfullEditor = exports.SurveyPropertyResultfullEditor = function(_super) {
-                    __extends(SurveyPropertyResultfullEditor, _super);
-
-                    function SurveyPropertyResultfullEditor() {
-                        _super.call(this);
-                        this.koUrl = ko.observable();
-                        this.koPath = ko.observable();
-                        this.koValueName = ko.observable();
-                        this.koTitleName = ko.observable();
-                        this.createSurvey();
-                        var self = this;
-                        this.koUrl.subscribe(function(newValue) {
-                            self.question.choicesByUrl.url = newValue;
-                            self.run();
-                        });
-                        this.koPath.subscribe(function(newValue) {
-                            self.question.choicesByUrl.path = newValue;
-                            self.run();
-                        });
-                        this.koValueName.subscribe(function(newValue) {
-                            self.question.choicesByUrl.valueName = newValue;
-                            self.run();
-                        });
-                        this.koTitleName.subscribe(function(newValue) {
-                            self.question.choicesByUrl.titleName = newValue;
-                            self.run();
-                        });
-                    }
-                    Object.defineProperty(SurveyPropertyResultfullEditor.prototype, "editorType", {
-                        get: function get() {
-                            return "restfull";
-                        },
-                        enumerable: true,
-                        configurable: true
-                    });
-                    Object.defineProperty(SurveyPropertyResultfullEditor.prototype, "restfullValue", {
-                        get: function get() {
-                            return this.value;
-                        },
-                        enumerable: true,
-                        configurable: true
-                    });
-                    SurveyPropertyResultfullEditor.prototype.getValueText = function(value) {
-                        if (!value || !value.url) return _editorLocalization.editorLocalization.getString("pe.empty");
-                        var str = value.url;
-                        if (str.length > 20) {
-                            str = str.substr(0, 20) + "...";
-                        }
-                        return str;
-                    };
-                    SurveyPropertyResultfullEditor.prototype.onValueChanged = function() {
-                        var val = this.restfullValue;
-                        this.koUrl(val ? val.url : "");
-                        this.koPath(val ? val.path : "");
-                        this.koValueName(val ? val.valueName : "");
-                        this.koTitleName(val ? val.titleName : "");
-                        this.survey.render("restfullSurvey");
-                    };
-                    SurveyPropertyResultfullEditor.prototype.onBeforeApply = function() {
-                        var val = new Survey.ChoicesRestfull();
-                        val.url = this.koUrl();
-                        val.path = this.koPath();
-                        val.valueName = this.koValueName();
-                        val.titleName = this.koTitleName();
-                        this.setValueCore(val);
-                    };
-                    SurveyPropertyResultfullEditor.prototype.run = function() {
-                        this.question.choicesByUrl.run();
-                    };
-                    SurveyPropertyResultfullEditor.prototype.createSurvey = function() {
-                        this.survey = new Survey.Survey();
-                        this.survey.showNavigationButtons = false;
-                        this.survey.showQuestionNumbers = "off";
-                        var page = this.survey.addNewPage("page1");
-                        this.question = page.addNewQuestion("dropdown", "q1");
-                        this.question.title = _editorLocalization.editorLocalization.getString("pe.testService");
-                        this.question.choices = [];
-                        this.survey.render("restfullSurvey");
-                    };
-                    return SurveyPropertyResultfullEditor;
-                }(_propertyModalEditor.SurveyPropertyModalEditor);
-                _propertyEditorBase.SurveyPropertyEditorBase.registerEditor("restfull", function() {
-                    return new SurveyPropertyResultfullEditor();
-                });
+                        "use strict";
 
-                /***/
-            },
-            /* 15 */
-            /***/
-            function(module, exports, __webpack_require__) {
+                        exports.__esModule = true;
+                        exports.DragDropHelper = undefined;
 
-                "use strict";
+                        var _surveyKnockout = __webpack_require__(2);
 
-                exports.__esModule = true;
-                exports.SurveyPropertyTriggerObjects = exports.SurveyPropertySetValueTrigger = exports.SurveyPropertyVisibleTrigger = exports.SurveyPropertyTrigger = exports.SurveyPropertyTriggersEditor = undefined;
+                        var Survey = _interopRequireWildcard(_surveyKnockout);
 
-                var _propertyItemsEditor = __webpack_require__(5);
+                        function _interopRequireWildcard(obj) {
+                            if (obj && obj.__esModule) { return obj; } else {
+                                var newObj = {};
+                                if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } }
+                                newObj.default = obj;
+                                return newObj;
+                            }
+                        }
 
-                var _propertyEditorBase = __webpack_require__(3);
+                        var DragDropHelper = exports.DragDropHelper = function() {
+                            function DragDropHelper(data, onModifiedCallback, scrollableElName) {
+                                if (scrollableElName === void 0) {
+                                    scrollableElName = null;
+                                }
+                                this.data = data;
+                                this.scrollableElement = null;
+                                this.sourceIndex = -1;
+                                this.isScrollStop = true;
+                                this.onModifiedCallback = onModifiedCallback;
+                                this.scrollableElement = document.getElementById(scrollableElName ? scrollableElName : "scrollableDiv");
+                            }
+                            Object.defineProperty(DragDropHelper.prototype, "survey", {
+                                get: function get() {
+                                    return this.data;
+                                },
+                                enumerable: true,
+                                configurable: true
+                            });
+                            DragDropHelper.prototype.startDragNewQuestion = function(event, questionType, questionName) {
+                                this.prepareData(event, questionType, questionName);
+                            };
+                            DragDropHelper.prototype.startDragQuestion = function(event, questionName) {
+                                this.prepareData(event, null, questionName);
+                            };
+                            DragDropHelper.prototype.startDragCopiedQuestion = function(event, questionName, questionJson) {
+                                this.prepareData(event, null, questionName, questionJson);
+                            };
+                            DragDropHelper.prototype.isSurveyDragging = function(event) {
+                                if (!event) return false;
+                                var data = this.getData(event).text;
+                                return data && data.indexOf(DragDropHelper.dataStart) == 0;
+                            };
+                            DragDropHelper.prototype.doDragDropOver = function(event, question) {
+                                event = this.getEvent(event);
+                                this.checkScrollY(event);
+                                var targetQuestion = DragDropHelper.dragData.targetQuestion;
+                                if (!question || question == targetQuestion || !this.isSurveyDragging(event) || this.isSamePlace(event, question)) return;
+                                var index = this.getQuestionIndex(event, question);
+                                if (this.sourceIndex > -1) {
+                                    if (this.sourceIndex == index || this.sourceIndex + 1 == index) index = -1;
+                                }
+                                this.survey.currentPage["koDragging"](index);
+                            };
+                            DragDropHelper.prototype.end = function() {
+                                this.isScrollStop = true;
+                                this.setIsDraggingSource(this.survey["koDraggingSource"](), false);
+                                this.survey["koDraggingSource"](null);
+                                this.survey.currentPage["koDragging"](-1);
+                                this.sourceIndex = -1;
+                                this.clearData();
+                            };
+                            DragDropHelper.prototype.doDrop = function(event, question) {
+                                if (question === void 0) {
+                                    question = null;
+                                }
+                                if (event.stopPropagation) {
+                                    event.stopPropagation();
+                                }
+                                if (this.isSurveyDragging(event)) {
+                                    var index = this.survey.currentPage["koDragging"]();
+                                    var targetQuestion = DragDropHelper.dragData.targetQuestion;
+                                    if (targetQuestion && index > -1) {
+                                        var oldIndex = this.survey.currentPage.questions.indexOf(targetQuestion);
+                                        if (oldIndex > -1 && oldIndex < index) {
+                                            index--;
+                                        }
+                                        this.moveQuestionTo(targetQuestion, index);
+                                    }
+                                }
+                                this.end();
+                            };
+                            DragDropHelper.prototype.doLeavePage = function(event) {
+                                event = this.getEvent(event);
+                                if (!this.scrollableElement) return;
+                                if (event.clientX <= 0 || event.clientY <= 0 || event.clientX >= this.scrollableElement.offsetWidth || event.clientY >= this.scrollableElement.offsetHeight) {
+                                    this.survey.currentPage["koDragging"](-1);
+                                }
+                            };
+                            DragDropHelper.prototype.createTargetQuestion = function(questionType, questionName, json) {
+                                if (!questionName) return null;
+                                var targetQuestion = this.survey.getQuestionByName(questionName);
+                                this.sourceIndex = -1;
+                                if (targetQuestion) {
+                                    this.sourceIndex = this.survey.currentPage.questions.indexOf(targetQuestion);
+                                }
+                                if (!targetQuestion) {
+                                    if (json) {
+                                        targetQuestion = Survey.QuestionFactory.Instance.createQuestion(json["type"], name);
+                                        new Survey.JsonObject().toObject(json, targetQuestion);
+                                        targetQuestion.name = questionName;
+                                    }
+                                    if (!targetQuestion && questionType) {
+                                        targetQuestion = Survey.QuestionFactory.Instance.createQuestion(questionType, questionName);
+                                    }
+                                    targetQuestion.setData(this.survey);
+                                    targetQuestion.renderWidth = "100%";
+                                }
+                                this.setIsDraggingSource(targetQuestion, true);
+                                return targetQuestion;
+                            };
+                            DragDropHelper.prototype.setIsDraggingSource = function(question, val) {
+                                if (question && question["koIsDraggingSource"]) question["koIsDraggingSource"](val);
+                            };
+                            DragDropHelper.prototype.getQuestionIndex = function(event, question) {
+                                var page = this.survey.currentPage;
+                                if (!question) return page.questions.length;
+                                var index = page.questions.indexOf(question);
+                                event = this.getEvent(event);
+                                var height = event.currentTarget["clientHeight"];
+                                var y = event.offsetY;
+                                if (event.hasOwnProperty('layerX')) {
+                                    y = event.layerY - event.currentTarget["offsetTop"];
+                                }
+                                if (y > height / 2) index++;
+                                return index;
+                            };
+                            DragDropHelper.prototype.isSamePlace = function(event, question) {
+                                var prev = DragDropHelper.prevEvent;
+                                if (prev.question != question || Math.abs(event.clientX - prev.x) > 5 || Math.abs(event.clientY - prev.y) > 5) {
+                                    prev.question = question;
+                                    prev.x = event.clientX;
+                                    prev.y = event.clientY;
+                                    return false;
+                                }
+                                return true;
+                            };
+                            DragDropHelper.prototype.checkScrollY = function(e) {
+                                if (!this.scrollableElement) return;
+                                var y = this.getScrollableElementPosY(e);
+                                if (y < 0) return;
+                                this.isScrollStop = true;
+                                var height = this.scrollableElement["clientHeight"];
+                                if (y < DragDropHelper.ScrollOffset && y >= 0) {
+                                    this.isScrollStop = false;
+                                    this.doScrollY(-1);
+                                }
+                                if (height - y < DragDropHelper.ScrollOffset && height >= y) {
+                                    this.isScrollStop = false;
+                                    this.doScrollY(1);
+                                }
+                            };
+                            DragDropHelper.prototype.doScrollY = function(step) {
+                                var el = this.scrollableElement;
+                                var scrollY = el.scrollTop + step;
+                                if (scrollY < 0) {
+                                    this.isScrollStop = true;
+                                    return;
+                                }
+                                el.scrollTop = scrollY;
+                                var self = this;
+                                if (!this.isScrollStop) {
+                                    setTimeout(function() {
+                                        self.doScrollY(step);
+                                    }, DragDropHelper.ScrollDelay);
+                                }
+                            };
+                            DragDropHelper.prototype.getScrollableElementPosY = function(e) {
+                                if (!this.scrollableElement || !e.currentTarget) return -1;
+                                return e.offsetY + e.currentTarget["offsetTop"] - this.scrollableElement.offsetTop - this.scrollableElement.scrollTop;
+                            };
+                            DragDropHelper.prototype.getEvent = function(event) {
+                                return event["originalEvent"] ? event["originalEvent"] : event;
+                            };
+                            DragDropHelper.prototype.moveQuestionTo = function(targetQuestion, index) {
+                                if (targetQuestion == null) return;
+                                var page = this.survey.getPageByQuestion(targetQuestion);
+                                if (page == this.survey.currentPage && index == page.questions.indexOf(targetQuestion)) return;
+                                if (page) {
+                                    page.removeQuestion(targetQuestion);
+                                }
+                                this.survey.currentPage.addQuestion(targetQuestion, index);
+                                if (this.onModifiedCallback) this.onModifiedCallback();
+                            };
+                            DragDropHelper.prototype.getDataInfo = function(event) {
+                                var data = this.getData(event);
+                                if (!data) return null;
+                                var text = data.text.substr(DragDropHelper.dataStart.length);
+                                var array = text.split(',');
+                                var result = { json: null };
+                                for (var i = 0; i < array.length; i++) {
+                                    var item = array[i].split(':');
+                                    result[item[0]] = item[1];
+                                }
+                                result.json = data.json;
+                                return result;
+                            };
+                            DragDropHelper.prototype.getY = function(element) {
+                                var result = 0;
+                                while (element) {
+                                    result += element.offsetTop - element.scrollTop + element.clientTop;
+                                    element = element.offsetParent;
+                                }
+                                return result;
+                            };
+                            DragDropHelper.prototype.prepareData = function(event, questionType, questionName, json) {
+                                if (json === void 0) {
+                                    json = null;
+                                }
+                                var str = DragDropHelper.dataStart;
+                                if (questionType) str += "questiontype:" + questionType + ',';
+                                str += "questionname:" + questionName;
+                                this.setData(event, str, json);
+                                var targetQuestion = this.createTargetQuestion(questionType, questionName, json);
+                                DragDropHelper.dragData.targetQuestion = targetQuestion;
+                                this.survey["koDraggingSource"](targetQuestion);
+                            };
+                            DragDropHelper.prototype.setData = function(event, text, json) {
+                                if (json === void 0) {
+                                    json = null;
+                                }
+                                if (event["originalEvent"]) {
+                                    event = event["originalEvent"];
+                                }
+                                if (event.dataTransfer) {
+                                    event.dataTransfer.setData("Text", text);
+                                    event.dataTransfer.effectAllowed = "copy";
+                                }
+                                DragDropHelper.dragData = { text: text, json: json };
+                            };
+                            DragDropHelper.prototype.getData = function(event) {
+                                if (event["originalEvent"]) {
+                                    event = event["originalEvent"];
+                                }
+                                if (event.dataTransfer) {
+                                    var text = event.dataTransfer.getData("Text");
+                                    if (text) {
+                                        DragDropHelper.dragData.text = text;
+                                    }
+                                }
+                                return DragDropHelper.dragData;
+                            };
+                            DragDropHelper.prototype.clearData = function() {
+                                DragDropHelper.dragData = { text: "", json: null, targetQuestion: null };
+                                var prev = DragDropHelper.prevEvent;
+                                prev.question = null;
+                                prev.x = -1;
+                                prev.y = -1;
+                            };
+                            DragDropHelper.dataStart = "surveyjs,";
+                            DragDropHelper.dragData = { text: "", json: null };
+                            DragDropHelper.prevEvent = { question: null, x: -1, y: -1 };
+                            DragDropHelper.ScrollDelay = 30;
+                            DragDropHelper.ScrollOffset = 100;
+                            return DragDropHelper;
+                        }();
+
+                        /***/
+                    },
+                    /* 2 */
+                    /***/
+                    function(module, exports) {
 
-                var _editorLocalization = __webpack_require__(7);
+                        module.exports = __WEBPACK_EXTERNAL_MODULE_2__;
 
-                var _surveyKnockout = __webpack_require__(2);
+                        /***/
+                    },
+                    /* 3 */
+                    /***/
+                    function(module, exports) {
 
-                var Survey = _interopRequireWildcard(_surveyKnockout);
+                        "use strict";
 
-                function _interopRequireWildcard(obj) {
-                    if (obj && obj.__esModule) { return obj; } else {
-                        var newObj = {};
-                        if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } }
-                        newObj.default = obj;
-                        return newObj;
-                    }
-                }
+                        exports.__esModule = true;
+                        var __extends = undefined && undefined.__extends || function(d, b) {
+                            for (var p in b) {
+                                if (b.hasOwnProperty(p)) d[p] = b[p];
+                            }
 
-                var __extends = undefined && undefined.__extends || function(d, b) {
-                    for (var p in b) {
-                        if (b.hasOwnProperty(p)) d[p] = b[p];
-                    }
-
-                    function __() {
-                        this.constructor = d;
-                    }
-                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
-                };
-                var SurveyPropertyTriggersEditor = exports.SurveyPropertyTriggersEditor = function(_super) {
-                    __extends(SurveyPropertyTriggersEditor, _super);
-
-                    function SurveyPropertyTriggersEditor() {
-                        _super.call(this);
-                        this.availableTriggers = [];
-                        this.triggerClasses = [];
-                        var self = this;
-                        this.onDeleteClick = function() {
-                            self.koItems.remove(self.koSelected());
-                        };
-                        this.onAddClick = function(triggerType) {
-                            self.addItem(triggerType);
+                            function __() {
+                                this.constructor = d;
+                            }
+                            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                         };
-                        this.koSelected = ko.observable(null);
-                        this.koPages = ko.observableArray();
-                        this.koQuestions = ko.observableArray();
-                        this.triggerClasses = Survey.JsonObject.metaData.getChildrenClasses("surveytrigger", true);
-                        this.availableTriggers = this.getAvailableTriggers();
-                    }
-                    Object.defineProperty(SurveyPropertyTriggersEditor.prototype, "editorType", {
-                        get: function get() {
-                            return "triggers";
-                        },
-                        enumerable: true,
-                        configurable: true
-                    });
-                    SurveyPropertyTriggersEditor.prototype.onValueChanged = function() {
-                        _super.prototype.onValueChanged.call(this);
-                        if (this.object) {
-                            this.koPages(this.getNames(this.object.pages));
-                            this.koQuestions(this.getNames(this.object.getAllQuestions()));
-                        }
-                        if (this.koSelected) {
-                            this.koSelected(this.koItems().length > 0 ? this.koItems()[0] : null);
-                        }
-                    };
-                    SurveyPropertyTriggersEditor.prototype.addItem = function(triggerType) {
-                        var trigger = Survey.JsonObject.metaData.createClass(triggerType);
-                        var triggerItem = this.createPropertyTrigger(trigger);
-                        this.koItems.push(triggerItem);
-                        this.koSelected(triggerItem);
-                    };
-                    SurveyPropertyTriggersEditor.prototype.createEditorItem = function(item) {
-                        var jsonObj = new Survey.JsonObject();
-                        var trigger = Survey.JsonObject.metaData.createClass(item.getType());
-                        jsonObj.toObject(item, trigger);
-                        return this.createPropertyTrigger(trigger);
-                    };
-                    SurveyPropertyTriggersEditor.prototype.createItemFromEditorItem = function(editorItem) {
-                        var editorTrigger = editorItem;
-                        return editorTrigger.createTrigger();
-                    };
-                    SurveyPropertyTriggersEditor.prototype.getAvailableTriggers = function() {
-                        var result = [];
-                        for (var i = 0; i < this.triggerClasses.length; i++) {
-                            result.push(this.triggerClasses[i].name);
-                        }
-                        return result;
-                    };
-                    SurveyPropertyTriggersEditor.prototype.getNames = function(items) {
-                        var names = [];
-                        for (var i = 0; i < items.length; i++) {
-                            var item = items[i];
-                            if (item["name"]) {
-                                names.push(item["name"]);
+                        var SurveyPropertyEditorBase = exports.SurveyPropertyEditorBase = function() {
+                            function SurveyPropertyEditorBase() {
+                                this.value_ = null;
+                                this.options = null;
                             }
-                        }
-                        return names;
-                    };
-                    SurveyPropertyTriggersEditor.prototype.createPropertyTrigger = function(trigger) {
-                        var triggerItem = null;
-                        if (trigger.getType() == "visibletrigger") {
-                            triggerItem = new SurveyPropertyVisibleTrigger(trigger, this.koPages, this.koQuestions);
-                        }
-                        if (trigger.getType() == "setvaluetrigger") {
-                            triggerItem = new SurveyPropertySetValueTrigger(trigger, this.koQuestions);
-                        }
-                        if (!triggerItem) {
-                            triggerItem = new SurveyPropertyTrigger(trigger);
-                        }
-                        return triggerItem;
-                    };
-                    return SurveyPropertyTriggersEditor;
-                }(_propertyItemsEditor.SurveyPropertyItemsEditor);
-                var SurveyPropertyTrigger = exports.SurveyPropertyTrigger = function() {
-                    function SurveyPropertyTrigger(trigger) {
-                        this.trigger = trigger;
-                        this.operators = ["empty", "notempty", "equal", "notequal", "contains", "notcontains", "greater", "less", "greaterorequal", "lessorequal"];
-                        this.availableOperators = [];
-                        this.createOperators();
-                        this.triggerType = trigger.getType();
-                        this.koType = ko.observable(this.triggerType);
-                        this.koName = ko.observable(trigger.name);
-                        this.koOperator = ko.observable(trigger.operator);
-                        this.koValue = ko.observable(trigger.value);
-                        var self = this;
-                        this.koRequireValue = ko.computed(function() {
-                            return self.koOperator() != "empty" && self.koOperator() != "notempty";
+                            SurveyPropertyEditorBase.registerEditor = function(name, creator) {
+                                SurveyPropertyEditorBase.editorRegisteredList[name] = creator;
+                            };
+                            SurveyPropertyEditorBase.createEditor = function(editorType, func) {
+                                var creator = SurveyPropertyEditorBase.editorRegisteredList[editorType];
+                                if (!creator) creator = SurveyPropertyEditorBase.editorRegisteredList[SurveyPropertyEditorBase.defaultEditor];
+                                var propertyEditor = creator();
+                                propertyEditor.onChanged = func;
+                                return propertyEditor;
+                            };
+                            Object.defineProperty(SurveyPropertyEditorBase.prototype, "editorType", {
+                                get: function get() {
+                                    throw "editorType is not defined";
+                                },
+                                enumerable: true,
+                                configurable: true
+                            });
+                            SurveyPropertyEditorBase.prototype.getValueText = function(value) {
+                                return value;
+                            };
+                            Object.defineProperty(SurveyPropertyEditorBase.prototype, "value", {
+                                get: function get() {
+                                    return this.value_;
+                                },
+                                set: function set(value) {
+                                    value = this.getCorrectedValue(value);
+                                    this.setValueCore(value);
+                                    this.onValueChanged();
+                                },
+                                enumerable: true,
+                                configurable: true
+                            });
+                            SurveyPropertyEditorBase.prototype.setValueCore = function(value) {
+                                this.value_ = value;
+                            };
+                            SurveyPropertyEditorBase.prototype.setTitle = function(value) {};
+                            SurveyPropertyEditorBase.prototype.setObject = function(value) {};
+                            SurveyPropertyEditorBase.prototype.onValueChanged = function() {};
+                            SurveyPropertyEditorBase.prototype.getCorrectedValue = function(value) {
+                                return value;
+                            };
+                            SurveyPropertyEditorBase.defaultEditor = "string";
+                            SurveyPropertyEditorBase.editorRegisteredList = {};
+                            return SurveyPropertyEditorBase;
+                        }();
+                        var SurveyStringPropertyEditor = exports.SurveyStringPropertyEditor = function(_super) {
+                            __extends(SurveyStringPropertyEditor, _super);
+
+                            function SurveyStringPropertyEditor() {
+                                _super.call(this);
+                            }
+                            Object.defineProperty(SurveyStringPropertyEditor.prototype, "editorType", {
+                                get: function get() {
+                                    return "string";
+                                },
+                                enumerable: true,
+                                configurable: true
+                            });
+                            return SurveyStringPropertyEditor;
+                        }(SurveyPropertyEditorBase);
+                        var SurveyDropdownPropertyEditor = exports.SurveyDropdownPropertyEditor = function(_super) {
+                            __extends(SurveyDropdownPropertyEditor, _super);
+
+                            function SurveyDropdownPropertyEditor() {
+                                _super.call(this);
+                            }
+                            Object.defineProperty(SurveyDropdownPropertyEditor.prototype, "editorType", {
+                                get: function get() {
+                                    return "dropdown";
+                                },
+                                enumerable: true,
+                                configurable: true
+                            });
+                            return SurveyDropdownPropertyEditor;
+                        }(SurveyPropertyEditorBase);
+                        var SurveyBooleanPropertyEditor = exports.SurveyBooleanPropertyEditor = function(_super) {
+                            __extends(SurveyBooleanPropertyEditor, _super);
+
+                            function SurveyBooleanPropertyEditor() {
+                                _super.call(this);
+                            }
+                            Object.defineProperty(SurveyBooleanPropertyEditor.prototype, "editorType", {
+                                get: function get() {
+                                    return "boolean";
+                                },
+                                enumerable: true,
+                                configurable: true
+                            });
+                            return SurveyBooleanPropertyEditor;
+                        }(SurveyPropertyEditorBase);
+                        var SurveyNumberPropertyEditor = exports.SurveyNumberPropertyEditor = function(_super) {
+                            __extends(SurveyNumberPropertyEditor, _super);
+
+                            function SurveyNumberPropertyEditor() {
+                                _super.call(this);
+                            }
+                            Object.defineProperty(SurveyNumberPropertyEditor.prototype, "editorType", {
+                                get: function get() {
+                                    return "number";
+                                },
+                                enumerable: true,
+                                configurable: true
+                            });
+                            return SurveyNumberPropertyEditor;
+                        }(SurveyPropertyEditorBase);
+                        SurveyPropertyEditorBase.registerEditor("string", function() {
+                            return new SurveyStringPropertyEditor();
                         });
-                        this.koIsValid = ko.computed(function() {
-                            if (self.koName() && (!self.koRequireValue() || self.koValue())) return true;
-                            return false;
+                        SurveyPropertyEditorBase.registerEditor("dropdown", function() {
+                            return new SurveyDropdownPropertyEditor();
                         });
-                        this.koText = ko.computed(function() {
-                            self.koName();
-                            self.koOperator();
-                            self.koValue();
-                            return self.getText();
+                        SurveyPropertyEditorBase.registerEditor("boolean", function() {
+                            return new SurveyBooleanPropertyEditor();
+                        });
+                        SurveyPropertyEditorBase.registerEditor("number", function() {
+                            return new SurveyNumberPropertyEditor();
                         });
-                    }
-                    SurveyPropertyTrigger.prototype.createTrigger = function() {
-                        var trigger = Survey.JsonObject.metaData.createClass(this.triggerType);
-                        trigger.name = this.koName();
-                        trigger.operator = this.koOperator();
-                        trigger.value = this.koValue();
-                        return trigger;
-                    };
-                    SurveyPropertyTrigger.prototype.createOperators = function() {
-                        for (var i = 0; i < this.operators.length; i++) {
-                            var name = this.operators[i];
-                            this.availableOperators.push({ name: name, text: _editorLocalization.editorLocalization.getString("op." + name) });
-                        }
-                    };
-                    SurveyPropertyTrigger.prototype.getText = function() {
-                        if (!this.koIsValid()) return _editorLocalization.editorLocalization.getString("pe.triggerNotSet");
-                        return _editorLocalization.editorLocalization.getString("pe.triggerRunIf") + " '" + this.koName() + "' " + this.getOperatorText() + this.getValueText();
-                    };
-                    SurveyPropertyTrigger.prototype.getOperatorText = function() {
-                        var op = this.koOperator();
-                        for (var i = 0; i < this.availableOperators.length; i++) {
-                            if (this.availableOperators[i].name == op) return this.availableOperators[i].text;
-                        }
-                        return op;
-                    };
-                    SurveyPropertyTrigger.prototype.getValueText = function() {
-                        if (!this.koRequireValue()) return "";
-                        return " " + this.koValue();
-                    };
-                    return SurveyPropertyTrigger;
-                }();
-                var SurveyPropertyVisibleTrigger = exports.SurveyPropertyVisibleTrigger = function(_super) {
-                    __extends(SurveyPropertyVisibleTrigger, _super);
-
-                    function SurveyPropertyVisibleTrigger(trigger, koPages, koQuestions) {
-                        _super.call(this, trigger);
-                        this.trigger = trigger;
-                        this.pages = new SurveyPropertyTriggerObjects(_editorLocalization.editorLocalization.getString("pe.triggerMakePagesVisible"), koPages(), trigger.pages);
-                        this.questions = new SurveyPropertyTriggerObjects(_editorLocalization.editorLocalization.getString("pe.triggerMakeQuestionsVisible"), koQuestions(), trigger.questions);
-                    }
-                    SurveyPropertyVisibleTrigger.prototype.createTrigger = function() {
-                        var trigger = _super.prototype.createTrigger.call(this);
-                        trigger.pages = this.pages.koChoosen();
-                        trigger.questions = this.questions.koChoosen();
-                        return trigger;
-                    };
-                    return SurveyPropertyVisibleTrigger;
-                }(SurveyPropertyTrigger);
-                var SurveyPropertySetValueTrigger = exports.SurveyPropertySetValueTrigger = function(_super) {
-                    __extends(SurveyPropertySetValueTrigger, _super);
-
-                    function SurveyPropertySetValueTrigger(trigger, koQuestions) {
-                        _super.call(this, trigger);
-                        this.trigger = trigger;
-                        this.koQuestions = koQuestions;
-                        this.kosetToName = ko.observable(trigger.setToName);
-                        this.kosetValue = ko.observable(trigger.setValue);
-                        this.koisVariable = ko.observable(trigger.isVariable);
-                    }
-                    SurveyPropertySetValueTrigger.prototype.createTrigger = function() {
-                        var trigger = _super.prototype.createTrigger.call(this);
-                        trigger.setToName = this.kosetToName();
-                        trigger.setValue = this.kosetValue();
-                        trigger.isVariable = this.koisVariable();
-                        return trigger;
-                    };
-                    return SurveyPropertySetValueTrigger;
-                }(SurveyPropertyTrigger);
-                var SurveyPropertyTriggerObjects = exports.SurveyPropertyTriggerObjects = function() {
-                    function SurveyPropertyTriggerObjects(title, allObjects, choosenObjects) {
-                        this.title = title;
-                        this.koChoosen = ko.observableArray(choosenObjects);
-                        var array = [];
-                        for (var i = 0; i < allObjects.length; i++) {
-                            var item = allObjects[i];
-                            if (choosenObjects.indexOf(item) < 0) {
-                                array.push(item);
-                            }
-                        }
-                        this.koObjects = ko.observableArray(array);
-                        this.koSelected = ko.observable();
-                        this.koChoosenSelected = ko.observable();
-                        var self = this;
-                        this.onDeleteClick = function() {
-                            self.deleteItem();
-                        };
-                        this.onAddClick = function() {
-                            self.addItem();
-                        };
-                    }
-                    SurveyPropertyTriggerObjects.prototype.deleteItem = function() {
-                        this.changeItems(this.koChoosenSelected(), this.koChoosen, this.koObjects);
-                    };
-                    SurveyPropertyTriggerObjects.prototype.addItem = function() {
-                        this.changeItems(this.koSelected(), this.koObjects, this.koChoosen);
-                    };
-                    SurveyPropertyTriggerObjects.prototype.changeItems = function(item, removedFrom, addTo) {
-                        removedFrom.remove(item);
-                        addTo.push(item);
-                        removedFrom.sort();
-                        addTo.sort();
-                    };
-                    return SurveyPropertyTriggerObjects;
-                }();
-                _propertyEditorBase.SurveyPropertyEditorBase.registerEditor("triggers", function() {
-                    return new SurveyPropertyTriggersEditor();
-                });
 
-                /***/
-            },
-            /* 16 */
-            /***/
-            function(module, exports, __webpack_require__) {
+                        /***/
+                    },
+                    /* 4 */
+                    /***/
+                    function(module, exports, __webpack_require__) {
 
-                "use strict";
+                        "use strict";
 
-                exports.__esModule = true;
-                exports.SurveyPagesEditor = undefined;
+                        exports.__esModule = true;
+                        exports.SurveyPropertyTextItemsEditor = undefined;
 
-                var _surveyHelper = __webpack_require__(8);
+                        var _propertyItemsEditor = __webpack_require__(5);
 
-                var SurveyPagesEditor = exports.SurveyPagesEditor = function() {
-                    function SurveyPagesEditor(onAddNewPageCallback, onSelectPageCallback, onMovePageCallback, onDeletePageCallback) {
-                        if (onAddNewPageCallback === void 0) {
-                            onAddNewPageCallback = null;
-                        }
-                        if (onSelectPageCallback === void 0) {
-                            onSelectPageCallback = null;
-                        }
-                        if (onMovePageCallback === void 0) {
-                            onMovePageCallback = null;
-                        }
-                        if (onDeletePageCallback === void 0) {
-                            onDeletePageCallback = null;
+                        var _propertyEditorBase = __webpack_require__(3);
+
+                        var _surveyHelper = __webpack_require__(8);
+
+                        var _editorLocalization = __webpack_require__(7);
+
+                        var _propertyValidatorsEditor = __webpack_require__(9);
+
+                        var _surveyKnockout = __webpack_require__(2);
+
+                        var Survey = _interopRequireWildcard(_surveyKnockout);
+
+                        function _interopRequireWildcard(obj) {
+                            if (obj && obj.__esModule) { return obj; } else {
+                                var newObj = {};
+                                if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } }
+                                newObj.default = obj;
+                                return newObj;
+                            }
                         }
-                        this.draggingPage = null;
-                        this.koPages = ko.observableArray();
-                        this.koIsValid = ko.observable(false);
-                        this.onAddNewPageCallback = onAddNewPageCallback;
-                        this.onSelectPageCallback = onSelectPageCallback;
-                        this.onMovePageCallback = onMovePageCallback;
-                        this.onDeletePageCallback = onDeletePageCallback;
-                        var self = this;
-                        this.selectPageClick = function(pageItem) {
-                            if (self.onSelectPageCallback) {
-                                self.onSelectPageCallback(pageItem.page);
+
+                        var __extends = undefined && undefined.__extends || function(d, b) {
+                            for (var p in b) {
+                                if (b.hasOwnProperty(p)) d[p] = b[p];
                             }
+
+                            function __() {
+                                this.constructor = d;
+                            }
+                            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                         };
-                        this.keyDown = function(el, e) {
-                            self.onKeyDown(el, e);
-                        };
-                        this.dragStart = function(el) {
-                            self.draggingPage = el;
-                        };
-                        this.dragOver = function(el) {};
-                        this.dragEnd = function() {
-                            self.draggingPage = null;
-                        };
-                        this.dragDrop = function(el) {
-                            self.moveDraggingPageTo(el);
-                        };
-                    }
-                    Object.defineProperty(SurveyPagesEditor.prototype, "survey", {
-                        get: function get() {
-                            return this.surveyValue;
-                        },
-                        set: function set(value) {
-                            this.surveyValue = value;
-                            this.koIsValid(this.surveyValue != null);
-                            this.updatePages();
-                        },
-                        enumerable: true,
-                        configurable: true
-                    });
-                    SurveyPagesEditor.prototype.setSelectedPage = function(page) {
-                        var pages = this.koPages();
-                        for (var i = 0; i < pages.length; i++) {
-                            pages[i].koSelected(pages[i].page == page);
-                        }
-                    };
-                    SurveyPagesEditor.prototype.addNewPageClick = function() {
-                        if (this.onAddNewPageCallback) {
-                            this.onAddNewPageCallback();
-                        }
-                    };
-                    SurveyPagesEditor.prototype.removePage = function(page) {
-                        var index = this.getIndexByPage(page);
-                        if (index > -1) {
-                            this.koPages.splice(index, 1);
-                        }
-                    };
-                    SurveyPagesEditor.prototype.changeName = function(page) {
-                        var index = this.getIndexByPage(page);
-                        if (index > -1) {
-                            this.koPages()[index].title(_surveyHelper.SurveyHelper.getObjectName(page));
-                        }
-                    };
-                    SurveyPagesEditor.prototype.getIndexByPage = function(page) {
-                        var pages = this.koPages();
-                        for (var i = 0; i < pages.length; i++) {
-                            if (pages[i].page == page) return i;
-                        }
-                        return -1;
-                    };
-                    SurveyPagesEditor.prototype.onKeyDown = function(el, e) {
-                        if (this.koPages().length <= 1) return;
-                        var pages = this.koPages();
-                        var pageIndex = -1;
-                        for (var i = 0; i < pages.length; i++) {
-                            if (pages[i].page && pages[i].koSelected()) {
-                                pageIndex = i;
+                        var SurveyPropertyTextItemsEditor = exports.SurveyPropertyTextItemsEditor = function(_super) {
+                            __extends(SurveyPropertyTextItemsEditor, _super);
+
+                            function SurveyPropertyTextItemsEditor() {
+                                _super.call(this);
                             }
-                        }
-                        if (pageIndex < 0) return;
-                        if (e.keyCode == 46 && this.onDeletePageCallback) this.onDeletePageCallback(el.page);
-                        if ((e.keyCode == 37 || e.keyCode == 39) && this.onSelectPageCallback) {
-                            pageIndex += e.keyCode == 37 ? -1 : 1;
-                            if (pageIndex < 0) pageIndex = pages.length - 1;
-                            if (pageIndex >= pages.length) pageIndex = 0;
-                            var page = pages[pageIndex].page;
-                            this.onSelectPageCallback(page);
-                            this.setSelectedPage(page);
-                        }
-                    };
-                    SurveyPagesEditor.prototype.updatePages = function() {
-                        if (this.surveyValue == null) {
-                            this.koPages([]);
-                            return;
-                        }
-                        var pages = [];
-                        for (var i = 0; i < this.surveyValue.pages.length; i++) {
-                            var page = this.surveyValue.pages[i];
-                            pages.push({
-                                title: ko.observable(_surveyHelper.SurveyHelper.getObjectName(page)),
-                                page: page,
-                                koSelected: ko.observable(false)
+                            Object.defineProperty(SurveyPropertyTextItemsEditor.prototype, "editorType", {
+                                get: function get() {
+                                    return "textitems";
+                                },
+                                enumerable: true,
+                                configurable: true
                             });
-                        }
-                        this.koPages(pages);
-                    };
-                    SurveyPagesEditor.prototype.moveDraggingPageTo = function(toPage) {
-                        if (toPage == null || toPage == this.draggingPage) {
-                            this.draggingPage = null;
-                            return;
-                        }
-                        if (this.draggingPage == null) return;
-                        var index = this.koPages().indexOf(this.draggingPage);
-                        var indexTo = this.koPages().indexOf(toPage);
-                        if (this.onMovePageCallback) {
-                            this.onMovePageCallback(index, indexTo);
-                        }
-                    };
-                    return SurveyPagesEditor;
-                }();
-
-                /***/
-            },
-            /* 17 */
-            /***/
-            function(module, exports, __webpack_require__) {
+                            SurveyPropertyTextItemsEditor.prototype.createNewEditorItem = function() {
+                                var objs = [];
+                                var items = this.koItems();
+                                for (var i = 0; i < items.length; i++) {
+                                    objs.push({ name: items[i].koName() });
+                                }
+                                var editItem = { koName: ko.observable(_surveyHelper.SurveyHelper.getNewName(objs, "text")), koTitle: ko.observable() };
+                                this.createValidatorsEditor(editItem, []);
+                                return editItem;
+                            };
+                            SurveyPropertyTextItemsEditor.prototype.createEditorItem = function(item) {
+                                var editItem = { koName: ko.observable(item.name), koTitle: ko.observable(item.title) };
+                                this.createValidatorsEditor(editItem, item.validators);
+                                return editItem;
+                            };
+                            SurveyPropertyTextItemsEditor.prototype.createItemFromEditorItem = function(editorItem) {
+                                var itemText = new Survey.MultipleTextItem(editorItem.koName(), editorItem.koTitle());
+                                itemText.validators = editorItem.validators;
+                                return itemText;
+                            };
+                            SurveyPropertyTextItemsEditor.prototype.createValidatorsEditor = function(item, validators) {
+                                item.validators = validators.slice();
+                                var self = this;
+                                var onItemChanged = function onItemChanged(newValue) {
+                                    item.validators = newValue;
+                                    item.koText(self.getText(newValue.length));
+                                };
+                                var propertyEditor = new _propertyValidatorsEditor.SurveyPropertyValidatorsEditor();
+                                item.editor = propertyEditor;
+                                propertyEditor.onChanged = function(newValue) {
+                                    onItemChanged(newValue);
+                                };
+                                propertyEditor.object = item;
+                                propertyEditor.title(_editorLocalization.editorLocalization.getString("pe.editProperty")["format"]("Validators"));
+                                propertyEditor.value = item.validators;
+                                item.koText = ko.observable(this.getText(validators.length));
+                            };
+                            SurveyPropertyTextItemsEditor.prototype.getText = function(length) {
+                                return _editorLocalization.editorLocalization.getString("pe.items")["format"](length);
+                            };
+                            return SurveyPropertyTextItemsEditor;
+                        }(_propertyItemsEditor.SurveyPropertyItemsEditor);
+                        _propertyEditorBase.SurveyPropertyEditorBase.registerEditor("textitems", function() {
+                            return new SurveyPropertyTextItemsEditor();
+                        });
 
-                "use strict";
+                        /***/
+                    },
+                    /* 5 */
+                    /***/
+                    function(module, exports, __webpack_require__) {
 
-                exports.__esModule = true;
-                exports.SurveyTextWorker = undefined;
+                        "use strict";
 
-                var _json = __webpack_require__(18);
+                        exports.__esModule = true;
+                        exports.SurveyPropertyItemsEditor = undefined;
 
-                var _surveyKnockout = __webpack_require__(2);
+                        var _propertyModalEditor = __webpack_require__(6);
 
-                var Survey = _interopRequireWildcard(_surveyKnockout);
+                        var _editorLocalization = __webpack_require__(7);
 
-                function _interopRequireWildcard(obj) {
-                    if (obj && obj.__esModule) { return obj; } else {
-                        var newObj = {};
-                        if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } }
-                        newObj.default = obj;
-                        return newObj;
-                    }
-                }
+                        var __extends = undefined && undefined.__extends || function(d, b) {
+                            for (var p in b) {
+                                if (b.hasOwnProperty(p)) d[p] = b[p];
+                            }
 
-                var TextParserPropery = function() {
-                    function TextParserPropery() {}
-                    return TextParserPropery;
-                }();
-                var SurveyTextWorker = exports.SurveyTextWorker = function() {
-                    function SurveyTextWorker(text) {
-                        this.text = text;
-                        if (!this.text || this.text.trim() == "") {
-                            this.text = "{}";
-                        }
-                        this.errors = [];
-                        this.process();
-                    }
-                    Object.defineProperty(SurveyTextWorker.prototype, "survey", {
-                        get: function get() {
-                            return this.surveyValue;
-                        },
-                        enumerable: true,
-                        configurable: true
-                    });
-                    Object.defineProperty(SurveyTextWorker.prototype, "isJsonCorrect", {
-                        get: function get() {
-                            return this.surveyValue != null;
-                        },
-                        enumerable: true,
-                        configurable: true
-                    });
-                    SurveyTextWorker.prototype.process = function() {
-                        try {
-                            this.jsonValue = new _json.SurveyJSON5(1).parse(this.text);
-                        } catch (error) {
-                            this.errors.push({ pos: { start: error.at, end: -1 }, text: error.message });
-                        }
-                        if (this.jsonValue != null) {
-                            this.updateJsonPositions(this.jsonValue);
-                            this.surveyValue = new Survey.Survey(this.jsonValue);
-                            if (this.surveyValue.jsonErrors != null) {
-                                for (var i = 0; i < this.surveyValue.jsonErrors.length; i++) {
-                                    var error = this.surveyValue.jsonErrors[i];
-                                    this.errors.push({ pos: { start: error.at, end: -1 }, text: error.getFullDescription() });
+                            function __() {
+                                this.constructor = d;
+                            }
+                            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+                        };
+                        var SurveyPropertyItemsEditor = exports.SurveyPropertyItemsEditor = function(_super) {
+                            __extends(SurveyPropertyItemsEditor, _super);
+
+                            function SurveyPropertyItemsEditor() {
+                                _super.call(this);
+                                this.koItems = ko.observableArray();
+                                this.value = [];
+                                var self = this;
+                                self.onDeleteClick = function(item) {
+                                    self.koItems.remove(item);
+                                };
+                                self.onClearClick = function(item) {
+                                    self.koItems.removeAll();
+                                };
+                                self.onAddClick = function() {
+                                    self.AddItem();
+                                };
+                                self.onMoveUpClick = function(item) {
+                                    self.moveUp(item);
+                                };
+                                self.onMoveDownClick = function(item) {
+                                    self.moveDown(item);
+                                };
+                            }
+                            SurveyPropertyItemsEditor.prototype.getValueText = function(value) {
+                                var len = value ? value.length : 0;
+                                return _editorLocalization.editorLocalization.getString("pe.items")["format"](len);
+                            };
+                            SurveyPropertyItemsEditor.prototype.getCorrectedValue = function(value) {
+                                if (value == null || !Array.isArray(value)) value = [];
+                                return value;
+                            };
+                            SurveyPropertyItemsEditor.prototype.AddItem = function() {
+                                this.koItems.push(this.createNewEditorItem());
+                            };
+                            SurveyPropertyItemsEditor.prototype.moveUp = function(item) {
+                                var arr = this.koItems();
+                                var index = arr.indexOf(item);
+                                if (index < 1) return;
+                                arr[index] = arr[index - 1];
+                                arr[index - 1] = item;
+                                this.koItems(arr);
+                            };
+                            SurveyPropertyItemsEditor.prototype.moveDown = function(item) {
+                                var arr = this.koItems();
+                                var index = arr.indexOf(item);
+                                if (index < 0 || index >= arr.length - 1) return;
+                                arr[index] = arr[index + 1];
+                                arr[index + 1] = item;
+                                this.koItems(arr);
+                            };
+                            SurveyPropertyItemsEditor.prototype.onValueChanged = function() {
+                                this.koItems(this.getItemsFromValue());
+                            };
+                            SurveyPropertyItemsEditor.prototype.getItemsFromValue = function() {
+                                var items = [];
+                                var value = this.value;
+                                for (var i = 0; i < value.length; i++) {
+                                    items.push(this.createEditorItem(value[i]));
+                                }
+                                return items;
+                            };
+                            SurveyPropertyItemsEditor.prototype.onBeforeApply = function() {
+                                var items = [];
+                                var internalItems = this.koItems();
+                                for (var i = 0; i < internalItems.length; i++) {
+                                    items.push(this.createItemFromEditorItem(internalItems[i]));
                                 }
+                                this.setValueCore(items);
+                            };
+                            SurveyPropertyItemsEditor.prototype.createNewEditorItem = function() {
+                                throw "Override 'createNewEditorItem' method";
+                            };
+                            SurveyPropertyItemsEditor.prototype.createEditorItem = function(item) {
+                                return item;
+                            };
+                            SurveyPropertyItemsEditor.prototype.createItemFromEditorItem = function(editorItem) {
+                                return editorItem;
+                            };
+                            return SurveyPropertyItemsEditor;
+                        }(_propertyModalEditor.SurveyPropertyModalEditor);
+
+                        /***/
+                    },
+                    /* 6 */
+                    /***/
+                    function(module, exports, __webpack_require__) {
+
+                        "use strict";
+
+                        exports.__esModule = true;
+                        exports.SurveyPropertyHtmlEditor = exports.SurveyPropertyTextEditor = exports.SurveyPropertyModalEditor = undefined;
+
+                        var _propertyEditorBase = __webpack_require__(3);
+
+                        var __extends = undefined && undefined.__extends || function(d, b) {
+                            for (var p in b) {
+                                if (b.hasOwnProperty(p)) d[p] = b[p];
                             }
-                        }
-                        this.surveyObjects = this.createSurveyObjects();
-                        this.setEditorPositionByChartAt(this.surveyObjects);
-                        this.setEditorPositionByChartAt(this.errors);
-                    };
-                    SurveyTextWorker.prototype.updateJsonPositions = function(jsonObj) {
-                        jsonObj["pos"]["self"] = jsonObj;
-                        for (var key in jsonObj) {
-                            var obj = jsonObj[key];
-                            if (obj && obj["pos"]) {
-                                jsonObj["pos"][key] = obj["pos"];
-                                this.updateJsonPositions(obj);
+
+                            function __() {
+                                this.constructor = d;
                             }
-                        }
-                    };
-                    SurveyTextWorker.prototype.createSurveyObjects = function() {
-                        var result = [];
-                        if (this.surveyValue == null) return result;
-                        this.isSurveyAsPage = false;
-                        for (var i = 0; i < this.surveyValue.pages.length; i++) {
-                            var page = this.surveyValue.pages[i];
-                            if (i == 0 && !page["pos"]) {
-                                page["pos"] = this.surveyValue["pos"];
-                                this.isSurveyAsPage = true;
+                            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+                        };
+                        var SurveyPropertyModalEditor = exports.SurveyPropertyModalEditor = function(_super) {
+                            __extends(SurveyPropertyModalEditor, _super);
+
+                            function SurveyPropertyModalEditor() {
+                                _super.call(this);
+                                this.title = ko.observable();
+                                var self = this;
+                                self.onApplyClick = function() {
+                                    self.apply();
+                                };
+                                self.onResetClick = function() {
+                                    self.reset();
+                                };
+                                self.onUploadClick = function() {
+                                    self.upload();
+                                };
                             }
-                            result.push(page);
-                            for (var j = 0; j < page.questions.length; j++) {
-                                result.push(page.questions[j]);
+                            SurveyPropertyModalEditor.prototype.setTitle = function(value) {
+                                this.title(value);
+                            };
+                            SurveyPropertyModalEditor.prototype.upload = function(value) {
+                                $("#uploadModal").modal('toggle').css({ 'width': '100%' });
+                            };
+                            SurveyPropertyModalEditor.prototype.hasError = function() {
+                                return false;
+                            };
+                            SurveyPropertyModalEditor.prototype.onBeforeApply = function() {};
+                            SurveyPropertyModalEditor.prototype.reset = function() {
+                                this.value = "";
+                                this.value = this.value;
+                            };
+                            SurveyPropertyModalEditor.prototype.setObject = function(value) {
+                                this.object = value;
+                            };
+                            Object.defineProperty(SurveyPropertyModalEditor.prototype, "isEditable", {
+                                get: function get() {
+                                    return false;
+                                },
+                                enumerable: true,
+                                configurable: true
+                            });
+                            SurveyPropertyModalEditor.prototype.apply = function() {
+                                debugger;
+                                if (this.hasError()) return;
+                                this.onBeforeApply();
+                                if (this.onChanged) {
+                                    this.onChanged(this.value);
+                                }
+                            };
+                            return SurveyPropertyModalEditor;
+                        }(_propertyEditorBase.SurveyPropertyEditorBase);
+                        var SurveyPropertyTextEditor = exports.SurveyPropertyTextEditor = function(_super) {
+                            __extends(SurveyPropertyTextEditor, _super);
+
+                            function SurveyPropertyTextEditor() {
+                                _super.call(this);
+                                this.koValue = ko.observable();
                             }
-                        }
-                        return result;
-                    };
-                    SurveyTextWorker.prototype.setEditorPositionByChartAt = function(objects) {
-                        if (objects == null || objects.length == 0) return;
-                        var position = { row: 0, column: 0 };
-                        var atObjectsArray = this.getAtArray(objects);
-                        var startAt = 0;
-                        for (var i = 0; i < atObjectsArray.length; i++) {
-                            var at = atObjectsArray[i].at;
-                            position = this.getPostionByChartAt(position, startAt, at);
-                            var obj = atObjectsArray[i].obj;
-                            if (!obj.position) obj.position = {};
-                            if (at == obj.pos.start) {
-                                obj.position.start = position;
-                            } else {
-                                if (at == obj.pos.end) {
-                                    obj.position.end = position;
+                            Object.defineProperty(SurveyPropertyTextEditor.prototype, "editorType", {
+                                get: function get() {
+                                    return "text";
+                                },
+                                enumerable: true,
+                                configurable: true
+                            });
+                            Object.defineProperty(SurveyPropertyTextEditor.prototype, "isEditable", {
+                                get: function get() {
+                                    return true;
+                                },
+                                enumerable: true,
+                                configurable: true
+                            });
+                            SurveyPropertyTextEditor.prototype.getValueText = function(value) {
+                                if (!value) return null;
+                                var str = value;
+                                if (str.length > 20) {
+                                    str = str.substr(0, 20) + "...";
                                 }
+                                return str;
+                            };
+                            SurveyPropertyTextEditor.prototype.onValueChanged = function() {
+                                this.koValue(this.value);
+                            };
+                            SurveyPropertyTextEditor.prototype.onBeforeApply = function() {
+                                this.setValueCore(this.koValue());
+                            };
+                            return SurveyPropertyTextEditor;
+                        }(SurveyPropertyModalEditor);
+                        var SurveyPropertyHtmlEditor = exports.SurveyPropertyHtmlEditor = function(_super) {
+                            __extends(SurveyPropertyHtmlEditor, _super);
+
+                            function SurveyPropertyHtmlEditor() {
+                                _super.call(this);
                             }
-                            startAt = at;
-                        }
-                    };
-                    SurveyTextWorker.prototype.getPostionByChartAt = function(startPosition, startAt, at) {
-                        var result = { row: startPosition.row, column: startPosition.column };
-                        var curChar = startAt;
-                        while (curChar < at) {
-                            if (this.text.charAt(curChar) == SurveyTextWorker.newLineChar) {
-                                result.row++;
-                                result.column = 0;
-                            } else {
-                                result.column++;
+                            Object.defineProperty(SurveyPropertyHtmlEditor.prototype, "editorType", {
+                                get: function get() {
+                                    return "html";
+                                },
+                                enumerable: true,
+                                configurable: true
+                            });
+                            return SurveyPropertyHtmlEditor;
+                        }(SurveyPropertyTextEditor);
+                        _propertyEditorBase.SurveyPropertyEditorBase.registerEditor("text", function() {
+                            return new SurveyPropertyTextEditor();
+                        });
+                        _propertyEditorBase.SurveyPropertyEditorBase.registerEditor("html", function() {
+                            return new SurveyPropertyHtmlEditor();
+                        });
+
+                        /***/
+                    },
+                    /* 7 */
+                    /***/
+                    function(module, exports) {
+
+                        "use strict";
+
+                        exports.__esModule = true;
+                        var editorLocalization = exports.editorLocalization = {
+                            currentLocale: "",
+                            locales: {},
+                            getString: function getString(strName, locale) {
+                                if (locale === void 0) {
+                                    locale = null;
+                                }
+                                if (!locale) locale = this.currentLocale;
+                                var loc = locale ? this.locales[this.currentLocale] : defaultStrings;
+                                if (!loc) loc = defaultStrings;
+                                var path = strName.split('.');
+                                var obj = loc;
+                                for (var i = 0; i < path.length; i++) {
+                                    obj = obj[path[i]];
+                                    if (!obj) {
+                                        if (loc === defaultStrings) return path[i];
+                                        return this.getString(strName, "en");
+                                    }
+                                }
+                                return obj;
+                            },
+                            getPropertyName: function getPropertyName(strName, local) {
+                                if (local === void 0) {
+                                    local = null;
+                                }
+                                var obj = this.getProperty(strName, local);
+                                if (obj["name"]) return obj["name"];
+                                return obj;
+                            },
+                            getPropertyTitle: function getPropertyTitle(strName, local) {
+                                if (local === void 0) {
+                                    local = null;
+                                }
+                                var obj = this.getProperty(strName, local);
+                                if (obj["title"]) return obj["title"];
+                                return "";
+                            },
+                            getProperty: function getProperty(strName, local) {
+                                if (local === void 0) {
+                                    local = null;
+                                }
+                                var obj = this.getString("p." + strName, local);
+                                if (obj !== strName) return obj;
+                                var pos = strName.indexOf('_');
+                                if (pos < -1) return obj;
+                                strName = strName.substr(pos + 1);
+                                return this.getString("p." + strName, local);
+                            },
+                            getLocales: function getLocales() {
+                                var res = [];
+                                res.push("");
+                                for (var key in this.locales) {
+                                    res.push(key);
+                                }
+                                return res;
                             }
-                            curChar++;
-                        }
-                        return result;
-                    };
-                    SurveyTextWorker.prototype.getAtArray = function(objects) {
-                        var result = [];
-                        for (var i = 0; i < objects.length; i++) {
-                            var obj = objects[i];
-                            var pos = obj.pos;
-                            if (!pos) continue;
-                            result.push({ at: pos.start, obj: obj });
-                            if (pos.end > 0) {
-                                result.push({ at: pos.end, obj: obj });
+                        };
+                        var defaultStrings = exports.defaultStrings = {
+                            //survey templates
+                            survey: {
+                                dropQuestion: "Please drop a question here.",
+                                copy: "Copy",
+                                addToToolbox: "Add to toolbox"
+                            },
+                            //questionTypes
+                            qt: {
+                                checkbox: "Checkbox",
+                                comment: "Comment",
+                                dropdown: "Dropdown",
+                                file: "File",
+                                html: "Html",
+                                matrix: "Matrix (single choice)",
+                                matrixdropdown: "Matrix (multiple choice)",
+                                matrixdynamic: "Matrix (dynamic rows)",
+                                multipletext: "Multiple Text",
+                                radiogroup: "Radiogroup",
+                                rating: "Rating",
+                                text: "Single Input"
+                            },
+                            //Strings in Editor
+                            ed: {
+                                newPageName: "page",
+                                newQuestionName: "question",
+                                testSurvey: "Test Survey",
+                                testSurveyAgain: "Test Survey Again",
+                                testSurveyWidth: "Survey width: ",
+                                embedSurvey: "Embed Survey",
+                                saveSurvey: "Save Survey",
+                                designer: "Survey Designer",
+                                jsonEditor: "JSON Editor",
+                                undo: "Undo",
+                                redo: "Redo",
+                                options: "Options",
+                                generateValidJSON: "Generate Valid JSON",
+                                generateReadableJSON: "Generate Readable JSON",
+                                toolbox: "Toolbox",
+                                delSelObject: "Delete selected object",
+                                correctJSON: "Please correct JSON.",
+                                surveyResults: "Survey Result: "
+                            },
+                            //Property Editors
+                            pe: {
+                                apply: "Apply",
+                                reset: "Reset",
+                                close: "Close",
+                                delete: "Delete",
+                                addNew: "Add New",
+                                removeAll: "Remove All",
+                                edit: "Edit",
+                                empty: "<empty>",
+                                testService: "Test the service",
+                                value: "Value",
+                                text: "Text",
+                                required: "Required?",
+                                hasOther: "Has Other Item",
+                                name: "Name",
+                                title: "Title",
+                                cellType: "Cell Type",
+                                colCount: "Column Count",
+                                editProperty: "Edit property '{0}'",
+                                items: "[ Items: {0} ]",
+                                enterNewValue: "Please, enter the value.",
+                                noquestions: "There is no any question in the survey.",
+                                createtrigger: "Please create a trigger",
+                                triggerOn: "On ",
+                                triggerMakePagesVisible: "Make pages visible:",
+                                triggerMakeQuestionsVisible: "Make questions visible:",
+                                triggerCompleteText: "Complete the survey if succeed.",
+                                triggerNotSet: "The trigger is not set",
+                                triggerRunIf: "Run if",
+                                triggerSetToName: "Change value of: ",
+                                triggerSetValue: "to: ",
+                                triggerIsVariable: "Do not put the variable into the survey result.",
+                                verbChangeType: "Change type ",
+                                verbChangePage: "Change page ",
+                                upload: "Images"
+                            },
+                            //Operators
+                            op: {
+                                empty: "is empty",
+                                notempty: "is not empty",
+                                equal: "equals",
+                                notequal: "not equals",
+                                contains: "contains",
+                                notcontains: "not contains",
+                                greater: "greater",
+                                less: "less",
+                                greaterorequal: "greater or equals",
+                                lessorequal: "Less or Equals"
+                            },
+                            //Embed window
+                            ew: {
+                                knockout: "Use Knockout version",
+                                react: "Use React version",
+                                bootstrap: "For bootstrap framework",
+                                standard: "No bootstrap",
+                                showOnPage: "Show survey on a page",
+                                showInWindow: "Show survey in a window",
+                                loadFromServer: "Load Survey JSON from server",
+                                titleScript: "Scripts and styles",
+                                titleHtml: "HTML",
+                                titleJavaScript: "JavaScript"
+                            },
+                            //Properties
+                            p: {
+                                name: "name",
+                                title: { name: "title", title: "Leave it empty, if it is the same as 'Name'" },
+                                survey_title: { name: "title", title: "It will be shown on every page." },
+                                page_title: { name: "title", title: "Page title" }
                             }
-                        }
-                        return result.sort(function(el1, el2) {
-                            if (el1.at > el2.at) return 1;
-                            if (el1.at < el2.at) return -1;
-                            return 0;
-                        });
-                    };
-                    return SurveyTextWorker;
-                }();
+                        };
+                        editorLocalization.locales["en"] = defaultStrings;
 
-                /***/
-            },
-            /* 18 */
-            /***/
-            function(module, exports) {
+                        /***/
+                    },
+                    /* 8 */
+                    /***/
+                    function(module, exports, __webpack_require__) {
+
+                        "use strict";
+
+                        exports.__esModule = true;
+                        exports.SurveyHelper = exports.ObjType = undefined;
+
+                        var _editorLocalization = __webpack_require__(7);
+
+                        var ObjType = exports.ObjType = undefined;
+                        (function(ObjType) {
+                            ObjType[ObjType["Unknown"] = 0] = "Unknown";
+                            ObjType[ObjType["Survey"] = 1] = "Survey";
+                            ObjType[ObjType["Page"] = 2] = "Page";
+                            ObjType[ObjType["Question"] = 3] = "Question";
+                        })(ObjType || (exports.ObjType = ObjType = {}));
+                        var SurveyHelper = exports.SurveyHelper = function() {
+                            function SurveyHelper() {}
+                            SurveyHelper.getNewPageName = function(objs) {
+                                return SurveyHelper.getNewName(objs, _editorLocalization.editorLocalization.getString("ed.newPageName"));
+                            };
+                            SurveyHelper.getNewQuestionName = function(objs) {
+                                return SurveyHelper.getNewName(objs, _editorLocalization.editorLocalization.getString("ed.newQuestionName"));
+                            };
+                            SurveyHelper.getNewName = function(objs, baseName) {
+                                var hash = {};
+                                for (var i = 0; i < objs.length; i++) {
+                                    hash[objs[i].name] = true;
+                                }
+                                var num = 1;
+                                while (true) {
+                                    if (!hash[baseName + num.toString()]) break;
+                                    num++;
+                                }
+                                return baseName + num.toString();
+                            };
+                            SurveyHelper.getObjectType = function(obj) {
+                                if (!obj || !obj["getType"]) return ObjType.Unknown;
+                                if (obj.getType() == "page") return ObjType.Page;
+                                if (obj.getType() == "survey") return ObjType.Survey;
+                                if (obj["name"]) return ObjType.Question;
+                                return ObjType.Unknown;
+                            };
+                            SurveyHelper.getObjectName = function(obj) {
+                                if (obj["name"]) return obj["name"];
+                                var objType = SurveyHelper.getObjectType(obj);
+                                if (objType != ObjType.Page) return "";
+                                var data = obj.data;
+                                var index = data.pages.indexOf(obj);
+                                return "[Page " + (index + 1) + "]";
+                            };
+                            return SurveyHelper;
+                        }();
 
-                'use strict';
+                        /***/
+                    },
+                    /* 9 */
+                    /***/
+                    function(module, exports, __webpack_require__) {
 
-                exports.__esModule = true;
+                        "use strict";
 
-                var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) { return typeof obj; } : function(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
+                        exports.__esModule = true;
+                        exports.SurveyPropertyValidatorItem = exports.SurveyPropertyValidatorsEditor = undefined;
 
-                // This file is based on JSON5, http://json5.org/
-                // The modification for getting object and properties location 'at' were maden.
-                var SurveyJSON5 = exports.SurveyJSON5 = function() {
-                    function SurveyJSON5(parseType) {
-                        if (parseType === void 0) {
-                            parseType = 0;
-                        }
-                        this.parseType = parseType;
-                    }
-                    SurveyJSON5.prototype.parse = function(source, reviver, startFrom, endAt) {
-                        if (reviver === void 0) {
-                            reviver = null;
-                        }
-                        if (startFrom === void 0) {
-                            startFrom = 0;
-                        }
-                        if (endAt === void 0) {
-                            endAt = -1;
-                        }
-                        var result;
-                        this.text = String(source);
-                        this.at = startFrom;
-                        this.endAt = endAt;
-                        this.ch = ' ';
-                        result = this.value();
-                        this.white();
-                        if (this.ch) {
-                            this.error("Syntax error");
-                        }
-                        // If there is a reviver function, we recursively walk the new structure,
-                        // passing each name/value pair to the reviver function for possible
-                        // transformation, starting with a temporary root object that holds the result
-                        // in an empty key. If there is not a reviver function, we simply return the
-                        // result.
-                        return typeof reviver === 'function' ? function walk(holder, key) {
-                            var k,
-                                v,
-                                value = holder[key];
-                            if (value && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {
-                                for (k in value) {
-                                    if (Object.prototype.hasOwnProperty.call(value, k)) {
-                                        v = walk(value, k);
-                                        if (v !== undefined) {
-                                            value[k] = v;
-                                        } else {
-                                            delete value[k];
-                                        }
-                                    }
-                                }
-                            }
-                            return reviver.call(holder, key, value);
-                        }({ '': result }, '') : result;
-                    };
-                    SurveyJSON5.prototype.error = function(m) {
-                        // Call error when something is wrong.
-                        var error = new SyntaxError();
-                        error.message = m;
-                        error["at"] = this.at;
-                        throw error;
-                    };
-                    SurveyJSON5.prototype.next = function(c) {
-                        if (c === void 0) {
-                            c = null;
-                        }
-                        // If a c parameter is provided, verify that it matches the current character.
-                        if (c && c !== this.ch) {
-                            this.error("Expected '" + c + "' instead of '" + this.ch + "'");
-                        }
-                        // Get the this.next character. When there are no more characters,
-                        // return the empty string.
-                        this.ch = this.chartAt();
-                        this.at += 1;
-                        return this.ch;
-                    };
-                    SurveyJSON5.prototype.peek = function() {
-                        // Get the this.next character without consuming it or
-                        // assigning it to the this.ch varaible.
-                        return this.chartAt();
-                    };
-                    SurveyJSON5.prototype.chartAt = function() {
-                        if (this.endAt > -1 && this.at >= this.endAt) return '';
-                        return this.text.charAt(this.at);
-                    };
-                    SurveyJSON5.prototype.identifier = function() {
-                        // Parse an identifier. Normally, reserved words are disallowed here, but we
-                        // only use this for unquoted object keys, where reserved words are allowed,
-                        // so we don't check for those here. References:
-                        // - http://es5.github.com/#x7.6
-                        // - https://developer.mozilla.org/en/Core_JavaScript_1.5_Guide/Core_Language_Features#Variables
-                        // - http://docstore.mik.ua/orelly/webprog/jscript/ch02_07.htm
-                        // TODO Identifiers can have Unicode "letters" in them; add support for those.
-                        var key = this.ch;
-                        // Identifiers must start with a letter, _ or $.
-                        if (this.ch !== '_' && this.ch !== '$' && (this.ch < 'a' || this.ch > 'z') && (this.ch < 'A' || this.ch > 'Z')) {
-                            this.error("Bad identifier");
-                        }
-                        // Subsequent characters can contain digits.
-                        while (this.next() && (this.ch === '_' || this.ch === '$' || this.ch >= 'a' && this.ch <= 'z' || this.ch >= 'A' && this.ch <= 'Z' || this.ch >= '0' && this.ch <= '9')) {
-                            key += this.ch;
-                        }
-                        return key;
-                    };
-                    SurveyJSON5.prototype.number = function() {
-                        // Parse a number value.
-                        var number,
-                            sign = '',
-                            string = '',
-                            base = 10;
-                        if (this.ch === '-' || this.ch === '+') {
-                            sign = this.ch;
-                            this.next(this.ch);
-                        }
-                        // support for Infinity (could tweak to allow other words):
-                        if (this.ch === 'I') {
-                            number = this.word();
-                            if (typeof number !== 'number' || isNaN(number)) {
-                                this.error('Unexpected word for number');
-                            }
-                            return sign === '-' ? -number : number;
-                        }
-                        // support for NaN
-                        if (this.ch === 'N') {
-                            number = this.word();
-                            if (!isNaN(number)) {
-                                this.error('expected word to be NaN');
-                            }
-                            // ignore sign as -NaN also is NaN
-                            return number;
-                        }
-                        if (this.ch === '0') {
-                            string += this.ch;
-                            this.next();
-                            if (this.ch === 'x' || this.ch === 'X') {
-                                string += this.ch;
-                                this.next();
-                                base = 16;
-                            } else if (this.ch >= '0' && this.ch <= '9') {
-                                this.error('Octal literal');
-                            }
-                        }
-                        switch (base) {
-                            case 10:
-                                while (this.ch >= '0' && this.ch <= '9') {
-                                    string += this.ch;
-                                    this.next();
-                                }
-                                if (this.ch === '.') {
-                                    string += '.';
-                                    while (this.next() && this.ch >= '0' && this.ch <= '9') {
-                                        string += this.ch;
-                                    }
-                                }
-                                if (this.ch === 'e' || this.ch === 'E') {
-                                    string += this.ch;
-                                    this.next();
-                                    if (this.ch === '-' || this.ch === '+') {
-                                        string += this.ch;
-                                        this.next();
-                                    }
-                                    while (this.ch >= '0' && this.ch <= '9') {
-                                        string += this.ch;
-                                        this.next();
-                                    }
-                                }
-                                break;
-                            case 16:
-                                while (this.ch >= '0' && this.ch <= '9' || this.ch >= 'A' && this.ch <= 'F' || this.ch >= 'a' && this.ch <= 'f') {
-                                    string += this.ch;
-                                    this.next();
-                                }
-                                break;
-                        }
-                        if (sign === '-') {
-                            number = -string;
-                        } else {
-                            number = +string;
-                        }
-                        if (!isFinite(number)) {
-                            this.error("Bad number");
-                        } else {
-                            return number;
-                        }
-                    };
-                    SurveyJSON5.prototype.string = function() {
-                        // Parse a string value.
-                        var hex,
-                            i,
-                            string = '',
-                            delim,
-                            // double quote or single quote
-                            uffff;
-                        // When parsing for string values, we must look for ' or " and \ characters.
-                        if (this.ch === '"' || this.ch === "'") {
-                            delim = this.ch;
-                            while (this.next()) {
-                                if (this.ch === delim) {
-                                    this.next();
-                                    return string;
-                                } else if (this.ch === '\\') {
-                                    this.next();
-                                    if (this.ch === 'u') {
-                                        uffff = 0;
-                                        for (i = 0; i < 4; i += 1) {
-                                            hex = parseInt(this.next(), 16);
-                                            if (!isFinite(hex)) {
-                                                break;
-                                            }
-                                            uffff = uffff * 16 + hex;
-                                        }
-                                        string += String.fromCharCode(uffff);
-                                    } else if (this.ch === '\r') {
-                                        if (this.peek() === '\n') {
-                                            this.next();
-                                        }
-                                    } else if (typeof SurveyJSON5.escapee[this.ch] === 'string') {
-                                        string += SurveyJSON5.escapee[this.ch];
-                                    } else {
-                                        break;
-                                    }
-                                } else if (this.ch === '\n') {
-                                    // unescaped newlines are invalid; see:
-                                    // https://github.com/aseemk/json5/issues/24
-                                    // TODO this feels special-cased; are there other
-                                    // invalid unescaped chars?
-                                    break;
-                                } else {
-                                    string += this.ch;
-                                }
-                            }
-                        }
-                        this.error("Bad string");
-                    };
-                    SurveyJSON5.prototype.inlineComment = function() {
-                        // Skip an inline comment, assuming this is one. The current character should
-                        // be the second / character in the // pair that begins this inline comment.
-                        // To finish the inline comment, we look for a newline or the end of the text.
-                        if (this.ch !== '/') {
-                            this.error("Not an inline comment");
-                        }
-                        do {
-                            this.next();
-                            if (this.ch === '\n' || this.ch === '\r') {
-                                this.next();
-                                return;
+                        var _propertyItemsEditor = __webpack_require__(5);
+
+                        var _propertyEditorBase = __webpack_require__(3);
+
+                        var _objectEditor = __webpack_require__(10);
+
+                        var _surveyKnockout = __webpack_require__(2);
+
+                        var Survey = _interopRequireWildcard(_surveyKnockout);
+
+                        function _interopRequireWildcard(obj) {
+                            if (obj && obj.__esModule) { return obj; } else {
+                                var newObj = {};
+                                if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } }
+                                newObj.default = obj;
+                                return newObj;
                             }
-                        } while (this.ch);
-                    };
-                    SurveyJSON5.prototype.blockComment = function() {
-                        // Skip a block comment, assuming this is one. The current character should be
-                        // the * character in the /* pair that begins this block comment.
-                        // To finish the block comment, we look for an ending */ pair of characters,
-                        // but we also watch for the end of text before the comment is terminated.
-                        if (this.ch !== '*') {
-                            this.error("Not a block comment");
                         }
-                        do {
-                            this.next();
-                            while (this.ch === '*') {
-                                this.next('*');
-                                if (this.ch === '/') {
-                                    this.next('/');
-                                    return;
-                                }
+
+                        var __extends = undefined && undefined.__extends || function(d, b) {
+                            for (var p in b) {
+                                if (b.hasOwnProperty(p)) d[p] = b[p];
                             }
-                        } while (this.ch);
-                        this.error("Unterminated block comment");
-                    };
-                    SurveyJSON5.prototype.comment = function() {
-                        // Skip a comment, whether inline or block-level, assuming this is one.
-                        // Comments always begin with a / character.
-                        if (this.ch !== '/') {
-                            this.error("Not a comment");
-                        }
-                        this.next('/');
-                        if (this.ch === '/') {
-                            this.inlineComment();
-                        } else if (this.ch === '*') {
-                            this.blockComment();
-                        } else {
-                            this.error("Unrecognized comment");
-                        }
-                    };
-                    SurveyJSON5.prototype.white = function() {
-                        // Skip whitespace and comments.
-                        // Note that we're detecting comments by only a single / character.
-                        // This works since regular expressions are not valid JSON(5), but this will
-                        // break if there are other valid values that begin with a / character!
-                        while (this.ch) {
-                            if (this.ch === '/') {
-                                this.comment();
-                            } else if (SurveyJSON5.ws.indexOf(this.ch) >= 0) {
-                                this.next();
-                            } else {
-                                return;
+
+                            function __() {
+                                this.constructor = d;
                             }
-                        }
-                    };
-                    SurveyJSON5.prototype.word = function() {
-                        // true, false, or null.
-                        switch (this.ch) {
-                            case 't':
-                                this.next('t');
-                                this.next('r');
-                                this.next('u');
-                                this.next('e');
-                                return true;
-                            case 'f':
-                                this.next('f');
-                                this.next('a');
-                                this.next('l');
-                                this.next('s');
-                                this.next('e');
-                                return false;
-                            case 'n':
-                                this.next('n');
-                                this.next('u');
-                                this.next('l');
-                                this.next('l');
-                                return null;
-                            case 'I':
-                                this.next('I');
-                                this.next('n');
-                                this.next('f');
-                                this.next('i');
-                                this.next('n');
-                                this.next('i');
-                                this.next('t');
-                                this.next('y');
-                                return Infinity;
-                            case 'N':
-                                this.next('N');
-                                this.next('a');
-                                this.next('N');
-                                return NaN;
-                        }
-                        this.error("Unexpected '" + this.ch + "'");
-                    };
-                    SurveyJSON5.prototype.array = function() {
-                        // Parse an array value.
-                        var array = [];
-                        if (this.ch === '[') {
-                            this.next('[');
-                            this.white();
-                            while (this.ch) {
-                                if (this.ch === ']') {
-                                    this.next(']');
-                                    return array; // Potentially empty array
-                                }
-                                // ES5 allows omitting elements in arrays, e.g. [,] and
-                                // [,null]. We don't allow this in JSON5.
-                                if (this.ch === ',') {
-                                    this.error("Missing array element");
-                                } else {
-                                    array.push(this.value());
-                                }
-                                this.white();
-                                // If there's no comma after this value, this needs to
-                                // be the end of the array.
-                                if (this.ch !== ',') {
-                                    this.next(']');
-                                    return array;
-                                }
-                                this.next(',');
-                                this.white();
+                            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+                        };
+                        var SurveyPropertyValidatorsEditor = exports.SurveyPropertyValidatorsEditor = function(_super) {
+                            __extends(SurveyPropertyValidatorsEditor, _super);
+
+                            function SurveyPropertyValidatorsEditor() {
+                                _super.call(this);
+                                this.availableValidators = [];
+                                this.validatorClasses = [];
+                                var self = this;
+                                this.selectedObjectEditor = new _objectEditor.SurveyObjectEditor();
+                                this.selectedObjectEditor.onPropertyValueChanged.add(function(sender, options) {
+                                    self.onPropertyValueChanged(options.property, options.object, options.newValue);
+                                });
+                                this.koSelected = ko.observable(null);
+                                this.koSelected.subscribe(function(newValue) {
+                                    self.selectedObjectEditor.selectedObject = newValue != null ? newValue.validator : null;
+                                });
+                                this.validatorClasses = Survey.JsonObject.metaData.getChildrenClasses("surveyvalidator", true);
+                                this.availableValidators = this.getAvailableValidators();
+                                this.onDeleteClick = function() {
+                                    self.koItems.remove(self.koSelected());
+                                };
+                                this.onAddClick = function(validatorType) {
+                                    self.addItem(validatorType);
+                                };
                             }
-                        }
-                        this.error("Bad array");
-                    };
-                    SurveyJSON5.prototype.object = function() {
-                        // Parse an object value.
-                        var key,
-                            start,
-                            isFirstProperty = true,
-                            object = {};
-                        if (this.parseType > 0) {
-                            object[SurveyJSON5.positionName] = { start: this.at - 1 };
-                        }
-                        if (this.ch === '{') {
-                            this.next('{');
-                            this.white();
-                            start = this.at - 1;
-                            while (this.ch) {
-                                if (this.ch === '}') {
-                                    if (this.parseType > 0) {
-                                        object[SurveyJSON5.positionName].end = start;
-                                    }
-                                    this.next('}');
-                                    return object; // Potentially empty object
-                                }
-                                // Keys can be unquoted. If they are, they need to be
-                                // valid JS identifiers.
-                                if (this.ch === '"' || this.ch === "'") {
-                                    key = this.string();
-                                } else {
-                                    key = this.identifier();
-                                }
-                                this.white();
-                                if (this.parseType > 1) {
-                                    object[SurveyJSON5.positionName][key] = { start: start, valueStart: this.at };
-                                }
-                                this.next(':');
-                                object[key] = this.value();
-                                if (this.parseType > 1) {
-                                    start = this.at - 1;
-                                    object[SurveyJSON5.positionName][key].valueEnd = start;
-                                    object[SurveyJSON5.positionName][key].end = start;
-                                }
-                                this.white();
-                                // If there's no comma after this pair, this needs to be
-                                // the end of the object.
-                                if (this.ch !== ',') {
-                                    if (this.parseType > 1) {
-                                        object[SurveyJSON5.positionName][key].valueEnd--;
-                                        object[SurveyJSON5.positionName][key].end--;
-                                    }
-                                    if (this.parseType > 0) {
-                                        object[SurveyJSON5.positionName].end = this.at - 1;
-                                    }
-                                    this.next('}');
-                                    return object;
+                            Object.defineProperty(SurveyPropertyValidatorsEditor.prototype, "editorType", {
+                                get: function get() {
+                                    return "validators";
+                                },
+                                enumerable: true,
+                                configurable: true
+                            });
+                            SurveyPropertyValidatorsEditor.prototype.onValueChanged = function() {
+                                _super.prototype.onValueChanged.call(this);
+                                if (this.koSelected) {
+                                    this.koSelected(this.koItems().length > 0 ? this.koItems()[0] : null);
                                 }
-                                if (this.parseType > 1) {
-                                    object[SurveyJSON5.positionName][key].valueEnd--;
-                                    if (!isFirstProperty) {
-                                        object[SurveyJSON5.positionName][key].end--;
-                                    }
+                            };
+                            SurveyPropertyValidatorsEditor.prototype.createEditorItem = function(item) {
+                                var jsonObj = new Survey.JsonObject();
+                                var validator = Survey.JsonObject.metaData.createClass(item.getType());
+                                jsonObj.toObject(item, validator);
+                                return new SurveyPropertyValidatorItem(validator);
+                            };
+                            SurveyPropertyValidatorsEditor.prototype.createItemFromEditorItem = function(editorItem) {
+                                var item = editorItem;
+                                return item.validator;
+                            };
+                            SurveyPropertyValidatorsEditor.prototype.addItem = function(validatorType) {
+                                var newValidator = new SurveyPropertyValidatorItem(Survey.JsonObject.metaData.createClass(validatorType));
+                                this.koItems.push(newValidator);
+                                this.koSelected(newValidator);
+                            };
+                            SurveyPropertyValidatorsEditor.prototype.getAvailableValidators = function() {
+                                var result = [];
+                                for (var i = 0; i < this.validatorClasses.length; i++) {
+                                    result.push(this.validatorClasses[i].name);
                                 }
-                                this.next(',');
-                                this.white();
-                                isFirstProperty = false;
-                            }
-                        }
-                        this.error("Bad object");
-                    };
-                    SurveyJSON5.prototype.value = function() {
-                        // Parse a JSON value. It could be an object, an array, a string, a number,
-                        // or a word.
-                        this.white();
-                        switch (this.ch) {
-                            case '{':
-                                return this.object();
-                            case '[':
-                                return this.array();
-                            case '"':
-                            case "'":
-                                return this.string();
-                            case '-':
-                            case '+':
-                            case '.':
-                                return this.number();
-                            default:
-                                return this.ch >= '0' && this.ch <= '9' ? this.number() : this.word();
-                        }
-                    };
-                    SurveyJSON5.prototype.stringify = function(obj, replacer, space) {
-                        if (replacer === void 0) {
-                            replacer = null;
-                        }
-                        if (space === void 0) {
-                            space = null;
-                        }
-                        if (replacer && typeof replacer !== "function" && !this.isArray(replacer)) {
-                            throw new Error('Replacer must be a function or an array');
-                        }
-                        this.replacer = replacer;
-                        this.indentStr = this.getIndent(space);
-                        this.objStack = [];
-                        // special case...when undefined is used inside of
-                        // a compound object/array, return null.
-                        // but when top-level, return undefined
-                        var topLevelHolder = { "": obj };
-                        if (obj === undefined) {
-                            return this.getReplacedValueOrUndefined(topLevelHolder, '', true);
-                        }
-                        return this.internalStringify(topLevelHolder, '', true);
-                    };
-                    SurveyJSON5.prototype.getIndent = function(space) {
-                        if (space) {
-                            if (typeof space === "string") {
-                                return space;
-                            } else if (typeof space === "number" && space >= 0) {
-                                return this.makeIndent(" ", space, true);
-                            }
-                        }
-                        return "";
-                    };
-                    SurveyJSON5.prototype.getReplacedValueOrUndefined = function(holder, key, isTopLevel) {
-                        var value = holder[key];
-                        // Replace the value with its toJSON value first, if possible
-                        if (value && value.toJSON && typeof value.toJSON === "function") {
-                            value = value.toJSON();
-                        }
-                        // If the user-supplied replacer if a function, call it. If it's an array, check objects' string keys for
-                        // presence in the array (removing the key/value pair from the resulting JSON if the key is missing).
-                        if (typeof this.replacer === "function") {
-                            return this.replacer.call(holder, key, value);
-                        } else if (this.replacer) {
-                            if (isTopLevel || this.isArray(holder) || this.replacer.indexOf(key) >= 0) {
-                                return value;
-                            } else {
-                                return undefined;
-                            }
-                        } else {
-                            return value;
-                        }
-                    };
-                    SurveyJSON5.prototype.isWordChar = function(char) {
-                        return char >= 'a' && char <= 'z' || char >= 'A' && char <= 'Z' || char >= '0' && char <= '9' || char === '_' || char === '$';
-                    };
-                    SurveyJSON5.prototype.isWordStart = function(char) {
-                        return char >= 'a' && char <= 'z' || char >= 'A' && char <= 'Z' || char === '_' || char === '$';
-                    };
-                    SurveyJSON5.prototype.isWord = function(key) {
-                        if (typeof key !== 'string') {
-                            return false;
-                        }
-                        if (!this.isWordStart(key[0])) {
-                            return false;
-                        }
-                        var i = 1,
-                            length = key.length;
-                        while (i < length) {
-                            if (!this.isWordChar(key[i])) {
-                                return false;
-                            }
-                            i++;
-                        }
-                        return true;
-                    };
-                    // polyfills
-                    SurveyJSON5.prototype.isArray = function(obj) {
-                        if (Array.isArray) {
-                            return Array.isArray(obj);
-                        } else {
-                            return Object.prototype.toString.call(obj) === '[object Array]';
-                        }
-                    };
-                    SurveyJSON5.prototype.isDate = function(obj) {
-                        return Object.prototype.toString.call(obj) === '[object Date]';
-                    };
-                    SurveyJSON5.prototype.isNaN = function(val) {
-                        return typeof val === 'number' && val !== val;
-                    };
-                    SurveyJSON5.prototype.checkForCircular = function(obj) {
-                        for (var i = 0; i < this.objStack.length; i++) {
-                            if (this.objStack[i] === obj) {
-                                throw new TypeError("Converting circular structure to JSON");
+                                return result;
+                            };
+                            SurveyPropertyValidatorsEditor.prototype.onPropertyValueChanged = function(property, obj, newValue) {
+                                if (this.koSelected() == null) return;
+                                this.koSelected().validator[property.name] = newValue;
+                            };
+                            return SurveyPropertyValidatorsEditor;
+                        }(_propertyItemsEditor.SurveyPropertyItemsEditor);
+                        var SurveyPropertyValidatorItem = exports.SurveyPropertyValidatorItem = function() {
+                            function SurveyPropertyValidatorItem(validator) {
+                                this.validator = validator;
+                                this.text = validator.getType();
                             }
-                        }
-                    };
-                    SurveyJSON5.prototype.makeIndent = function(str, num, noNewLine) {
-                        if (noNewLine === void 0) {
-                            noNewLine = false;
-                        }
-                        if (!str) {
-                            return "";
-                        }
-                        // indentation no more than 10 chars
-                        if (str.length > 10) {
-                            str = str.substring(0, 10);
-                        }
-                        var indent = noNewLine ? "" : "\n";
-                        for (var i = 0; i < num; i++) {
-                            indent += str;
-                        }
-                        return indent;
-                    };
-                    SurveyJSON5.prototype.escapeString = function(str) {
-                        // If the string contains no control characters, no quote characters, and no
-                        // backslash characters, then we can safely slap some quotes around it.
-                        // Otherwise we must also replace the offending characters with safe escape
-                        // sequences.
-                        SurveyJSON5.escapable.lastIndex = 0;
-                        return SurveyJSON5.escapable.test(str) ? '"' + str.replace(SurveyJSON5.escapable, function(a) {
-                            var c = SurveyJSON5.meta[a];
-                            return typeof c === 'string' ? c : '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
-                        }) + '"' : '"' + str + '"';
-                    };
-                    // End
-                    SurveyJSON5.prototype.internalStringify = function(holder, key, isTopLevel) {
-                        var buffer, res;
-                        // Replace the value, if necessary
-                        var obj_part = this.getReplacedValueOrUndefined(holder, key, isTopLevel);
-                        if (obj_part && !this.isDate(obj_part)) {
-                            // unbox objects
-                            // don't unbox dates, since will turn it into number
-                            obj_part = obj_part.valueOf();
-                        }
-                        switch (typeof obj_part === 'undefined' ? 'undefined' : _typeof(obj_part)) {
-                            case "boolean":
-                                return obj_part.toString();
-                            case "number":
-                                if (isNaN(obj_part) || !isFinite(obj_part)) {
-                                    return "null";
-                                }
-                                return obj_part.toString();
-                            case "string":
-                                return this.escapeString(obj_part.toString());
-                            case "object":
-                                if (obj_part === null) {
-                                    return "null";
-                                } else if (this.isArray(obj_part)) {
-                                    this.checkForCircular(obj_part);
-                                    buffer = "[";
-                                    this.objStack.push(obj_part);
-                                    for (var i = 0; i < obj_part.length; i++) {
-                                        res = this.internalStringify(obj_part, i, false);
-                                        buffer += this.makeIndent(this.indentStr, this.objStack.length);
-                                        if (res === null || typeof res === "undefined") {
-                                            buffer += "null";
-                                        } else {
-                                            buffer += res;
-                                        }
-                                        if (i < obj_part.length - 1) {
-                                            buffer += ",";
-                                        } else if (this.indentStr) {
-                                            buffer += "\n";
-                                        }
-                                    }
-                                    this.objStack.pop();
-                                    buffer += this.makeIndent(this.indentStr, this.objStack.length, true) + "]";
-                                } else {
-                                    this.checkForCircular(obj_part);
-                                    buffer = "{";
-                                    var nonEmpty = false;
-                                    this.objStack.push(obj_part);
-                                    for (var prop in obj_part) {
-                                        if (obj_part.hasOwnProperty(prop)) {
-                                            var value = this.internalStringify(obj_part, prop, false);
-                                            isTopLevel = false;
-                                            if (typeof value !== "undefined" && value !== null) {
-                                                buffer += this.makeIndent(this.indentStr, this.objStack.length);
-                                                nonEmpty = true;
-                                                var propKey = this.isWord(prop) ? prop : this.escapeString(prop);
-                                                buffer += propKey + ":" + (this.indentStr ? ' ' : '') + value + ",";
-                                            }
-                                        }
-                                    }
-                                    this.objStack.pop();
-                                    if (nonEmpty) {
-                                        buffer = buffer.substring(0, buffer.length - 1) + this.makeIndent(this.indentStr, this.objStack.length) + "}";
-                                    } else {
-                                        buffer = '{}';
-                                    }
-                                }
-                                return buffer;
-                            default:
-                                // functions and undefined should be ignored
-                                return undefined;
-                        }
-                    };
-                    SurveyJSON5.positionName = "pos";
-                    SurveyJSON5.escapee = {
-                        "'": "'",
-                        '"': '"',
-                        '\\': '\\',
-                        '/': '/',
-                        '\n': '',
-                        b: '\b',
-                        f: '\f',
-                        n: '\n',
-                        r: '\r',
-                        t: '\t'
-                    };
-                    SurveyJSON5.ws = [' ', '\t', '\r', '\n', '\v', '\f', '\xA0', '\uFEFF'];
-                    // Copied from Crokford's implementation of JSON
-                    // See https://github.com/douglascrockford/JSON-js/blob/e39db4b7e6249f04a195e7dd0840e610cc9e941e/json2.js#L195
-                    // Begin
-                    SurveyJSON5.cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
-                    SurveyJSON5.escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
-                    SurveyJSON5.meta = {
-                        '\b': '\\b',
-                        '\t': '\\t',
-                        '\n': '\\n',
-                        '\f': '\\f',
-                        '\r': '\\r',
-                        '"': '\\"',
-                        '\\': '\\\\'
-                    };
-                    return SurveyJSON5;
-                }();
-
-                /***/
-            },
-            /* 19 */
-            /***/
-            function(module, exports, __webpack_require__) {
-
-                "use strict";
-
-                exports.__esModule = true;
-                exports.SurveyEmbedingWindow = undefined;
-
-                var _json = __webpack_require__(18);
-
-                var SurveyEmbedingWindow = exports.SurveyEmbedingWindow = function() {
-                    function SurveyEmbedingWindow() {
-                        this.surveyId = null;
-                        this.surveyPostId = null;
-                        this.generateValidJSON = false;
-                        var self = this;
-                        this.koLibraryVersion = ko.observable("knockout");
-                        this.koShowAsWindow = ko.observable("page");
-                        this.koScriptUsing = ko.observable("bootstrap");
-                        this.koHasIds = ko.observable(false);
-                        this.koLoadSurvey = ko.observable(false);
-                        this.koVisibleHtml = ko.computed(function() {
-                            return self.koLibraryVersion() == "react" || self.koShowAsWindow() == "page";
-                        });
-                        this.koLibraryVersion.subscribe(function(newValue) {
-                            self.setHeadText();
-                            self.surveyEmbedingJava.setValue(self.getJavaText());
-                        });
-                        this.koShowAsWindow.subscribe(function(newValue) {
-                            self.surveyEmbedingJava.setValue(self.getJavaText());
-                        });
-                        this.koScriptUsing.subscribe(function(newValue) {
-                            self.setHeadText();
-                            self.surveyEmbedingJava.setValue(self.getJavaText());
+                            return SurveyPropertyValidatorItem;
+                        }();
+                        _propertyEditorBase.SurveyPropertyEditorBase.registerEditor("validators", function() {
+                            return new SurveyPropertyValidatorsEditor();
                         });
-                        this.koLoadSurvey.subscribe(function(newValue) {
-                            self.surveyEmbedingJava.setValue(self.getJavaText());
-                        });
-                        this.surveyEmbedingHead = null;
-                    }
-                    Object.defineProperty(SurveyEmbedingWindow.prototype, "json", {
-                        get: function get() {
-                            return this.jsonValue;
-                        },
-                        set: function set(value) {
-                            this.jsonValue = value;
-                        },
-                        enumerable: true,
-                        configurable: true
-                    });
-                    SurveyEmbedingWindow.prototype.show = function() {
-                        if (this.surveyEmbedingHead == null) {
-                            this.surveyEmbedingHead = this.createEditor("surveyEmbedingHead");
-                            this.setHeadText();
-                            var bodyEditor = this.createEditor("surveyEmbedingBody");
-                            bodyEditor.setValue("<div id= \"mySurveyJSName\" ></div>");
-                            this.surveyEmbedingJava = this.createEditor("surveyEmbedingJava");
-                        }
-                        this.koHasIds(this.surveyId && this.surveyPostId);
-                        this.surveyEmbedingJava.setValue(this.getJavaText());
-                    };
-                    SurveyEmbedingWindow.prototype.setHeadText = function() {
-                        var str = "";
-                        if (this.koLibraryVersion() == "knockout") {
-                            str = "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/knockout/3.3.0/knockout-min.js\"></script>\n<script src=\"js/survey.ko.min.js\"></script>";
-                        } else {
-                            str = "<script src=\"https://fb.me/react-0.14.8.js\"></script>\n<script src= \"https://fb.me/react-dom-0.14.8.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.23/browser.min.js\"></script>\n";
-                            str += "<script src=\"js/survey.react.min.js\"></script>";
-                        }
-                        if (this.koScriptUsing() != "bootstrap") {
-                            str += "\n<link href=\"css/survey.css\" type=\"text/css\" rel=\"stylesheet\" />";
-                        }
-                        this.surveyEmbedingHead.setValue(str);
-                    };
-                    SurveyEmbedingWindow.prototype.createEditor = function(elementName) {
-                        var editor = ace.edit(elementName);
-                        editor.setTheme("ace/theme/monokai");
-                        editor.session.setMode("ace/mode/json");
-                        editor.setShowPrintMargin(false);
-                        editor.renderer.setShowGutter(false);
-                        editor.setReadOnly(true);
-                        return editor;
-                    };
-                    SurveyEmbedingWindow.prototype.getJavaText = function() {
-                        var isOnPage = this.koShowAsWindow() == "page";
-                        var str = this.koLibraryVersion() == "knockout" ? this.getKnockoutJavaText(isOnPage) : this.getReactJavaText(isOnPage);
-                        return this.getSetCss() + str;
-                    };
-                    SurveyEmbedingWindow.prototype.getSetCss = function() {
-                        if (this.koScriptUsing() != "bootstrap") return "";
-                        return "Survey.Survey.cssType = \"bootstrap\";\n";
-                    };
-                    SurveyEmbedingWindow.prototype.getKnockoutJavaText = function(isOnPage) {
-                        var text = isOnPage ? "var survey = new Survey.Survey(\n" : "var surveyWindow = new Survey.SurveyWindow(\n";
-                        text += this.getJsonText();
-                        text += ");\n";
-                        if (!isOnPage) {
-                            text += "surveyWindow.";
-                        }
-                        var saveFunc = this.getSaveFuncCode();
-                        text += "survey.onComplete.add(function (s) {\n" + saveFunc + "\n });\n";
-                        if (isOnPage) {
-                            text += "survey.render(\"mySurveyJSName\");";
-                        } else {
-                            text += "//By default Survey.title is used.\n";
-                            text += "//surveyWindow.title = \"My Survey Window Title.\";\n";
-                            text += "surveyWindow.show();";
-                        }
-                        return text;
-                    };
-                    SurveyEmbedingWindow.prototype.getReactJavaText = function(isOnPage) {
-                        var saveFunc = this.getSaveFuncCode();
-                        var sendResultText = "var surveySendResult = function (s) {\n" + saveFunc + "\n });\n";
-                        var name = isOnPage ? "ReactSurvey" : "ReactSurveyWindow";
-                        var jsonText = "var surveyJson = " + this.getJsonText() + "\n\n";
-                        var text = jsonText + sendResultText + "ReactDOM.render(\n<" + name + " json={surveyJson} onComplete={surveySendResult} />, \n document.getElementById(\"mySurveyJSName\"));";
-                        return text;
-                    };
-                    SurveyEmbedingWindow.prototype.getSaveFuncCode = function() {
-                        if (this.koHasIds()) return "survey.sendResult('" + this.surveyPostId + "');";
-                        return "alert(\"The results are:\" + JSON.stringify(s.data));";
-                    };
-                    SurveyEmbedingWindow.prototype.getJsonText = function() {
-                        if (this.koHasIds() && this.koLoadSurvey()) {
-                            return "{ surveyId: '" + this.surveyId + "'}";
-                        }
-                        if (this.generateValidJSON) return JSON.stringify(this.json);
-                        return new _json.SurveyJSON5().stringify(this.json);
-                    };
-                    return SurveyEmbedingWindow;
-                }();
 
-                /***/
-            },
-            /* 20 */
-            /***/
-            function(module, exports, __webpack_require__) {
-
-                "use strict";
+                        /***/
+                    },
+                    /* 10 */
+                    /***/
+                    function(module, exports, __webpack_require__) {
 
-                exports.__esModule = true;
-                exports.SurveyVerbChangePageItem = exports.SurveyVerbChangeTypeItem = exports.SurveyVerbItem = exports.SurveyVerbs = undefined;
+                        "use strict";
 
-                var _editorLocalization = __webpack_require__(7);
+                        exports.__esModule = true;
+                        exports.SurveyObjectEditor = undefined;
 
-                var _surveyHelper = __webpack_require__(8);
+                        var _objectProperty = __webpack_require__(11);
 
-                var _surveyKnockout = __webpack_require__(2);
+                        var _editorLocalization = __webpack_require__(7);
 
-                var Survey = _interopRequireWildcard(_surveyKnockout);
+                        var _surveyKnockout = __webpack_require__(2);
 
-                function _interopRequireWildcard(obj) {
-                    if (obj && obj.__esModule) { return obj; } else {
-                        var newObj = {};
-                        if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } }
-                        newObj.default = obj;
-                        return newObj;
-                    }
-                }
+                        var Survey = _interopRequireWildcard(_surveyKnockout);
 
-                var __extends = undefined && undefined.__extends || function(d, b) {
-                    for (var p in b) {
-                        if (b.hasOwnProperty(p)) d[p] = b[p];
-                    }
-
-                    function __() {
-                        this.constructor = d;
-                    }
-                    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
-                };
-                var SurveyVerbs = exports.SurveyVerbs = function() {
-                    function SurveyVerbs(onModifiedCallback) {
-                        this.onModifiedCallback = onModifiedCallback;
-                        this.koVerbs = ko.observableArray();
-                        this.koHasVerbs = ko.observable();
-                        var classes = Survey.JsonObject.metaData.getChildrenClasses("selectbase", true);
-                        this.choicesClasses = [];
-                        for (var i = 0; i < classes.length; i++) {
-                            this.choicesClasses.push(classes[i].name);
-                        }
-                    }
-                    Object.defineProperty(SurveyVerbs.prototype, "survey", {
-                        get: function get() {
-                            return this.surveyValue;
-                        },
-                        set: function set(value) {
-                            if (this.survey == value) return;
-                            this.surveyValue = value;
-                        },
-                        enumerable: true,
-                        configurable: true
-                    });
-                    Object.defineProperty(SurveyVerbs.prototype, "obj", {
-                        get: function get() {
-                            return this.objValue;
-                        },
-                        set: function set(value) {
-                            if (this.objValue == value) return;
-                            this.objValue = value;
-                            this.buildVerbs();
-                        },
-                        enumerable: true,
-                        configurable: true
-                    });
-                    SurveyVerbs.prototype.buildVerbs = function() {
-                        var array = [];
-                        var objType = _surveyHelper.SurveyHelper.getObjectType(this.obj);
-                        if (objType == _surveyHelper.ObjType.Question) {
-                            var question = this.obj;
-                            if (this.survey.pages.length > 1) {
-                                array.push(new SurveyVerbChangePageItem(this.survey, question, this.onModifiedCallback));
+                        function _interopRequireWildcard(obj) {
+                            if (obj && obj.__esModule) { return obj; } else {
+                                var newObj = {};
+                                if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } }
+                                newObj.default = obj;
+                                return newObj;
                             }
-                            if (this.choicesClasses.indexOf(question.getType()) > -1) {
-                                array.push(new SurveyVerbChangeTypeItem(this.survey, question, this.onModifiedCallback));
-                            }
-                        }
-                        this.koVerbs(array);
-                        this.koHasVerbs(array.length > 0);
-                    };
-                    return SurveyVerbs;
-                }();
-                var SurveyVerbItem = exports.SurveyVerbItem = function() {
-                    function SurveyVerbItem(survey, question, onModifiedCallback) {
-                        this.survey = survey;
-                        this.question = question;
-                        this.onModifiedCallback = onModifiedCallback;
-                        this.koItems = ko.observableArray();
-                        this.koSelectedItem = ko.observable();
-                    }
-                    Object.defineProperty(SurveyVerbItem.prototype, "text", {
-                        get: function get() {
-                            return "";
-                        },
-                        enumerable: true,
-                        configurable: true
-                    });
-                    return SurveyVerbItem;
-                }();
-                var SurveyVerbChangeTypeItem = exports.SurveyVerbChangeTypeItem = function(_super) {
-                    __extends(SurveyVerbChangeTypeItem, _super);
-
-                    function SurveyVerbChangeTypeItem(survey, question, onModifiedCallback) {
-                        _super.call(this, survey, question, onModifiedCallback);
-                        this.survey = survey;
-                        this.question = question;
-                        this.onModifiedCallback = onModifiedCallback;
-                        var classes = Survey.JsonObject.metaData.getChildrenClasses("selectbase", true);
-                        var array = [];
-                        for (var i = 0; i < classes.length; i++) {
-                            array.push({ value: classes[i].name, text: _editorLocalization.editorLocalization.getString("qt." + classes[i].name) });
-                        }
-                        this.koItems(array);
-                        this.koSelectedItem(question.getType());
-                        var self = this;
-                        this.koSelectedItem.subscribe(function(newValue) {
-                            self.changeType(newValue);
-                        });
-                    }
-                    Object.defineProperty(SurveyVerbChangeTypeItem.prototype, "text", {
-                        get: function get() {
-                            return _editorLocalization.editorLocalization.getString("pe.verbChangeType");
-                        },
-                        enumerable: true,
-                        configurable: true
-                    });
-                    SurveyVerbChangeTypeItem.prototype.changeType = function(questionType) {
-                        if (questionType == this.question.getType()) return;
-                        var page = this.survey.getPageByQuestion(this.question);
-                        var index = page.questions.indexOf(this.question);
-                        var newQuestion = Survey.QuestionFactory.Instance.createQuestion(questionType, this.question.name);
-                        var jsonObj = new Survey.JsonObject();
-                        var json = jsonObj.toJsonObject(this.question);
-                        jsonObj.toObject(json, newQuestion);
-                        page.removeQuestion(this.question);
-                        page.addQuestion(newQuestion, index);
-                        if (this.onModifiedCallback) this.onModifiedCallback();
-                    };
-                    return SurveyVerbChangeTypeItem;
-                }(SurveyVerbItem);
-                var SurveyVerbChangePageItem = exports.SurveyVerbChangePageItem = function(_super) {
-                    __extends(SurveyVerbChangePageItem, _super);
-
-                    function SurveyVerbChangePageItem(survey, question, onModifiedCallback) {
-                        _super.call(this, survey, question, onModifiedCallback);
-                        this.survey = survey;
-                        this.question = question;
-                        this.onModifiedCallback = onModifiedCallback;
-                        var array = [];
-                        for (var i = 0; i < this.survey.pages.length; i++) {
-                            var page = this.survey.pages[i];
-                            array.push({ value: page, text: _surveyHelper.SurveyHelper.getObjectName(page) });
                         }
-                        this.koItems(array);
-                        this.prevPage = this.survey.getPageByQuestion(question);
-                        this.koSelectedItem(this.prevPage);
-                        var self = this;
-                        this.koSelectedItem.subscribe(function(newValue) {
-                            self.changePage(newValue);
-                        });
-                    }
-                    Object.defineProperty(SurveyVerbChangePageItem.prototype, "text", {
-                        get: function get() {
-                            return _editorLocalization.editorLocalization.getString("pe.verbChangePage");
-                        },
-                        enumerable: true,
-                        configurable: true
-                    });
-                    SurveyVerbChangePageItem.prototype.changePage = function(newPage) {
-                        if (newPage == null || newPage == this.prevPage) return;
-                        this.prevPage.removeQuestion(this.question);
-                        newPage.addQuestion(this.question);
-                        if (this.onModifiedCallback) this.onModifiedCallback();
-                    };
-                    return SurveyVerbChangePageItem;
-                }(SurveyVerbItem);
 
-                /***/
-            },
-            /* 21 */
-            /***/
-            function(module, exports, __webpack_require__) {
+                        var SurveyObjectEditor = exports.SurveyObjectEditor = function() {
+                            function SurveyObjectEditor(propertyEditorOptions) {
+                                if (propertyEditorOptions === void 0) {
+                                    propertyEditorOptions = null;
+                                }
+                                this.propertyEditorOptions = null;
+                                this.onPropertyValueChanged = new Survey.Event();
+                                this.propertyEditorOptions = propertyEditorOptions;
+                                this.koProperties = ko.observableArray();
+                                this.koActiveProperty = ko.observable();
+                                this.koHasObject = ko.observable();
+                            }
+                            Object.defineProperty(SurveyObjectEditor.prototype, "selectedObject", {
+                                get: function get() {
+                                    return this.selectedObjectValue;
+                                },
+                                set: function set(value) {
+                                    if (this.selectedObjectValue == value) return;
+                                    this.koHasObject(value != null);
+                                    this.selectedObjectValue = value;
+                                    this.updateProperties();
+                                    this.updatePropertiesObject();
+                                },
+                                enumerable: true,
+                                configurable: true
+                            });
+                            SurveyObjectEditor.prototype.getPropertyEditor = function(name) {
+                                var properties = this.koProperties();
+                                // debugger;
+                                for (var i = 0; i < properties.length; i++) {
+                                    if (properties[i].name == name) return properties[i];
+                                }
+                                return null;
+                            };
+                            SurveyObjectEditor.prototype.changeActiveProperty = function(property) {
+                                this.koActiveProperty(property);
+                            };
+                            SurveyObjectEditor.prototype.ObjectChanged = function() {
+                                this.updatePropertiesObject();
+                            };
+                            SurveyObjectEditor.prototype.updateProperties = function() {
+                                var _this = this;
+                                if (!this.selectedObject || !this.selectedObject.getType) {
+                                    this.koProperties([]);
+                                    this.koActiveProperty(null);
+                                    return;
+                                }
+                                var properties = Survey.JsonObject.metaData.getProperties(this.selectedObject.getType());
+                                properties.sort(function(a, b) {
+                                    if (a.name == b.name) return 0;
+                                    if (a.name > b.name) return 1;
+                                    return -1;
+                                });
+                                var objectProperties = [];
+                                var self = this;
+                                var propEvent = function propEvent(property, newValue) {
+                                    self.onPropertyValueChanged.fire(_this, { property: property.property, object: property.object, newValue: newValue });
+                                };
+                                for (var i = 0; i < properties.length; i++) {
+                                    if (!this.canShowProperty(properties[i])) continue;
+                                    var objectProperty = new _objectProperty.SurveyObjectProperty(properties[i], propEvent, this.propertyEditorOptions);
+                                    var locName = this.selectedObject.getType() + '_' + properties[i].name;
+                                    objectProperty.displayName = _editorLocalization.editorLocalization.getPropertyName(locName);
+                                    var title = _editorLocalization.editorLocalization.getPropertyTitle(locName);
+                                    if (!title) title = objectProperty.displayName;
+                                    objectProperty.title = title;
+                                    objectProperties.push(objectProperty);
+                                }
+                                this.koProperties(objectProperties);
+                                this.koActiveProperty(this.getPropertyEditor("name"));
+                            };
+                            SurveyObjectEditor.prototype.canShowProperty = function(property) {
+                                var name = property.name;
+                                if (name == 'questions' || name == 'pages') return false;
+                                return true;
+                            };
+                            SurveyObjectEditor.prototype.updatePropertiesObject = function() {
+                                var properties = this.koProperties();
+                                for (var i = 0; i < properties.length; i++) {
+                                    properties[i].object = this.selectedObject;
+                                }
+                            };
+                            return SurveyObjectEditor;
+                        }();
 
-                "use strict";
+                        /***/
+                    },
+                    /* 11 */
+                    /***/
+                    function(module, exports, __webpack_require__) {
 
-                exports.__esModule = true;
-                exports.UndoRedoItem = exports.SurveyUndoRedo = undefined;
+                        "use strict";
 
-                var _surveyKnockout = __webpack_require__(2);
+                        exports.__esModule = true;
+                        exports.SurveyObjectProperty = undefined;
 
-                var Survey = _interopRequireWildcard(_surveyKnockout);
+                        var _propertyEditorBase = __webpack_require__(3);
 
-                function _interopRequireWildcard(obj) {
-                    if (obj && obj.__esModule) { return obj; } else {
-                        var newObj = {};
-                        if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } }
-                        newObj.default = obj;
-                        return newObj;
-                    }
-                }
+                        var _editorLocalization = __webpack_require__(7);
 
-                var SurveyUndoRedo = exports.SurveyUndoRedo = function() {
-                    function SurveyUndoRedo() {
-                        this.index = -1;
-                        this.maximumCount = 10;
-                        this.items = [];
-                        this.koCanUndo = ko.observable(false);
-                        this.koCanRedo = ko.observable(false);
-                    }
-                    SurveyUndoRedo.prototype.clear = function() {
-                        this.items = [];
-                        this.koCanUndo(false);
-                        this.koCanRedo(false);
-                    };
-                    SurveyUndoRedo.prototype.setCurrent = function(survey, selectedObjName) {
-                        var item = new UndoRedoItem();
-                        item.surveyJSON = new Survey.JsonObject().toJsonObject(survey);
-                        item.selectedObjName = selectedObjName;
-                        if (this.index < this.items.length - 1) {
-                            this.items.splice(this.index + 1);
-                        }
-                        this.items.push(item);
-                        this.removeOldData();
-                        this.index = this.items.length - 1;
-                        this.updateCanUndoRedo();
-                    };
-                    SurveyUndoRedo.prototype.undo = function() {
-                        if (!this.canUndo) return null;
-                        return this.doUndoRedo(-1);
-                    };
-                    SurveyUndoRedo.prototype.redo = function() {
-                        if (!this.canRedo) return null;
-                        return this.doUndoRedo(1);
-                    };
-                    SurveyUndoRedo.prototype.updateCanUndoRedo = function() {
-                        this.koCanUndo(this.canUndo);
-                        this.koCanRedo(this.canRedo);
-                    };
-                    SurveyUndoRedo.prototype.doUndoRedo = function(dIndex) {
-                        this.index += dIndex;
-                        this.updateCanUndoRedo();
-                        return this.index >= 0 && this.index < this.items.length ? this.items[this.index] : null;
-                    };
-                    Object.defineProperty(SurveyUndoRedo.prototype, "canUndo", {
-                        get: function get() {
-                            return this.index >= 1 && this.index < this.items.length;
-                        },
-                        enumerable: true,
-                        configurable: true
-                    });
-                    Object.defineProperty(SurveyUndoRedo.prototype, "canRedo", {
-                        get: function get() {
-                            return this.items.length > 1 && this.index < this.items.length - 1;
-                        },
-                        enumerable: true,
-                        configurable: true
-                    });
-                    SurveyUndoRedo.prototype.removeOldData = function() {
-                        if (this.items.length - 1 < this.maximumCount) return;
-                        this.items.splice(0, this.items.length - this.maximumCount - 1);
-                    };
-                    return SurveyUndoRedo;
-                }();
-                var UndoRedoItem = exports.UndoRedoItem = function() {
-                    function UndoRedoItem() {}
-                    return UndoRedoItem;
-                }();
+                        var SurveyObjectProperty = exports.SurveyObjectProperty = function() {
+                            function SurveyObjectProperty(property, onPropertyChanged, propertyEditorOptions) {
+                                if (onPropertyChanged === void 0) {
+                                    onPropertyChanged = null;
+                                }
+                                if (propertyEditorOptions === void 0) {
+                                    propertyEditorOptions = null;
+                                }
+                                this.property = property;
+                                this.isApplyingNewValue = false;
+                                this.onPropertyChanged = onPropertyChanged;
+                                this.name = this.property.name;
+                                this.koValue = ko.observable();
+                                this.choices = property.choices;
+                                var self = this;
+                                this.editorType = property.type;
+                                //TODO
+                                if (this.choices != null) {
+                                    this.editorType = "dropdown";
+                                }
+                                var onItemChanged = function onItemChanged(newValue) {
+                                    self.onApplyEditorValue(newValue);
+                                };
+                                this.editor = _propertyEditorBase.SurveyPropertyEditorBase.createEditor(this.editorType, onItemChanged);
+                                this.editor.options = propertyEditorOptions;
+                                this.editorType = this.editor.editorType;
+                                this.modalName = "modelEditor" + this.editorType + this.name;
+                                this.modalNameTarget = "#" + this.modalName;
+                                this.koValue.subscribe(function(newValue) {
+                                    self.onkoValueChanged(newValue);
+                                });
+                                this.koText = ko.computed(function() {
+                                    return self.getValueText(self.koValue());
+                                });
+                                this.koIsDefault = ko.computed(function() {
+                                    return self.property.isDefaultValue(self.koValue());
+                                });
+                            }
+                            Object.defineProperty(SurveyObjectProperty.prototype, "object", {
+                                get: function get() {
+                                    return this.objectValue;
+                                },
+                                set: function set(value) {
+                                    this.objectValue = value;
+                                    this.updateValue();
+                                },
+                                enumerable: true,
+                                configurable: true
+                            });
+                            SurveyObjectProperty.prototype.updateValue = function() {
+                                this.isValueUpdating = true;
+                                this.koValue(this.getValue());
+                                this.editor.setObject(this.object);
+                                this.editor.setTitle(_editorLocalization.editorLocalization.getString("pe.editProperty")["format"](this.property.name));
+                                this.updateEditorData(this.koValue());
+                                this.isValueUpdating = false;
+                            };
+                            SurveyObjectProperty.prototype.onApplyEditorValue = function(newValue) {
+                                this.isApplyingNewValue = true;
+                                this.koValue(newValue);
+                                this.isApplyingNewValue = false;
+                            };
+                            SurveyObjectProperty.prototype.onkoValueChanged = function(newValue) {
+                                if (!this.isApplyingNewValue) {
+                                    this.updateEditorData(newValue);
+                                }
+                                if (this.object == null) return;
+                                if (this.object[this.name] == newValue) return;
+                                if (this.onPropertyChanged != null && !this.isValueUpdating) this.onPropertyChanged(this, newValue);
+                            };
+                            SurveyObjectProperty.prototype.updateEditorData = function(newValue) {
+                                this.editor.value = newValue;
+                            };
+                            SurveyObjectProperty.prototype.getValue = function() {
+                                if (this.property.hasToUseGetValue) return this.property.getValue(this.object);
+                                return this.object[this.name];
+                            };
+                            SurveyObjectProperty.prototype.getValueText = function(value) {
+                                return this.editor.getValueText(value);
+                            };
+                            return SurveyObjectProperty;
+                        }();
 
-                /***/
-            },
-            /* 22 */
-            /***/
-            function(module, exports, __webpack_require__) {
+                        /***/
+                    },
+                    /* 12 */
+                    /***/
+                    function(module, exports, __webpack_require__) {
 
-                "use strict";
+                        "use strict";
 
-                exports.__esModule = true;
-                exports.SurveyEditor = undefined;
+                        exports.__esModule = true;
+                        exports.SurveyPropertyItemValuesEditor = undefined;
 
-                var _editorLocalization = __webpack_require__(7);
+                        var _propertyItemsEditor = __webpack_require__(5);
 
-                var _objectEditor = __webpack_require__(10);
+                        var _propertyEditorBase = __webpack_require__(3);
 
-                var _pagesEditor = __webpack_require__(16);
+                        var __extends = undefined && undefined.__extends || function(d, b) {
+                            for (var p in b) {
+                                if (b.hasOwnProperty(p)) d[p] = b[p];
+                            }
 
-                var _surveyEmbedingWindow = __webpack_require__(19);
+                            function __() {
+                                this.constructor = d;
+                            }
+                            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+                        };
+                        var SurveyPropertyItemValuesEditor = exports.SurveyPropertyItemValuesEditor = function(_super) {
+                            __extends(SurveyPropertyItemValuesEditor, _super);
 
-                var _surveyObjects = __webpack_require__(23);
+                            function SurveyPropertyItemValuesEditor() {
+                                _super.call(this);
+                            }
+                            Object.defineProperty(SurveyPropertyItemValuesEditor.prototype, "editorType", {
+                                get: function get() {
+                                    return "itemvalues";
+                                },
+                                enumerable: true,
+                                configurable: true
+                            });
+                            SurveyPropertyItemValuesEditor.prototype.hasError = function() {
+                                var result = false;
+                                for (var i = 0; i < this.koItems().length; i++) {
+                                    var item = this.koItems()[i];
+                                    item.koHasError(!item.koValue());
+                                    result = result || item.koHasError();
+                                }
+                                return result;
+                            };
+                            SurveyPropertyItemValuesEditor.prototype.createNewEditorItem = function() {
+                                return { koValue: ko.observable(), koText: ko.observable(), koHasError: ko.observable(false) };
+                            };
+                            SurveyPropertyItemValuesEditor.prototype.createEditorItem = function(item) {
+                                var itemValue = item;
+                                var itemText = null;
+                                if (item.value) {
+                                    itemValue = item.value;
+                                    itemText = item.text;
+                                }
+                                return { koValue: ko.observable(itemValue), koText: ko.observable(itemText), koHasError: ko.observable(false) };
+                            };
+                            SurveyPropertyItemValuesEditor.prototype.createItemFromEditorItem = function(editorItem) {
+                                var alwaySaveTextInPropertyEditors = this.options && this.options.alwaySaveTextInPropertyEditors;
+                                var text = editorItem.koText();
+                                if (!alwaySaveTextInPropertyEditors && editorItem.koText() == editorItem.koValue()) {
+                                    text = null;
+                                }
+                                return { value: editorItem.koValue(), text: text };
+                            };
+                            return SurveyPropertyItemValuesEditor;
+                        }(_propertyItemsEditor.SurveyPropertyItemsEditor);
+                        _propertyEditorBase.SurveyPropertyEditorBase.registerEditor("itemvalues", function() {
+                            return new SurveyPropertyItemValuesEditor();
+                        });
 
-                var _objectVerbs = __webpack_require__(20);
+                        /***/
+                    },
+                    /* 13 */
+                    /***/
+                    function(module, exports, __webpack_require__) {
 
-                var _textWorker = __webpack_require__(17);
+                        "use strict";
 
-                var _undoredo = __webpack_require__(21);
+                        exports.__esModule = true;
+                        exports.SurveyPropertyMatrixDropdownColumnsItem = exports.SurveyPropertyDropdownColumnsEditor = undefined;
 
-                var _surveyHelper = __webpack_require__(8);
+                        var _propertyItemsEditor = __webpack_require__(5);
 
-                var _dragdrophelper = __webpack_require__(1);
+                        var _propertyEditorBase = __webpack_require__(3);
 
-                var _json = __webpack_require__(18);
+                        var _propertyItemValuesEditor = __webpack_require__(12);
 
-                var _templateEditorKo = __webpack_require__(24);
+                        var _surveyKnockout = __webpack_require__(2);
 
-                var _template_page = __webpack_require__(25);
+                        var Survey = _interopRequireWildcard(_surveyKnockout);
 
-                var _template_question = __webpack_require__(26);
+                        function _interopRequireWildcard(obj) {
+                            if (obj && obj.__esModule) { return obj; } else {
+                                var newObj = {};
+                                if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } }
+                                newObj.default = obj;
+                                return newObj;
+                            }
+                        }
 
-                var _surveyKnockout = __webpack_require__(2);
+                        var __extends = undefined && undefined.__extends || function(d, b) {
+                            for (var p in b) {
+                                if (b.hasOwnProperty(p)) d[p] = b[p];
+                            }
 
-                var Survey = _interopRequireWildcard(_surveyKnockout);
+                            function __() {
+                                this.constructor = d;
+                            }
+                            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+                        };
+                        var SurveyPropertyDropdownColumnsEditor = exports.SurveyPropertyDropdownColumnsEditor = function(_super) {
+                            __extends(SurveyPropertyDropdownColumnsEditor, _super);
 
-                function _interopRequireWildcard(obj) {
-                    if (obj && obj.__esModule) { return obj; } else {
-                        var newObj = {};
-                        if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } }
-                        newObj.default = obj;
-                        return newObj;
-                    }
-                }
+                            function SurveyPropertyDropdownColumnsEditor() {
+                                _super.call(this);
+                            }
+                            Object.defineProperty(SurveyPropertyDropdownColumnsEditor.prototype, "editorType", {
+                                get: function get() {
+                                    return "matrixdropdowncolumns";
+                                },
+                                enumerable: true,
+                                configurable: true
+                            });
+                            SurveyPropertyDropdownColumnsEditor.prototype.hasError = function() {
+                                var result = false;
+                                for (var i = 0; i < this.koItems().length; i++) {
+                                    result = result || this.koItems()[i].hasError();
+                                }
+                                return result;
+                            };
+                            SurveyPropertyDropdownColumnsEditor.prototype.createNewEditorItem = function() {
+                                return new SurveyPropertyMatrixDropdownColumnsItem(new Survey.MatrixDropdownColumn("", this.options));
+                            };
+                            SurveyPropertyDropdownColumnsEditor.prototype.createEditorItem = function(item) {
+                                return new SurveyPropertyMatrixDropdownColumnsItem(item, this.options);
+                            };
+                            SurveyPropertyDropdownColumnsEditor.prototype.createItemFromEditorItem = function(editorItem) {
+                                var columItem = editorItem;
+                                columItem.apply();
+                                return columItem.column;
+                            };
+                            return SurveyPropertyDropdownColumnsEditor;
+                        }(_propertyItemsEditor.SurveyPropertyItemsEditor);
+                        var SurveyPropertyMatrixDropdownColumnsItem = exports.SurveyPropertyMatrixDropdownColumnsItem = function() {
+                            function SurveyPropertyMatrixDropdownColumnsItem(column, options) {
+                                if (options === void 0) {
+                                    options = null;
+                                }
+                                this.column = column;
+                                this.options = options;
+                                this.cellTypeChoices = this.getPropertyChoices("cellType");
+                                this.colCountChoices = this.getPropertyChoices("colCount");
+                                this.koName = ko.observable(column.name);
+                                this.koCellType = ko.observable(column.cellType);
+                                this.koColCount = ko.observable(column.colCount);
+                                this.koIsRequired = ko.observable(column.isRequired ? true : false);
+                                this.koHasOther = ko.observable(column.hasOther ? true : false);
+                                this.koTitle = ko.observable(column.name === column.title ? "" : column.title);
+                                this.koShowChoices = ko.observable(false);
+                                this.koChoices = ko.observableArray(column.choices);
+                                this.koHasError = ko.observable(false);
+                                this.choicesEditor = new _propertyItemValuesEditor.SurveyPropertyItemValuesEditor();
+                                this.choicesEditor.object = this.column;
+                                this.choicesEditor.value = this.koChoices();
+                                this.choicesEditor.options = this.options;
+                                var self = this;
+                                this.onShowChoicesClick = function() {
+                                    self.koShowChoices(!self.koShowChoices());
+                                };
+                                this.koHasChoices = ko.computed(function() {
+                                    return self.koCellType() == "dropdown" || self.koCellType() == "checkbox" || self.koCellType() == "radiogroup";
+                                });
+                                this.koHasColCount = ko.computed(function() {
+                                    return self.koCellType() == "checkbox" || self.koCellType() == "radiogroup";
+                                });
+                            }
+                            SurveyPropertyMatrixDropdownColumnsItem.prototype.hasError = function() {
+                                this.koHasError(!this.koName());
+                                return this.koHasError() || this.choicesEditor.hasError();
+                            };
+                            SurveyPropertyMatrixDropdownColumnsItem.prototype.apply = function() {
+                                this.column.name = this.koName();
+                                this.column.title = this.koTitle();
+                                this.column.cellType = this.koCellType();
+                                this.column.colCount = this.koColCount();
+                                this.column.isRequired = this.koIsRequired();
+                                this.column.hasOther = this.koHasOther();
+                                this.choicesEditor.onApplyClick();
+                                this.column.choices = this.choicesEditor.value;
+                            };
+                            SurveyPropertyMatrixDropdownColumnsItem.prototype.getPropertyChoices = function(propetyName) {
+                                var properties = Survey.JsonObject.metaData.getProperties("matrixdropdowncolumn");
+                                for (var i = 0; i < properties.length; i++) {
+                                    if (properties[i].name == propetyName) return properties[i].choices;
+                                }
+                                return [];
+                            };
+                            return SurveyPropertyMatrixDropdownColumnsItem;
+                        }();
+                        _propertyEditorBase.SurveyPropertyEditorBase.registerEditor("matrixdropdowncolumns", function() {
+                            return new SurveyPropertyDropdownColumnsEditor();
+                        });
 
-                var SurveyEditor = exports.SurveyEditor = function() {
-                    function SurveyEditor(renderedElement, options) {
-                        if (renderedElement === void 0) {
-                            renderedElement = null;
-                        }
-                        if (options === void 0) {
-                            options = null;
+                        /***/
+                    },
+                    /* 14 */
+                    /***/
+                    function(module, exports, __webpack_require__) {
+
+                        "use strict";
+
+                        exports.__esModule = true;
+                        exports.SurveyPropertyResultfullEditor = undefined;
+
+                        var _propertyModalEditor = __webpack_require__(6);
+
+                        var _propertyEditorBase = __webpack_require__(3);
+
+                        var _editorLocalization = __webpack_require__(7);
+
+                        var _surveyKnockout = __webpack_require__(2);
+
+                        var Survey = _interopRequireWildcard(_surveyKnockout);
+
+                        function _interopRequireWildcard(obj) {
+                            if (obj && obj.__esModule) { return obj; } else {
+                                var newObj = {};
+                                if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } }
+                                newObj.default = obj;
+                                return newObj;
+                            }
                         }
-                        this.stateValue = "";
-                        this.dragDropHelper = null;
-                        this.surveyId = null;
-                        this.surveyPostId = null;
-                        this.alwaySaveTextInPropertyEditors = false;
-                        this.saveNo = 0;
-                        this.timeoutId = -1;
-                        this.options = options;
-                        this.questionTypes = this.getQuestionTypes();
-                        this.koCopiedQuestions = ko.observableArray();
-                        this.koCanDeleteObject = ko.observable(false);
-                        var self = this;
-                        this.koState = ko.observable();
-                        this.koShowSaveButton = ko.observable(false);
-                        this.koShowOptions = ko.observable(false);
-                        this.koTestSurveyWidth = ko.observable("100%");
-                        this.saveButtonClick = function() {
-                            self.doSave();
+
+                        var __extends = undefined && undefined.__extends || function(d, b) {
+                            for (var p in b) {
+                                if (b.hasOwnProperty(p)) d[p] = b[p];
+                            }
+
+                            function __() {
+                                this.constructor = d;
+                            }
+                            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                         };
-                        this.koObjects = ko.observableArray();
-                        this.koSelectedObject = ko.observable();
-                        this.koSelectedObject.subscribe(function(newValue) {
-                            self.selectedObjectChanged(newValue != null ? newValue.value : null);
-                        });
-                        this.koGenerateValidJSON = ko.observable(this.options && this.options.generateValidJSON);
-                        this.koGenerateValidJSON.subscribe(function(newValue) {
-                            if (!self.options) self.options = {};
-                            self.options.generateValidJSON = newValue;
-                            if (self.generateValidJSONChangedCallback) self.generateValidJSONChangedCallback(newValue);
-                        });
-                        this.surveyObjects = new _surveyObjects.SurveyObjects(this.koObjects, this.koSelectedObject);
-                        this.undoRedo = new _undoredo.SurveyUndoRedo();
-                        this.surveyVerbs = new _objectVerbs.SurveyVerbs(function() {
-                            self.setModified();
-                        });
-                        this.selectedObjectEditor = new _objectEditor.SurveyObjectEditor(this.options);
-                        this.selectedObjectEditor.onPropertyValueChanged.add(function(sender, options) {
-                            self.onPropertyValueChanged(options.property, options.object, options.newValue);
-                        });
-                        this.pagesEditor = new _pagesEditor.SurveyPagesEditor(function() {
-                            self.addPage();
-                        }, function(page) {
-                            self.surveyObjects.selectObject(page);
-                        }, function(indexFrom, indexTo) {
-                            self.movePage(indexFrom, indexTo);
-                        }, function(page) {
-                            self.deleteCurrentObject();
-                        });
-                        this.surveyEmbeding = new _surveyEmbedingWindow.SurveyEmbedingWindow();
-                        this.koViewType = ko.observable("designer");
-                        this.koIsShowDesigner = ko.computed(function() {
-                            return self.koViewType() == "designer";
+                        var SurveyPropertyResultfullEditor = exports.SurveyPropertyResultfullEditor = function(_super) {
+                            __extends(SurveyPropertyResultfullEditor, _super);
+
+                            function SurveyPropertyResultfullEditor() {
+                                _super.call(this);
+                                this.koUrl = ko.observable();
+                                this.koPath = ko.observable();
+                                this.koValueName = ko.observable();
+                                this.koTitleName = ko.observable();
+                                this.createSurvey();
+                                var self = this;
+                                this.koUrl.subscribe(function(newValue) {
+                                    self.question.choicesByUrl.url = newValue;
+                                    self.run();
+                                });
+                                this.koPath.subscribe(function(newValue) {
+                                    self.question.choicesByUrl.path = newValue;
+                                    self.run();
+                                });
+                                this.koValueName.subscribe(function(newValue) {
+                                    self.question.choicesByUrl.valueName = newValue;
+                                    self.run();
+                                });
+                                this.koTitleName.subscribe(function(newValue) {
+                                    self.question.choicesByUrl.titleName = newValue;
+                                    self.run();
+                                });
+                            }
+                            Object.defineProperty(SurveyPropertyResultfullEditor.prototype, "editorType", {
+                                get: function get() {
+                                    return "restfull";
+                                },
+                                enumerable: true,
+                                configurable: true
+                            });
+                            Object.defineProperty(SurveyPropertyResultfullEditor.prototype, "restfullValue", {
+                                get: function get() {
+                                    return this.value;
+                                },
+                                enumerable: true,
+                                configurable: true
+                            });
+                            SurveyPropertyResultfullEditor.prototype.getValueText = function(value) {
+                                if (!value || !value.url) return _editorLocalization.editorLocalization.getString("pe.empty");
+                                var str = value.url;
+                                if (str.length > 20) {
+                                    str = str.substr(0, 20) + "...";
+                                }
+                                return str;
+                            };
+                            SurveyPropertyResultfullEditor.prototype.onValueChanged = function() {
+                                var val = this.restfullValue;
+                                this.koUrl(val ? val.url : "");
+                                this.koPath(val ? val.path : "");
+                                this.koValueName(val ? val.valueName : "");
+                                this.koTitleName(val ? val.titleName : "");
+                                this.survey.render("restfullSurvey");
+                            };
+                            SurveyPropertyResultfullEditor.prototype.onBeforeApply = function() {
+                                var val = new Survey.ChoicesRestfull();
+                                val.url = this.koUrl();
+                                val.path = this.koPath();
+                                val.valueName = this.koValueName();
+                                val.titleName = this.koTitleName();
+                                this.setValueCore(val);
+                            };
+                            SurveyPropertyResultfullEditor.prototype.run = function() {
+                                this.question.choicesByUrl.run();
+                            };
+                            SurveyPropertyResultfullEditor.prototype.createSurvey = function() {
+                                this.survey = new Survey.Survey();
+                                this.survey.showNavigationButtons = false;
+                                this.survey.showQuestionNumbers = "off";
+                                var page = this.survey.addNewPage("page1");
+                                this.question = page.addNewQuestion("dropdown", "q1");
+                                this.question.title = _editorLocalization.editorLocalization.getString("pe.testService");
+                                this.question.choices = [];
+                                this.survey.render("restfullSurvey");
+                            };
+                            return SurveyPropertyResultfullEditor;
+                        }(_propertyModalEditor.SurveyPropertyModalEditor);
+                        _propertyEditorBase.SurveyPropertyEditorBase.registerEditor("restfull", function() {
+                            return new SurveyPropertyResultfullEditor();
                         });
-                        this.selectDesignerClick = function() {
-                            self.showDesigner();
-                        };
-                        this.selectEditorClick = function() {
-                            self.showJsonEditor();
-                        };
-                        this.selectTestClick = function() {
-                            self.showTestSurvey();
-                        };
-                        this.selectEmbedClick = function() {
-                            self.showEmbedEditor();
-                        };
-                        this.generateValidJSONClick = function() {
-                            self.koGenerateValidJSON(true);
-                        };
-                        this.generateReadableJSONClick = function() {
-                            self.koGenerateValidJSON(false);
-                        };
-                        this.runSurveyClick = function() {
-                            self.showLiveSurvey();
-                        };
-                        this.embedingSurveyClick = function() {
-                            self.showSurveyEmbeding();
-                        };
-                        this.deleteObjectClick = function() {
-                            self.deleteCurrentObject();
-                        };
-                        this.draggingQuestion = function(questionType, e) {
-                            self.doDraggingQuestion(questionType, e);
-                        };
-                        this.clickQuestion = function(questionType) {
-                            self.doClickQuestion(questionType);
-                        };
-                        this.draggingCopiedQuestion = function(item, e) {
-                            self.doDraggingCopiedQuestion(item.json, e);
-                        };
-                        this.clickCopiedQuestion = function(item) {
-                            self.doClickCopiedQuestion(item.json);
-                        };
-                        this.dragEnd = function(item, e) {
-                            self.dragDropHelper.end();
-                        };
-                        this.doUndoClick = function() {
-                            self.doUndoRedo(self.undoRedo.undo());
-                        };
-                        this.doRedoClick = function() {
-                            self.doUndoRedo(self.undoRedo.redo());
-                        };
-                        if (renderedElement) {
-                            // debugger;
-                            this.render(renderedElement);
-                        }
-                    }
-                    Object.defineProperty(SurveyEditor.prototype, "survey", {
-                        get: function get() {
-                            return this.surveyValue;
-                        },
-                        enumerable: true,
-                        configurable: true
-                    });
-                    SurveyEditor.prototype.render = function(element) {
-                        if (element === void 0) {
-                            element = null;
+
+                        /***/
+                    },
+                    /* 15 */
+                    /***/
+                    function(module, exports, __webpack_require__) {
+
+                        "use strict";
+
+                        exports.__esModule = true;
+                        exports.SurveyPropertyTriggerObjects = exports.SurveyPropertySetValueTrigger = exports.SurveyPropertyVisibleTrigger = exports.SurveyPropertyTrigger = exports.SurveyPropertyTriggersEditor = undefined;
+
+                        var _propertyItemsEditor = __webpack_require__(5);
+
+                        var _propertyEditorBase = __webpack_require__(3);
+
+                        var _editorLocalization = __webpack_require__(7);
+
+                        var _surveyKnockout = __webpack_require__(2);
+
+                        var Survey = _interopRequireWildcard(_surveyKnockout);
+
+                        function _interopRequireWildcard(obj) {
+                            if (obj && obj.__esModule) { return obj; } else {
+                                var newObj = {};
+                                if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } }
+                                newObj.default = obj;
+                                return newObj;
+                            }
                         }
-                        var self = this;
-                        if (element && typeof element == "string") {
-                            element = document.getElementById(element);
+
+                        var __extends = undefined && undefined.__extends || function(d, b) {
+                            for (var p in b) {
+                                if (b.hasOwnProperty(p)) d[p] = b[p];
+                            }
+
+                            function __() {
+                                this.constructor = d;
+                            }
+                            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+                        };
+                        var SurveyPropertyTriggersEditor = exports.SurveyPropertyTriggersEditor = function(_super) {
+                            __extends(SurveyPropertyTriggersEditor, _super);
+
+                            function SurveyPropertyTriggersEditor() {
+                                _super.call(this);
+                                this.availableTriggers = [];
+                                this.triggerClasses = [];
+                                var self = this;
+                                this.onDeleteClick = function() {
+                                    self.koItems.remove(self.koSelected());
+                                };
+                                this.onAddClick = function(triggerType) {
+                                    self.addItem(triggerType);
+                                };
+                                this.koSelected = ko.observable(null);
+                                this.koPages = ko.observableArray();
+                                this.koQuestions = ko.observableArray();
+                                this.triggerClasses = Survey.JsonObject.metaData.getChildrenClasses("surveytrigger", true);
+                                this.availableTriggers = this.getAvailableTriggers();
+                            }
+                            Object.defineProperty(SurveyPropertyTriggersEditor.prototype, "editorType", {
+                                get: function get() {
+                                    return "triggers";
+                                },
+                                enumerable: true,
+                                configurable: true
+                            });
+                            SurveyPropertyTriggersEditor.prototype.onValueChanged = function() {
+                                _super.prototype.onValueChanged.call(this);
+                                if (this.object) {
+                                    this.koPages(this.getNames(this.object.pages));
+                                    this.koQuestions(this.getNames(this.object.getAllQuestions()));
+                                }
+                                if (this.koSelected) {
+                                    this.koSelected(this.koItems().length > 0 ? this.koItems()[0] : null);
+                                }
+                            };
+                            SurveyPropertyTriggersEditor.prototype.addItem = function(triggerType) {
+                                var trigger = Survey.JsonObject.metaData.createClass(triggerType);
+                                var triggerItem = this.createPropertyTrigger(trigger);
+                                this.koItems.push(triggerItem);
+                                this.koSelected(triggerItem);
+                            };
+                            SurveyPropertyTriggersEditor.prototype.createEditorItem = function(item) {
+                                var jsonObj = new Survey.JsonObject();
+                                var trigger = Survey.JsonObject.metaData.createClass(item.getType());
+                                jsonObj.toObject(item, trigger);
+                                return this.createPropertyTrigger(trigger);
+                            };
+                            SurveyPropertyTriggersEditor.prototype.createItemFromEditorItem = function(editorItem) {
+                                var editorTrigger = editorItem;
+                                return editorTrigger.createTrigger();
+                            };
+                            SurveyPropertyTriggersEditor.prototype.getAvailableTriggers = function() {
+                                var result = [];
+                                for (var i = 0; i < this.triggerClasses.length; i++) {
+                                    result.push(this.triggerClasses[i].name);
+                                }
+                                return result;
+                            };
+                            SurveyPropertyTriggersEditor.prototype.getNames = function(items) {
+                                var names = [];
+                                for (var i = 0; i < items.length; i++) {
+                                    var item = items[i];
+                                    if (item["name"]) {
+                                        names.push(item["name"]);
+                                    }
+                                }
+                                return names;
+                            };
+                            SurveyPropertyTriggersEditor.prototype.createPropertyTrigger = function(trigger) {
+                                var triggerItem = null;
+                                if (trigger.getType() == "visibletrigger") {
+                                    triggerItem = new SurveyPropertyVisibleTrigger(trigger, this.koPages, this.koQuestions);
+                                }
+                                if (trigger.getType() == "setvaluetrigger") {
+                                    triggerItem = new SurveyPropertySetValueTrigger(trigger, this.koQuestions);
+                                }
+                                if (!triggerItem) {
+                                    triggerItem = new SurveyPropertyTrigger(trigger);
+                                }
+                                return triggerItem;
+                            };
+                            return SurveyPropertyTriggersEditor;
+                        }(_propertyItemsEditor.SurveyPropertyItemsEditor);
+                        var SurveyPropertyTrigger = exports.SurveyPropertyTrigger = function() {
+                            function SurveyPropertyTrigger(trigger) {
+                                this.trigger = trigger;
+                                this.operators = ["empty", "notempty", "equal", "notequal", "contains", "notcontains", "greater", "less", "greaterorequal", "lessorequal"];
+                                this.availableOperators = [];
+                                this.createOperators();
+                                this.triggerType = trigger.getType();
+                                this.koType = ko.observable(this.triggerType);
+                                this.koName = ko.observable(trigger.name);
+                                this.koOperator = ko.observable(trigger.operator);
+                                this.koValue = ko.observable(trigger.value);
+                                var self = this;
+                                this.koRequireValue = ko.computed(function() {
+                                    return self.koOperator() != "empty" && self.koOperator() != "notempty";
+                                });
+                                this.koIsValid = ko.computed(function() {
+                                    if (self.koName() && (!self.koRequireValue() || self.koValue())) return true;
+                                    return false;
+                                });
+                                this.koText = ko.computed(function() {
+                                    self.koName();
+                                    self.koOperator();
+                                    self.koValue();
+                                    return self.getText();
+                                });
+                            }
+                            SurveyPropertyTrigger.prototype.createTrigger = function() {
+                                var trigger = Survey.JsonObject.metaData.createClass(this.triggerType);
+                                trigger.name = this.koName();
+                                trigger.operator = this.koOperator();
+                                trigger.value = this.koValue();
+                                return trigger;
+                            };
+                            SurveyPropertyTrigger.prototype.createOperators = function() {
+                                for (var i = 0; i < this.operators.length; i++) {
+                                    var name = this.operators[i];
+                                    this.availableOperators.push({ name: name, text: _editorLocalization.editorLocalization.getString("op." + name) });
+                                }
+                            };
+                            SurveyPropertyTrigger.prototype.getText = function() {
+                                if (!this.koIsValid()) return _editorLocalization.editorLocalization.getString("pe.triggerNotSet");
+                                return _editorLocalization.editorLocalization.getString("pe.triggerRunIf") + " '" + this.koName() + "' " + this.getOperatorText() + this.getValueText();
+                            };
+                            SurveyPropertyTrigger.prototype.getOperatorText = function() {
+                                var op = this.koOperator();
+                                for (var i = 0; i < this.availableOperators.length; i++) {
+                                    if (this.availableOperators[i].name == op) return this.availableOperators[i].text;
+                                }
+                                return op;
+                            };
+                            SurveyPropertyTrigger.prototype.getValueText = function() {
+                                if (!this.koRequireValue()) return "";
+                                return " " + this.koValue();
+                            };
+                            return SurveyPropertyTrigger;
+                        }();
+                        var SurveyPropertyVisibleTrigger = exports.SurveyPropertyVisibleTrigger = function(_super) {
+                            __extends(SurveyPropertyVisibleTrigger, _super);
+
+                            function SurveyPropertyVisibleTrigger(trigger, koPages, koQuestions) {
+                                _super.call(this, trigger);
+                                this.trigger = trigger;
+                                this.pages = new SurveyPropertyTriggerObjects(_editorLocalization.editorLocalization.getString("pe.triggerMakePagesVisible"), koPages(), trigger.pages);
+                                this.questions = new SurveyPropertyTriggerObjects(_editorLocalization.editorLocalization.getString("pe.triggerMakeQuestionsVisible"), koQuestions(), trigger.questions);
+                            }
+                            SurveyPropertyVisibleTrigger.prototype.createTrigger = function() {
+                                var trigger = _super.prototype.createTrigger.call(this);
+                                trigger.pages = this.pages.koChoosen();
+                                trigger.questions = this.questions.koChoosen();
+                                return trigger;
+                            };
+                            return SurveyPropertyVisibleTrigger;
+                        }(SurveyPropertyTrigger);
+                        var SurveyPropertySetValueTrigger = exports.SurveyPropertySetValueTrigger = function(_super) {
+                            __extends(SurveyPropertySetValueTrigger, _super);
+
+                            function SurveyPropertySetValueTrigger(trigger, koQuestions) {
+                                _super.call(this, trigger);
+                                this.trigger = trigger;
+                                this.koQuestions = koQuestions;
+                                this.kosetToName = ko.observable(trigger.setToName);
+                                this.kosetValue = ko.observable(trigger.setValue);
+                                this.koisVariable = ko.observable(trigger.isVariable);
+                            }
+                            SurveyPropertySetValueTrigger.prototype.createTrigger = function() {
+                                var trigger = _super.prototype.createTrigger.call(this);
+                                trigger.setToName = this.kosetToName();
+                                trigger.setValue = this.kosetValue();
+                                trigger.isVariable = this.koisVariable();
+                                return trigger;
+                            };
+                            return SurveyPropertySetValueTrigger;
+                        }(SurveyPropertyTrigger);
+                        var SurveyPropertyTriggerObjects = exports.SurveyPropertyTriggerObjects = function() {
+                            function SurveyPropertyTriggerObjects(title, allObjects, choosenObjects) {
+                                this.title = title;
+                                this.koChoosen = ko.observableArray(choosenObjects);
+                                var array = [];
+                                for (var i = 0; i < allObjects.length; i++) {
+                                    var item = allObjects[i];
+                                    if (choosenObjects.indexOf(item) < 0) {
+                                        array.push(item);
+                                    }
+                                }
+                                this.koObjects = ko.observableArray(array);
+                                this.koSelected = ko.observable();
+                                this.koChoosenSelected = ko.observable();
+                                var self = this;
+                                this.onDeleteClick = function() {
+                                    self.deleteItem();
+                                };
+                                this.onAddClick = function() {
+                                    self.addItem();
+                                };
+                            }
+                            SurveyPropertyTriggerObjects.prototype.deleteItem = function() {
+                                this.changeItems(this.koChoosenSelected(), this.koChoosen, this.koObjects);
+                            };
+                            SurveyPropertyTriggerObjects.prototype.addItem = function() {
+                                this.changeItems(this.koSelected(), this.koObjects, this.koChoosen);
+                            };
+                            SurveyPropertyTriggerObjects.prototype.changeItems = function(item, removedFrom, addTo) {
+                                removedFrom.remove(item);
+                                addTo.push(item);
+                                removedFrom.sort();
+                                addTo.sort();
+                            };
+                            return SurveyPropertyTriggerObjects;
+                        }();
+                        _propertyEditorBase.SurveyPropertyEditorBase.registerEditor("triggers", function() {
+                            return new SurveyPropertyTriggersEditor();
+                        });
+
+                        /***/
+                    },
+                    /* 16 */
+                    /***/
+                    function(module, exports, __webpack_require__) {
+
+                        "use strict";
+
+                        exports.__esModule = true;
+                        exports.SurveyPagesEditor = undefined;
+
+                        var _surveyHelper = __webpack_require__(8);
+
+                        var SurveyPagesEditor = exports.SurveyPagesEditor = function() {
+                            function SurveyPagesEditor(onAddNewPageCallback, onSelectPageCallback, onMovePageCallback, onDeletePageCallback) {
+                                if (onAddNewPageCallback === void 0) {
+                                    onAddNewPageCallback = null;
+                                }
+                                if (onSelectPageCallback === void 0) {
+                                    onSelectPageCallback = null;
+                                }
+                                if (onMovePageCallback === void 0) {
+                                    onMovePageCallback = null;
+                                }
+                                if (onDeletePageCallback === void 0) {
+                                    onDeletePageCallback = null;
+                                }
+                                this.draggingPage = null;
+                                this.koPages = ko.observableArray();
+                                this.koIsValid = ko.observable(false);
+                                this.onAddNewPageCallback = onAddNewPageCallback;
+                                this.onSelectPageCallback = onSelectPageCallback;
+                                this.onMovePageCallback = onMovePageCallback;
+                                this.onDeletePageCallback = onDeletePageCallback;
+                                var self = this;
+                                this.selectPageClick = function(pageItem) {
+                                    if (self.onSelectPageCallback) {
+                                        self.onSelectPageCallback(pageItem.page);
+                                    }
+                                };
+                                this.keyDown = function(el, e) {
+                                    self.onKeyDown(el, e);
+                                };
+                                this.dragStart = function(el) {
+                                    self.draggingPage = el;
+                                };
+                                this.dragOver = function(el) {};
+                                this.dragEnd = function() {
+                                    self.draggingPage = null;
+                                };
+                                this.dragDrop = function(el) {
+                                    self.moveDraggingPageTo(el);
+                                };
+                            }
+                            Object.defineProperty(SurveyPagesEditor.prototype, "survey", {
+                                get: function get() {
+                                    return this.surveyValue;
+                                },
+                                set: function set(value) {
+                                    this.surveyValue = value;
+                                    this.koIsValid(this.surveyValue != null);
+                                    this.updatePages();
+                                },
+                                enumerable: true,
+                                configurable: true
+                            });
+                            SurveyPagesEditor.prototype.setSelectedPage = function(page) {
+                                var pages = this.koPages();
+                                for (var i = 0; i < pages.length; i++) {
+                                    pages[i].koSelected(pages[i].page == page);
+                                }
+                            };
+                            SurveyPagesEditor.prototype.addNewPageClick = function() {
+                                if (this.onAddNewPageCallback) {
+                                    this.onAddNewPageCallback();
+                                }
+                            };
+                            SurveyPagesEditor.prototype.removePage = function(page) {
+                                var index = this.getIndexByPage(page);
+                                if (index > -1) {
+                                    this.koPages.splice(index, 1);
+                                }
+                            };
+                            SurveyPagesEditor.prototype.changeName = function(page) {
+                                var index = this.getIndexByPage(page);
+                                if (index > -1) {
+                                    this.koPages()[index].title(_surveyHelper.SurveyHelper.getObjectName(page));
+                                }
+                            };
+                            SurveyPagesEditor.prototype.getIndexByPage = function(page) {
+                                var pages = this.koPages();
+                                for (var i = 0; i < pages.length; i++) {
+                                    if (pages[i].page == page) return i;
+                                }
+                                return -1;
+                            };
+                            SurveyPagesEditor.prototype.onKeyDown = function(el, e) {
+                                if (this.koPages().length <= 1) return;
+                                var pages = this.koPages();
+                                var pageIndex = -1;
+                                for (var i = 0; i < pages.length; i++) {
+                                    if (pages[i].page && pages[i].koSelected()) {
+                                        pageIndex = i;
+                                    }
+                                }
+                                if (pageIndex < 0) return;
+                                if (e.keyCode == 46 && this.onDeletePageCallback) this.onDeletePageCallback(el.page);
+                                if ((e.keyCode == 37 || e.keyCode == 39) && this.onSelectPageCallback) {
+                                    pageIndex += e.keyCode == 37 ? -1 : 1;
+                                    if (pageIndex < 0) pageIndex = pages.length - 1;
+                                    if (pageIndex >= pages.length) pageIndex = 0;
+                                    var page = pages[pageIndex].page;
+                                    this.onSelectPageCallback(page);
+                                    this.setSelectedPage(page);
+                                }
+                            };
+                            SurveyPagesEditor.prototype.updatePages = function() {
+                                if (this.surveyValue == null) {
+                                    this.koPages([]);
+                                    return;
+                                }
+                                var pages = [];
+                                for (var i = 0; i < this.surveyValue.pages.length; i++) {
+                                    var page = this.surveyValue.pages[i];
+                                    pages.push({
+                                        title: ko.observable(_surveyHelper.SurveyHelper.getObjectName(page)),
+                                        page: page,
+                                        koSelected: ko.observable(false)
+                                    });
+                                }
+                                this.koPages(pages);
+                            };
+                            SurveyPagesEditor.prototype.moveDraggingPageTo = function(toPage) {
+                                if (toPage == null || toPage == this.draggingPage) {
+                                    this.draggingPage = null;
+                                    return;
+                                }
+                                if (this.draggingPage == null) return;
+                                var index = this.koPages().indexOf(this.draggingPage);
+                                var indexTo = this.koPages().indexOf(toPage);
+                                if (this.onMovePageCallback) {
+                                    this.onMovePageCallback(index, indexTo);
+                                }
+                            };
+                            return SurveyPagesEditor;
+                        }();
+
+                        /***/
+                    },
+                    /* 17 */
+                    /***/
+                    function(module, exports, __webpack_require__) {
+
+                        "use strict";
+
+                        exports.__esModule = true;
+                        exports.SurveyTextWorker = undefined;
+
+                        var _json = __webpack_require__(18);
+
+                        var _surveyKnockout = __webpack_require__(2);
+
+                        var Survey = _interopRequireWildcard(_surveyKnockout);
+
+                        function _interopRequireWildcard(obj) {
+                            if (obj && obj.__esModule) { return obj; } else {
+                                var newObj = {};
+                                if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } }
+                                newObj.default = obj;
+                                return newObj;
+                            }
                         }
-                        if (element) {
-                            this.renderedElement = element;
+
+                        var TextParserPropery = function() {
+                            function TextParserPropery() {}
+                            return TextParserPropery;
+                        }();
+                        var SurveyTextWorker = exports.SurveyTextWorker = function() {
+                            function SurveyTextWorker(text) {
+                                this.text = text;
+                                if (!this.text || this.text.trim() == "") {
+                                    this.text = "{}";
+                                }
+                                this.errors = [];
+                                this.process();
+                            }
+                            Object.defineProperty(SurveyTextWorker.prototype, "survey", {
+                                get: function get() {
+                                    return this.surveyValue;
+                                },
+                                enumerable: true,
+                                configurable: true
+                            });
+                            Object.defineProperty(SurveyTextWorker.prototype, "isJsonCorrect", {
+                                get: function get() {
+                                    return this.surveyValue != null;
+                                },
+                                enumerable: true,
+                                configurable: true
+                            });
+                            SurveyTextWorker.prototype.process = function() {
+                                try {
+                                    this.jsonValue = new _json.SurveyJSON5(1).parse(this.text);
+                                } catch (error) {
+                                    this.errors.push({ pos: { start: error.at, end: -1 }, text: error.message });
+                                }
+                                if (this.jsonValue != null) {
+                                    this.updateJsonPositions(this.jsonValue);
+                                    this.surveyValue = new Survey.Survey(this.jsonValue);
+                                    if (this.surveyValue.jsonErrors != null) {
+                                        for (var i = 0; i < this.surveyValue.jsonErrors.length; i++) {
+                                            var error = this.surveyValue.jsonErrors[i];
+                                            this.errors.push({ pos: { start: error.at, end: -1 }, text: error.getFullDescription() });
+                                        }
+                                    }
+                                }
+                                this.surveyObjects = this.createSurveyObjects();
+                                this.setEditorPositionByChartAt(this.surveyObjects);
+                                this.setEditorPositionByChartAt(this.errors);
+                            };
+                            SurveyTextWorker.prototype.updateJsonPositions = function(jsonObj) {
+                                jsonObj["pos"]["self"] = jsonObj;
+                                for (var key in jsonObj) {
+                                    var obj = jsonObj[key];
+                                    if (obj && obj["pos"]) {
+                                        jsonObj["pos"][key] = obj["pos"];
+                                        this.updateJsonPositions(obj);
+                                    }
+                                }
+                            };
+                            SurveyTextWorker.prototype.createSurveyObjects = function() {
+                                var result = [];
+                                if (this.surveyValue == null) return result;
+                                this.isSurveyAsPage = false;
+                                for (var i = 0; i < this.surveyValue.pages.length; i++) {
+                                    var page = this.surveyValue.pages[i];
+                                    if (i == 0 && !page["pos"]) {
+                                        page["pos"] = this.surveyValue["pos"];
+                                        this.isSurveyAsPage = true;
+                                    }
+                                    result.push(page);
+                                    for (var j = 0; j < page.questions.length; j++) {
+                                        result.push(page.questions[j]);
+                                    }
+                                }
+                                return result;
+                            };
+                            SurveyTextWorker.prototype.setEditorPositionByChartAt = function(objects) {
+                                if (objects == null || objects.length == 0) return;
+                                var position = { row: 0, column: 0 };
+                                var atObjectsArray = this.getAtArray(objects);
+                                var startAt = 0;
+                                for (var i = 0; i < atObjectsArray.length; i++) {
+                                    var at = atObjectsArray[i].at;
+                                    position = this.getPostionByChartAt(position, startAt, at);
+                                    var obj = atObjectsArray[i].obj;
+                                    if (!obj.position) obj.position = {};
+                                    if (at == obj.pos.start) {
+                                        obj.position.start = position;
+                                    } else {
+                                        if (at == obj.pos.end) {
+                                            obj.position.end = position;
+                                        }
+                                    }
+                                    startAt = at;
+                                }
+                            };
+                            SurveyTextWorker.prototype.getPostionByChartAt = function(startPosition, startAt, at) {
+                                var result = { row: startPosition.row, column: startPosition.column };
+                                var curChar = startAt;
+                                while (curChar < at) {
+                                    if (this.text.charAt(curChar) == SurveyTextWorker.newLineChar) {
+                                        result.row++;
+                                        result.column = 0;
+                                    } else {
+                                        result.column++;
+                                    }
+                                    curChar++;
+                                }
+                                return result;
+                            };
+                            SurveyTextWorker.prototype.getAtArray = function(objects) {
+                                var result = [];
+                                for (var i = 0; i < objects.length; i++) {
+                                    var obj = objects[i];
+                                    var pos = obj.pos;
+                                    if (!pos) continue;
+                                    result.push({ at: pos.start, obj: obj });
+                                    if (pos.end > 0) {
+                                        result.push({ at: pos.end, obj: obj });
+                                    }
+                                }
+                                return result.sort(function(el1, el2) {
+                                    if (el1.at > el2.at) return 1;
+                                    if (el1.at < el2.at) return -1;
+                                    return 0;
+                                });
+                            };
+                            return SurveyTextWorker;
+                        }();
+
+                        /***/
+                    },
+                    /* 18 */
+                    /***/
+                    function(module, exports) {
+
+                        'use strict';
+
+                        exports.__esModule = true;
+
+                        var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) { return typeof obj; } : function(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
+
+                        // This file is based on JSON5, http://json5.org/
+                        // The modification for getting object and properties location 'at' were maden.
+                        var SurveyJSON5 = exports.SurveyJSON5 = function() {
+                            function SurveyJSON5(parseType) {
+                                if (parseType === void 0) {
+                                    parseType = 0;
+                                }
+                                this.parseType = parseType;
+                            }
+                            SurveyJSON5.prototype.parse = function(source, reviver, startFrom, endAt) {
+                                if (reviver === void 0) {
+                                    reviver = null;
+                                }
+                                if (startFrom === void 0) {
+                                    startFrom = 0;
+                                }
+                                if (endAt === void 0) {
+                                    endAt = -1;
+                                }
+                                var result;
+                                this.text = String(source);
+                                this.at = startFrom;
+                                this.endAt = endAt;
+                                this.ch = ' ';
+                                result = this.value();
+                                this.white();
+                                if (this.ch) {
+                                    this.error("Syntax error");
+                                }
+                                // If there is a reviver function, we recursively walk the new structure,
+                                // passing each name/value pair to the reviver function for possible
+                                // transformation, starting with a temporary root object that holds the result
+                                // in an empty key. If there is not a reviver function, we simply return the
+                                // result.
+                                return typeof reviver === 'function' ? function walk(holder, key) {
+                                    var k,
+                                        v,
+                                        value = holder[key];
+                                    if (value && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {
+                                        for (k in value) {
+                                            if (Object.prototype.hasOwnProperty.call(value, k)) {
+                                                v = walk(value, k);
+                                                if (v !== undefined) {
+                                                    value[k] = v;
+                                                } else {
+                                                    delete value[k];
+                                                }
+                                            }
+                                        }
+                                    }
+                                    return reviver.call(holder, key, value);
+                                }({ '': result }, '') : result;
+                            };
+                            SurveyJSON5.prototype.error = function(m) {
+                                // Call error when something is wrong.
+                                var error = new SyntaxError();
+                                error.message = m;
+                                error["at"] = this.at;
+                                throw error;
+                            };
+                            SurveyJSON5.prototype.next = function(c) {
+                                if (c === void 0) {
+                                    c = null;
+                                }
+                                // If a c parameter is provided, verify that it matches the current character.
+                                if (c && c !== this.ch) {
+                                    this.error("Expected '" + c + "' instead of '" + this.ch + "'");
+                                }
+                                // Get the this.next character. When there are no more characters,
+                                // return the empty string.
+                                this.ch = this.chartAt();
+                                this.at += 1;
+                                return this.ch;
+                            };
+                            SurveyJSON5.prototype.peek = function() {
+                                // Get the this.next character without consuming it or
+                                // assigning it to the this.ch varaible.
+                                return this.chartAt();
+                            };
+                            SurveyJSON5.prototype.chartAt = function() {
+                                if (this.endAt > -1 && this.at >= this.endAt) return '';
+                                return this.text.charAt(this.at);
+                            };
+                            SurveyJSON5.prototype.identifier = function() {
+                                // Parse an identifier. Normally, reserved words are disallowed here, but we
+                                // only use this for unquoted object keys, where reserved words are allowed,
+                                // so we don't check for those here. References:
+                                // - http://es5.github.com/#x7.6
+                                // - https://developer.mozilla.org/en/Core_JavaScript_1.5_Guide/Core_Language_Features#Variables
+                                // - http://docstore.mik.ua/orelly/webprog/jscript/ch02_07.htm
+                                // TODO Identifiers can have Unicode "letters" in them; add support for those.
+                                var key = this.ch;
+                                // Identifiers must start with a letter, _ or $.
+                                if (this.ch !== '_' && this.ch !== '$' && (this.ch < 'a' || this.ch > 'z') && (this.ch < 'A' || this.ch > 'Z')) {
+                                    this.error("Bad identifier");
+                                }
+                                // Subsequent characters can contain digits.
+                                while (this.next() && (this.ch === '_' || this.ch === '$' || this.ch >= 'a' && this.ch <= 'z' || this.ch >= 'A' && this.ch <= 'Z' || this.ch >= '0' && this.ch <= '9')) {
+                                    key += this.ch;
+                                }
+                                return key;
+                            };
+                            SurveyJSON5.prototype.number = function() {
+                                // Parse a number value.
+                                var number,
+                                    sign = '',
+                                    string = '',
+                                    base = 10;
+                                if (this.ch === '-' || this.ch === '+') {
+                                    sign = this.ch;
+                                    this.next(this.ch);
+                                }
+                                // support for Infinity (could tweak to allow other words):
+                                if (this.ch === 'I') {
+                                    number = this.word();
+                                    if (typeof number !== 'number' || isNaN(number)) {
+                                        this.error('Unexpected word for number');
+                                    }
+                                    return sign === '-' ? -number : number;
+                                }
+                                // support for NaN
+                                if (this.ch === 'N') {
+                                    number = this.word();
+                                    if (!isNaN(number)) {
+                                        this.error('expected word to be NaN');
+                                    }
+                                    // ignore sign as -NaN also is NaN
+                                    return number;
+                                }
+                                if (this.ch === '0') {
+                                    string += this.ch;
+                                    this.next();
+                                    if (this.ch === 'x' || this.ch === 'X') {
+                                        string += this.ch;
+                                        this.next();
+                                        base = 16;
+                                    } else if (this.ch >= '0' && this.ch <= '9') {
+                                        this.error('Octal literal');
+                                    }
+                                }
+                                switch (base) {
+                                    case 10:
+                                        while (this.ch >= '0' && this.ch <= '9') {
+                                            string += this.ch;
+                                            this.next();
+                                        }
+                                        if (this.ch === '.') {
+                                            string += '.';
+                                            while (this.next() && this.ch >= '0' && this.ch <= '9') {
+                                                string += this.ch;
+                                            }
+                                        }
+                                        if (this.ch === 'e' || this.ch === 'E') {
+                                            string += this.ch;
+                                            this.next();
+                                            if (this.ch === '-' || this.ch === '+') {
+                                                string += this.ch;
+                                                this.next();
+                                            }
+                                            while (this.ch >= '0' && this.ch <= '9') {
+                                                string += this.ch;
+                                                this.next();
+                                            }
+                                        }
+                                        break;
+                                    case 16:
+                                        while (this.ch >= '0' && this.ch <= '9' || this.ch >= 'A' && this.ch <= 'F' || this.ch >= 'a' && this.ch <= 'f') {
+                                            string += this.ch;
+                                            this.next();
+                                        }
+                                        break;
+                                }
+                                if (sign === '-') {
+                                    number = -string;
+                                } else {
+                                    number = +string;
+                                }
+                                if (!isFinite(number)) {
+                                    this.error("Bad number");
+                                } else {
+                                    return number;
+                                }
+                            };
+                            SurveyJSON5.prototype.string = function() {
+                                // Parse a string value.
+                                var hex,
+                                    i,
+                                    string = '',
+                                    delim,
+                                    // double quote or single quote
+                                    uffff;
+                                // When parsing for string values, we must look for ' or " and \ characters.
+                                if (this.ch === '"' || this.ch === "'") {
+                                    delim = this.ch;
+                                    while (this.next()) {
+                                        if (this.ch === delim) {
+                                            this.next();
+                                            return string;
+                                        } else if (this.ch === '\\') {
+                                            this.next();
+                                            if (this.ch === 'u') {
+                                                uffff = 0;
+                                                for (i = 0; i < 4; i += 1) {
+                                                    hex = parseInt(this.next(), 16);
+                                                    if (!isFinite(hex)) {
+                                                        break;
+                                                    }
+                                                    uffff = uffff * 16 + hex;
+                                                }
+                                                string += String.fromCharCode(uffff);
+                                            } else if (this.ch === '\r') {
+                                                if (this.peek() === '\n') {
+                                                    this.next();
+                                                }
+                                            } else if (typeof SurveyJSON5.escapee[this.ch] === 'string') {
+                                                string += SurveyJSON5.escapee[this.ch];
+                                            } else {
+                                                break;
+                                            }
+                                        } else if (this.ch === '\n') {
+                                            // unescaped newlines are invalid; see:
+                                            // https://github.com/aseemk/json5/issues/24
+                                            // TODO this feels special-cased; are there other
+                                            // invalid unescaped chars?
+                                            break;
+                                        } else {
+                                            string += this.ch;
+                                        }
+                                    }
+                                }
+                                this.error("Bad string");
+                            };
+                            SurveyJSON5.prototype.inlineComment = function() {
+                                // Skip an inline comment, assuming this is one. The current character should
+                                // be the second / character in the // pair that begins this inline comment.
+                                // To finish the inline comment, we look for a newline or the end of the text.
+                                if (this.ch !== '/') {
+                                    this.error("Not an inline comment");
+                                }
+                                do {
+                                    this.next();
+                                    if (this.ch === '\n' || this.ch === '\r') {
+                                        this.next();
+                                        return;
+                                    }
+                                } while (this.ch);
+                            };
+                            SurveyJSON5.prototype.blockComment = function() {
+                                // Skip a block comment, assuming this is one. The current character should be
+                                // the * character in the /* pair that begins this block comment.
+                                // To finish the block comment, we look for an ending */ pair of characters,
+                                // but we also watch for the end of text before the comment is terminated.
+                                if (this.ch !== '*') {
+                                    this.error("Not a block comment");
+                                }
+                                do {
+                                    this.next();
+                                    while (this.ch === '*') {
+                                        this.next('*');
+                                        if (this.ch === '/') {
+                                            this.next('/');
+                                            return;
+                                        }
+                                    }
+                                } while (this.ch);
+                                this.error("Unterminated block comment");
+                            };
+                            SurveyJSON5.prototype.comment = function() {
+                                // Skip a comment, whether inline or block-level, assuming this is one.
+                                // Comments always begin with a / character.
+                                if (this.ch !== '/') {
+                                    this.error("Not a comment");
+                                }
+                                this.next('/');
+                                if (this.ch === '/') {
+                                    this.inlineComment();
+                                } else if (this.ch === '*') {
+                                    this.blockComment();
+                                } else {
+                                    this.error("Unrecognized comment");
+                                }
+                            };
+                            SurveyJSON5.prototype.white = function() {
+                                // Skip whitespace and comments.
+                                // Note that we're detecting comments by only a single / character.
+                                // This works since regular expressions are not valid JSON(5), but this will
+                                // break if there are other valid values that begin with a / character!
+                                while (this.ch) {
+                                    if (this.ch === '/') {
+                                        this.comment();
+                                    } else if (SurveyJSON5.ws.indexOf(this.ch) >= 0) {
+                                        this.next();
+                                    } else {
+                                        return;
+                                    }
+                                }
+                            };
+                            SurveyJSON5.prototype.word = function() {
+                                // true, false, or null.
+                                switch (this.ch) {
+                                    case 't':
+                                        this.next('t');
+                                        this.next('r');
+                                        this.next('u');
+                                        this.next('e');
+                                        return true;
+                                    case 'f':
+                                        this.next('f');
+                                        this.next('a');
+                                        this.next('l');
+                                        this.next('s');
+                                        this.next('e');
+                                        return false;
+                                    case 'n':
+                                        this.next('n');
+                                        this.next('u');
+                                        this.next('l');
+                                        this.next('l');
+                                        return null;
+                                    case 'I':
+                                        this.next('I');
+                                        this.next('n');
+                                        this.next('f');
+                                        this.next('i');
+                                        this.next('n');
+                                        this.next('i');
+                                        this.next('t');
+                                        this.next('y');
+                                        return Infinity;
+                                    case 'N':
+                                        this.next('N');
+                                        this.next('a');
+                                        this.next('N');
+                                        return NaN;
+                                }
+                                this.error("Unexpected '" + this.ch + "'");
+                            };
+                            SurveyJSON5.prototype.array = function() {
+                                // Parse an array value.
+                                var array = [];
+                                if (this.ch === '[') {
+                                    this.next('[');
+                                    this.white();
+                                    while (this.ch) {
+                                        if (this.ch === ']') {
+                                            this.next(']');
+                                            return array; // Potentially empty array
+                                        }
+                                        // ES5 allows omitting elements in arrays, e.g. [,] and
+                                        // [,null]. We don't allow this in JSON5.
+                                        if (this.ch === ',') {
+                                            this.error("Missing array element");
+                                        } else {
+                                            array.push(this.value());
+                                        }
+                                        this.white();
+                                        // If there's no comma after this value, this needs to
+                                        // be the end of the array.
+                                        if (this.ch !== ',') {
+                                            this.next(']');
+                                            return array;
+                                        }
+                                        this.next(',');
+                                        this.white();
+                                    }
+                                }
+                                this.error("Bad array");
+                            };
+                            SurveyJSON5.prototype.object = function() {
+                                // Parse an object value.
+                                var key,
+                                    start,
+                                    isFirstProperty = true,
+                                    object = {};
+                                if (this.parseType > 0) {
+                                    object[SurveyJSON5.positionName] = { start: this.at - 1 };
+                                }
+                                if (this.ch === '{') {
+                                    this.next('{');
+                                    this.white();
+                                    start = this.at - 1;
+                                    while (this.ch) {
+                                        if (this.ch === '}') {
+                                            if (this.parseType > 0) {
+                                                object[SurveyJSON5.positionName].end = start;
+                                            }
+                                            this.next('}');
+                                            return object; // Potentially empty object
+                                        }
+                                        // Keys can be unquoted. If they are, they need to be
+                                        // valid JS identifiers.
+                                        if (this.ch === '"' || this.ch === "'") {
+                                            key = this.string();
+                                        } else {
+                                            key = this.identifier();
+                                        }
+                                        this.white();
+                                        if (this.parseType > 1) {
+                                            object[SurveyJSON5.positionName][key] = { start: start, valueStart: this.at };
+                                        }
+                                        this.next(':');
+                                        object[key] = this.value();
+                                        if (this.parseType > 1) {
+                                            start = this.at - 1;
+                                            object[SurveyJSON5.positionName][key].valueEnd = start;
+                                            object[SurveyJSON5.positionName][key].end = start;
+                                        }
+                                        this.white();
+                                        // If there's no comma after this pair, this needs to be
+                                        // the end of the object.
+                                        if (this.ch !== ',') {
+                                            if (this.parseType > 1) {
+                                                object[SurveyJSON5.positionName][key].valueEnd--;
+                                                object[SurveyJSON5.positionName][key].end--;
+                                            }
+                                            if (this.parseType > 0) {
+                                                object[SurveyJSON5.positionName].end = this.at - 1;
+                                            }
+                                            this.next('}');
+                                            return object;
+                                        }
+                                        if (this.parseType > 1) {
+                                            object[SurveyJSON5.positionName][key].valueEnd--;
+                                            if (!isFirstProperty) {
+                                                object[SurveyJSON5.positionName][key].end--;
+                                            }
+                                        }
+                                        this.next(',');
+                                        this.white();
+                                        isFirstProperty = false;
+                                    }
+                                }
+                                this.error("Bad object");
+                            };
+                            SurveyJSON5.prototype.value = function() {
+                                // Parse a JSON value. It could be an object, an array, a string, a number,
+                                // or a word.
+                                this.white();
+                                switch (this.ch) {
+                                    case '{':
+                                        return this.object();
+                                    case '[':
+                                        return this.array();
+                                    case '"':
+                                    case "'":
+                                        return this.string();
+                                    case '-':
+                                    case '+':
+                                    case '.':
+                                        return this.number();
+                                    default:
+                                        return this.ch >= '0' && this.ch <= '9' ? this.number() : this.word();
+                                }
+                            };
+                            SurveyJSON5.prototype.stringify = function(obj, replacer, space) {
+                                if (replacer === void 0) {
+                                    replacer = null;
+                                }
+                                if (space === void 0) {
+                                    space = null;
+                                }
+                                if (replacer && typeof replacer !== "function" && !this.isArray(replacer)) {
+                                    throw new Error('Replacer must be a function or an array');
+                                }
+                                this.replacer = replacer;
+                                this.indentStr = this.getIndent(space);
+                                this.objStack = [];
+                                // special case...when undefined is used inside of
+                                // a compound object/array, return null.
+                                // but when top-level, return undefined
+                                var topLevelHolder = { "": obj };
+                                if (obj === undefined) {
+                                    return this.getReplacedValueOrUndefined(topLevelHolder, '', true);
+                                }
+                                return this.internalStringify(topLevelHolder, '', true);
+                            };
+                            SurveyJSON5.prototype.getIndent = function(space) {
+                                if (space) {
+                                    if (typeof space === "string") {
+                                        return space;
+                                    } else if (typeof space === "number" && space >= 0) {
+                                        return this.makeIndent(" ", space, true);
+                                    }
+                                }
+                                return "";
+                            };
+                            SurveyJSON5.prototype.getReplacedValueOrUndefined = function(holder, key, isTopLevel) {
+                                var value = holder[key];
+                                // Replace the value with its toJSON value first, if possible
+                                if (value && value.toJSON && typeof value.toJSON === "function") {
+                                    value = value.toJSON();
+                                }
+                                // If the user-supplied replacer if a function, call it. If it's an array, check objects' string keys for
+                                // presence in the array (removing the key/value pair from the resulting JSON if the key is missing).
+                                if (typeof this.replacer === "function") {
+                                    return this.replacer.call(holder, key, value);
+                                } else if (this.replacer) {
+                                    if (isTopLevel || this.isArray(holder) || this.replacer.indexOf(key) >= 0) {
+                                        return value;
+                                    } else {
+                                        return undefined;
+                                    }
+                                } else {
+                                    return value;
+                                }
+                            };
+                            SurveyJSON5.prototype.isWordChar = function(char) {
+                                return char >= 'a' && char <= 'z' || char >= 'A' && char <= 'Z' || char >= '0' && char <= '9' || char === '_' || char === '$';
+                            };
+                            SurveyJSON5.prototype.isWordStart = function(char) {
+                                return char >= 'a' && char <= 'z' || char >= 'A' && char <= 'Z' || char === '_' || char === '$';
+                            };
+                            SurveyJSON5.prototype.isWord = function(key) {
+                                if (typeof key !== 'string') {
+                                    return false;
+                                }
+                                if (!this.isWordStart(key[0])) {
+                                    return false;
+                                }
+                                var i = 1,
+                                    length = key.length;
+                                while (i < length) {
+                                    if (!this.isWordChar(key[i])) {
+                                        return false;
+                                    }
+                                    i++;
+                                }
+                                return true;
+                            };
+                            // polyfills
+                            SurveyJSON5.prototype.isArray = function(obj) {
+                                if (Array.isArray) {
+                                    return Array.isArray(obj);
+                                } else {
+                                    return Object.prototype.toString.call(obj) === '[object Array]';
+                                }
+                            };
+                            SurveyJSON5.prototype.isDate = function(obj) {
+                                return Object.prototype.toString.call(obj) === '[object Date]';
+                            };
+                            SurveyJSON5.prototype.isNaN = function(val) {
+                                return typeof val === 'number' && val !== val;
+                            };
+                            SurveyJSON5.prototype.checkForCircular = function(obj) {
+                                for (var i = 0; i < this.objStack.length; i++) {
+                                    if (this.objStack[i] === obj) {
+                                        throw new TypeError("Converting circular structure to JSON");
+                                    }
+                                }
+                            };
+                            SurveyJSON5.prototype.makeIndent = function(str, num, noNewLine) {
+                                if (noNewLine === void 0) {
+                                    noNewLine = false;
+                                }
+                                if (!str) {
+                                    return "";
+                                }
+                                // indentation no more than 10 chars
+                                if (str.length > 10) {
+                                    str = str.substring(0, 10);
+                                }
+                                var indent = noNewLine ? "" : "\n";
+                                for (var i = 0; i < num; i++) {
+                                    indent += str;
+                                }
+                                return indent;
+                            };
+                            SurveyJSON5.prototype.escapeString = function(str) {
+                                // If the string contains no control characters, no quote characters, and no
+                                // backslash characters, then we can safely slap some quotes around it.
+                                // Otherwise we must also replace the offending characters with safe escape
+                                // sequences.
+                                SurveyJSON5.escapable.lastIndex = 0;
+                                return SurveyJSON5.escapable.test(str) ? '"' + str.replace(SurveyJSON5.escapable, function(a) {
+                                    var c = SurveyJSON5.meta[a];
+                                    return typeof c === 'string' ? c : '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
+                                }) + '"' : '"' + str + '"';
+                            };
+                            // End
+                            SurveyJSON5.prototype.internalStringify = function(holder, key, isTopLevel) {
+                                var buffer, res;
+                                // Replace the value, if necessary
+                                var obj_part = this.getReplacedValueOrUndefined(holder, key, isTopLevel);
+                                if (obj_part && !this.isDate(obj_part)) {
+                                    // unbox objects
+                                    // don't unbox dates, since will turn it into number
+                                    obj_part = obj_part.valueOf();
+                                }
+                                switch (typeof obj_part === 'undefined' ? 'undefined' : _typeof(obj_part)) {
+                                    case "boolean":
+                                        return obj_part.toString();
+                                    case "number":
+                                        if (isNaN(obj_part) || !isFinite(obj_part)) {
+                                            return "null";
+                                        }
+                                        return obj_part.toString();
+                                    case "string":
+                                        return this.escapeString(obj_part.toString());
+                                    case "object":
+                                        if (obj_part === null) {
+                                            return "null";
+                                        } else if (this.isArray(obj_part)) {
+                                            this.checkForCircular(obj_part);
+                                            buffer = "[";
+                                            this.objStack.push(obj_part);
+                                            for (var i = 0; i < obj_part.length; i++) {
+                                                res = this.internalStringify(obj_part, i, false);
+                                                buffer += this.makeIndent(this.indentStr, this.objStack.length);
+                                                if (res === null || typeof res === "undefined") {
+                                                    buffer += "null";
+                                                } else {
+                                                    buffer += res;
+                                                }
+                                                if (i < obj_part.length - 1) {
+                                                    buffer += ",";
+                                                } else if (this.indentStr) {
+                                                    buffer += "\n";
+                                                }
+                                            }
+                                            this.objStack.pop();
+                                            buffer += this.makeIndent(this.indentStr, this.objStack.length, true) + "]";
+                                        } else {
+                                            this.checkForCircular(obj_part);
+                                            buffer = "{";
+                                            var nonEmpty = false;
+                                            this.objStack.push(obj_part);
+                                            for (var prop in obj_part) {
+                                                if (obj_part.hasOwnProperty(prop)) {
+                                                    var value = this.internalStringify(obj_part, prop, false);
+                                                    isTopLevel = false;
+                                                    if (typeof value !== "undefined" && value !== null) {
+                                                        buffer += this.makeIndent(this.indentStr, this.objStack.length);
+                                                        nonEmpty = true;
+                                                        var propKey = this.isWord(prop) ? prop : this.escapeString(prop);
+                                                        buffer += propKey + ":" + (this.indentStr ? ' ' : '') + value + ",";
+                                                    }
+                                                }
+                                            }
+                                            this.objStack.pop();
+                                            if (nonEmpty) {
+                                                buffer = buffer.substring(0, buffer.length - 1) + this.makeIndent(this.indentStr, this.objStack.length) + "}";
+                                            } else {
+                                                buffer = '{}';
+                                            }
+                                        }
+                                        return buffer;
+                                    default:
+                                        // functions and undefined should be ignored
+                                        return undefined;
+                                }
+                            };
+                            SurveyJSON5.positionName = "pos";
+                            SurveyJSON5.escapee = {
+                                "'": "'",
+                                '"': '"',
+                                '\\': '\\',
+                                '/': '/',
+                                '\n': '',
+                                b: '\b',
+                                f: '\f',
+                                n: '\n',
+                                r: '\r',
+                                t: '\t'
+                            };
+                            SurveyJSON5.ws = [' ', '\t', '\r', '\n', '\v', '\f', '\xA0', '\uFEFF'];
+                            // Copied from Crokford's implementation of JSON
+                            // See https://github.com/douglascrockford/JSON-js/blob/e39db4b7e6249f04a195e7dd0840e610cc9e941e/json2.js#L195
+                            // Begin
+                            SurveyJSON5.cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
+                            SurveyJSON5.escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
+                            SurveyJSON5.meta = {
+                                '\b': '\\b',
+                                '\t': '\\t',
+                                '\n': '\\n',
+                                '\f': '\\f',
+                                '\r': '\\r',
+                                '"': '\\"',
+                                '\\': '\\\\'
+                            };
+                            return SurveyJSON5;
+                        }();
+
+                        /***/
+                    },
+                    /* 19 */
+                    /***/
+                    function(module, exports, __webpack_require__) {
+
+                        "use strict";
+
+                        exports.__esModule = true;
+                        exports.SurveyEmbedingWindow = undefined;
+
+                        var _json = __webpack_require__(18);
+
+                        var SurveyEmbedingWindow = exports.SurveyEmbedingWindow = function() {
+                            function SurveyEmbedingWindow() {
+                                this.surveyId = null;
+                                this.surveyPostId = null;
+                                this.generateValidJSON = false;
+                                var self = this;
+                                this.koLibraryVersion = ko.observable("knockout");
+                                this.koShowAsWindow = ko.observable("page");
+                                this.koScriptUsing = ko.observable("bootstrap");
+                                this.koHasIds = ko.observable(false);
+                                this.koLoadSurvey = ko.observable(false);
+                                this.koVisibleHtml = ko.computed(function() {
+                                    return self.koLibraryVersion() == "react" || self.koShowAsWindow() == "page";
+                                });
+                                this.koLibraryVersion.subscribe(function(newValue) {
+                                    self.setHeadText();
+                                    self.surveyEmbedingJava.setValue(self.getJavaText());
+                                });
+                                this.koShowAsWindow.subscribe(function(newValue) {
+                                    self.surveyEmbedingJava.setValue(self.getJavaText());
+                                });
+                                this.koScriptUsing.subscribe(function(newValue) {
+                                    self.setHeadText();
+                                    self.surveyEmbedingJava.setValue(self.getJavaText());
+                                });
+                                this.koLoadSurvey.subscribe(function(newValue) {
+                                    self.surveyEmbedingJava.setValue(self.getJavaText());
+                                });
+                                this.surveyEmbedingHead = null;
+                            }
+                            Object.defineProperty(SurveyEmbedingWindow.prototype, "json", {
+                                get: function get() {
+                                    return this.jsonValue;
+                                },
+                                set: function set(value) {
+                                    this.jsonValue = value;
+                                },
+                                enumerable: true,
+                                configurable: true
+                            });
+                            SurveyEmbedingWindow.prototype.show = function() {
+                                if (this.surveyEmbedingHead == null) {
+                                    this.surveyEmbedingHead = this.createEditor("surveyEmbedingHead");
+                                    this.setHeadText();
+                                    var bodyEditor = this.createEditor("surveyEmbedingBody");
+                                    bodyEditor.setValue("<div id= \"mySurveyJSName\" ></div>");
+                                    this.surveyEmbedingJava = this.createEditor("surveyEmbedingJava");
+                                }
+                                this.koHasIds(this.surveyId && this.surveyPostId);
+                                this.surveyEmbedingJava.setValue(this.getJavaText());
+                            };
+                            SurveyEmbedingWindow.prototype.setHeadText = function() {
+                                var str = "";
+                                if (this.koLibraryVersion() == "knockout") {
+                                    str = "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/knockout/3.3.0/knockout-min.js\"></script>\n<script src=\"js/survey.ko.min.js\"></script>";
+                                } else {
+                                    str = "<script src=\"https://fb.me/react-0.14.8.js\"></script>\n<script src= \"https://fb.me/react-dom-0.14.8.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.23/browser.min.js\"></script>\n";
+                                    str += "<script src=\"js/survey.react.min.js\"></script>";
+                                }
+                                if (this.koScriptUsing() != "bootstrap") {
+                                    str += "\n<link href=\"css/survey.css\" type=\"text/css\" rel=\"stylesheet\" />";
+                                }
+                                this.surveyEmbedingHead.setValue(str);
+                            };
+                            SurveyEmbedingWindow.prototype.createEditor = function(elementName) {
+                                var editor = ace.edit(elementName);
+                                editor.setTheme("ace/theme/monokai");
+                                editor.session.setMode("ace/mode/json");
+                                editor.setShowPrintMargin(false);
+                                editor.renderer.setShowGutter(false);
+                                editor.setReadOnly(true);
+                                return editor;
+                            };
+                            SurveyEmbedingWindow.prototype.getJavaText = function() {
+                                var isOnPage = this.koShowAsWindow() == "page";
+                                var str = this.koLibraryVersion() == "knockout" ? this.getKnockoutJavaText(isOnPage) : this.getReactJavaText(isOnPage);
+                                return this.getSetCss() + str;
+                            };
+                            SurveyEmbedingWindow.prototype.getSetCss = function() {
+                                if (this.koScriptUsing() != "bootstrap") return "";
+                                return "Survey.Survey.cssType = \"bootstrap\";\n";
+                            };
+                            SurveyEmbedingWindow.prototype.getKnockoutJavaText = function(isOnPage) {
+                                var text = isOnPage ? "var survey = new Survey.Survey(\n" : "var surveyWindow = new Survey.SurveyWindow(\n";
+                                text += this.getJsonText();
+                                text += ");\n";
+                                if (!isOnPage) {
+                                    text += "surveyWindow.";
+                                }
+                                var saveFunc = this.getSaveFuncCode();
+                                text += "survey.onComplete.add(function (s) {\n" + saveFunc + "\n });\n";
+                                if (isOnPage) {
+                                    text += "survey.render(\"mySurveyJSName\");";
+                                } else {
+                                    text += "//By default Survey.title is used.\n";
+                                    text += "//surveyWindow.title = \"My Survey Window Title.\";\n";
+                                    text += "surveyWindow.show();";
+                                }
+                                return text;
+                            };
+                            SurveyEmbedingWindow.prototype.getReactJavaText = function(isOnPage) {
+                                var saveFunc = this.getSaveFuncCode();
+                                var sendResultText = "var surveySendResult = function (s) {\n" + saveFunc + "\n });\n";
+                                var name = isOnPage ? "ReactSurvey" : "ReactSurveyWindow";
+                                var jsonText = "var surveyJson = " + this.getJsonText() + "\n\n";
+                                var text = jsonText + sendResultText + "ReactDOM.render(\n<" + name + " json={surveyJson} onComplete={surveySendResult} />, \n document.getElementById(\"mySurveyJSName\"));";
+                                return text;
+                            };
+                            SurveyEmbedingWindow.prototype.getSaveFuncCode = function() {
+                                if (this.koHasIds()) return "survey.sendResult('" + this.surveyPostId + "');";
+                                return "alert(\"The results are:\" + JSON.stringify(s.data));";
+                            };
+                            SurveyEmbedingWindow.prototype.getJsonText = function() {
+                                if (this.koHasIds() && this.koLoadSurvey()) {
+                                    return "{ surveyId: '" + this.surveyId + "'}";
+                                }
+                                if (this.generateValidJSON) return JSON.stringify(this.json);
+                                return new _json.SurveyJSON5().stringify(this.json);
+                            };
+                            return SurveyEmbedingWindow;
+                        }();
+
+                        /***/
+                    },
+                    /* 20 */
+                    /***/
+                    function(module, exports, __webpack_require__) {
+
+                        "use strict";
+
+                        exports.__esModule = true;
+                        exports.SurveyVerbChangePageItem = exports.SurveyVerbChangeTypeItem = exports.SurveyVerbItem = exports.SurveyVerbs = undefined;
+
+                        var _editorLocalization = __webpack_require__(7);
+
+                        var _surveyHelper = __webpack_require__(8);
+
+                        var _surveyKnockout = __webpack_require__(2);
+
+                        var Survey = _interopRequireWildcard(_surveyKnockout);
+
+                        function _interopRequireWildcard(obj) {
+                            if (obj && obj.__esModule) { return obj; } else {
+                                var newObj = {};
+                                if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } }
+                                newObj.default = obj;
+                                return newObj;
+                            }
                         }
-                        element = this.renderedElement;
-                        if (!element) return;
-                        element.innerHTML = _templateEditorKo.html;
-                        self.applyBinding();
-                    };
-                    SurveyEditor.prototype.loadSurvey = function(surveyId) {
-                        var self = this;
-                        new Survey.dxSurveyService().loadSurvey(surveyId, function(success, result, response) {
-                            if (success && result) {
-                                self.text = JSON.stringify(result);
+
+                        var __extends = undefined && undefined.__extends || function(d, b) {
+                            for (var p in b) {
+                                if (b.hasOwnProperty(p)) d[p] = b[p];
                             }
-                        });
-                    };
-                    Object.defineProperty(SurveyEditor.prototype, "text", {
-                        get: function get() {
-                            if (this.koIsShowDesigner()) return this.getSurveyTextFromDesigner();
-                            return this.jsonEditor != null ? this.jsonEditor.getValue() : "";
-                        },
-                        set: function set(value) {
-                            this.textWorker = new _textWorker.SurveyTextWorker(value);
-                            if (this.textWorker.isJsonCorrect) {
-                                this.initSurvey(new Survey.JsonObject().toJsonObject(this.textWorker.survey));
-                                this.showDesigner();
-                                this.setUndoRedoCurrentState(true);
-                            } else {
-                                this.setTextValue(value);
-                                this.koViewType("editor");
+
+                            function __() {
+                                this.constructor = d;
                             }
-                        },
-                        enumerable: true,
-                        configurable: true
-                    });
-                    Object.defineProperty(SurveyEditor.prototype, "state", {
-                        get: function get() {
-                            return this.stateValue;
-                        },
-                        enumerable: true,
-                        configurable: true
-                    });
-                    SurveyEditor.prototype.setState = function(value) {
-                        this.stateValue = value;
-                        this.koState(this.state);
-                    };
-                    SurveyEditor.prototype.doSave = function() {
-                        this.setState("saving");
-                        if (this.saveSurveyFunc) {
-                            this.saveNo++;
-                            var self = this;
-                            this.saveSurveyFunc(this.saveNo, function doSaveCallback(no, isSuccess) {
-                                self.setState("saved");
-                                if (self.saveNo == no) {
-                                    if (isSuccess) self.setState("saved");
+                            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
+                        };
+                        var SurveyVerbs = exports.SurveyVerbs = function() {
+                            function SurveyVerbs(onModifiedCallback) {
+                                this.onModifiedCallback = onModifiedCallback;
+                                this.koVerbs = ko.observableArray();
+                                this.koHasVerbs = ko.observable();
+                                var classes = Survey.JsonObject.metaData.getChildrenClasses("selectbase", true);
+                                this.choicesClasses = [];
+                                for (var i = 0; i < classes.length; i++) {
+                                    this.choicesClasses.push(classes[i].name);
                                 }
-                            });
-                        }
-                    };
-                    SurveyEditor.prototype.setModified = function() {
-                        this.setState("modified");
-                        this.setUndoRedoCurrentState();
-                    };
-                    SurveyEditor.prototype.setUndoRedoCurrentState = function(clearState) {
-                        if (clearState === void 0) {
-                            clearState = false;
-                        }
-                        if (clearState) {
-                            this.undoRedo.clear();
-                        }
-                        var selObj = this.koSelectedObject() ? this.koSelectedObject().value : null;
-                        this.undoRedo.setCurrent(this.surveyValue, selObj ? selObj.name : null);
-                    };
-                    Object.defineProperty(SurveyEditor.prototype, "saveSurveyFunc", {
-                        get: function get() {
-                            return this.saveSurveyFuncValue;
-                        },
-                        set: function set(value) {
-                            this.saveSurveyFuncValue = value;
-                            this.koShowSaveButton(value != null);
-                        },
-                        enumerable: true,
-                        configurable: true
-                    });
-                    Object.defineProperty(SurveyEditor.prototype, "showOptions", {
-                        get: function get() {
-                            return this.koShowOptions();
-                        },
-                        set: function set(value) {
-                            this.koShowOptions(value);
-                        },
-                        enumerable: true,
-                        configurable: true
-                    });
-                    SurveyEditor.prototype.setTextValue = function(value) {
-                        this.isProcessingImmediately = true;
-                        if (this.jsonEditor) {
-                            this.jsonEditor.setValue(value);
-                            this.jsonEditor.renderer.updateFull(true);
-                        }
-                        this.processJson(value);
-                        this.isProcessingImmediately = false;
-                    };
-                    SurveyEditor.prototype.addPage = function() {
-                        var name = _surveyHelper.SurveyHelper.getNewPageName(this.survey.pages);
-                        var page = this.surveyValue.addNewPage(name);
-                        this.addPageToUI(page);
-                        this.setModified();
-                    };
-                    SurveyEditor.prototype.getLocString = function(str) {
-                        return _editorLocalization.editorLocalization.getString(str);
-                    };
-                    SurveyEditor.prototype.getQuestionTypes = function() {
-                        var allTypes = Survey.QuestionFactory.Instance.getAllTypes();
-                        if (!this.options || !this.options.questionTypes || !this.options.questionTypes.length) return allTypes;
-                        var result = [];
-                        for (var i = 0; i < this.options.questionTypes.length; i++) {
-                            var questionType = this.options.questionTypes[i];
-                            if (allTypes.indexOf(questionType) > -1) {
-                                result.push(questionType);
-                            }
-                        }
-                        return result;
-                    };
-                    SurveyEditor.prototype.movePage = function(indexFrom, indexTo) {
-                        var page = this.survey.pages[indexFrom];
-                        this.survey.pages.splice(indexFrom, 1);
-                        this.survey.pages.splice(indexTo, 0, page);
-                        this.pagesEditor.survey = this.survey;
-                        this.surveyObjects.selectObject(page);
-                        this.setModified();
-                    };
-                    SurveyEditor.prototype.addPageToUI = function(page) {
-                        this.pagesEditor.survey = this.surveyValue;
-                        this.surveyObjects.addPage(page);
-                    };
-                    SurveyEditor.prototype.onQuestionAdded = function(question) {
-                        var page = this.survey.getPageByQuestion(question);
-                        this.surveyObjects.addQuestion(page, question);
-                        this.survey.render();
-                    };
-                    SurveyEditor.prototype.onQuestionRemoved = function(question) {
-                        this.surveyObjects.removeObject(question);
-                        this.survey.render();
-                    };
-                    SurveyEditor.prototype.onPropertyValueChanged = function(property, obj, newValue) {
-                        var isDefault = property.isDefaultValue(newValue);
-                        obj[property.name] = newValue;
-                        if (property.name == "name") {
-                            this.surveyObjects.nameChanged(obj);
-                            if (_surveyHelper.SurveyHelper.getObjectType(obj) == _surveyHelper.ObjType.Page) {
-                                this.pagesEditor.changeName(obj);
                             }
-                        }
-                        this.setModified();
-                        this.survey.render();
-                    };
-                    SurveyEditor.prototype.doUndoRedo = function(item) {
-                        this.initSurvey(item.surveyJSON);
-                        if (item.selectedObjName) {
-                            var selObj = this.findObjByName(item.selectedObjName);
-                            if (selObj) {
-                                this.surveyObjects.selectObject(selObj);
+                            Object.defineProperty(SurveyVerbs.prototype, "survey", {
+                                get: function get() {
+                                    return this.surveyValue;
+                                },
+                                set: function set(value) {
+                                    if (this.survey == value) return;
+                                    this.surveyValue = value;
+                                },
+                                enumerable: true,
+                                configurable: true
+                            });
+                            Object.defineProperty(SurveyVerbs.prototype, "obj", {
+                                get: function get() {
+                                    return this.objValue;
+                                },
+                                set: function set(value) {
+                                    if (this.objValue == value) return;
+                                    this.objValue = value;
+                                    this.buildVerbs();
+                                },
+                                enumerable: true,
+                                configurable: true
+                            });
+                            SurveyVerbs.prototype.buildVerbs = function() {
+                                var array = [];
+                                var objType = _surveyHelper.SurveyHelper.getObjectType(this.obj);
+                                if (objType == _surveyHelper.ObjType.Question) {
+                                    var question = this.obj;
+                                    if (this.survey.pages.length > 1) {
+                                        array.push(new SurveyVerbChangePageItem(this.survey, question, this.onModifiedCallback));
+                                    }
+                                    if (this.choicesClasses.indexOf(question.getType()) > -1) {
+                                        array.push(new SurveyVerbChangeTypeItem(this.survey, question, this.onModifiedCallback));
+                                    }
+                                }
+                                this.koVerbs(array);
+                                this.koHasVerbs(array.length > 0);
+                            };
+                            return SurveyVerbs;
+                        }();
+                        var SurveyVerbItem = exports.SurveyVerbItem = function() {
+                            function SurveyVerbItem(survey, question, onModifiedCallback) {
+                                this.survey = survey;
+                                this.question = question;
+                                this.onModifiedCallback = onModifiedCallback;
+                                this.koItems = ko.observableArray();
+                                this.koSelectedItem = ko.observable();
                             }
-                        }
-                        this.setState(this.undoRedo.koCanUndo() ? "modified" : "saved");
-                    };
-                    SurveyEditor.prototype.findObjByName = function(name) {
-                        var page = this.survey.getPageByName(name);
-                        if (page) return page;
-                        var question = this.survey.getQuestionByName(name);
-                        if (question) return question;
-                        return null;
-                    };
-                    SurveyEditor.prototype.canSwitchViewType = function(newType) {
-                        if (newType && this.koViewType() == newType) return false;
-                        if (this.koViewType() != "editor" || !this.textWorker) return true;
-                        if (!this.textWorker.isJsonCorrect) {
-                            alert(this.getLocString("ed.correctJSON"));
-                            return false;
-                        }
-                        this.initSurvey(new Survey.JsonObject().toJsonObject(this.textWorker.survey));
-                        return true;
-                    };
-                    SurveyEditor.prototype.showDesigner = function() {
-                        if (!this.canSwitchViewType("designer")) return;
-                        this.koViewType("designer");
-                    };
-                    SurveyEditor.prototype.showJsonEditor = function() {
-                        if (this.koViewType() == "editor") return;
-                        this.jsonEditor.setValue(this.getSurveyTextFromDesigner());
-                        this.jsonEditor.focus();
-                        this.koViewType("editor");
-                    };
-                    SurveyEditor.prototype.showTestSurvey = function() {
-                        if (!this.canSwitchViewType(null)) return;
-                        this.showLiveSurvey();
-                        this.koViewType("test");
-                    };
-                    SurveyEditor.prototype.showEmbedEditor = function() {
-                        if (!this.canSwitchViewType("embed")) return;
-                        this.showSurveyEmbeding();
-                        this.koViewType("embed");
-                    };
-                    SurveyEditor.prototype.getSurveyTextFromDesigner = function() {
-                        var json = new Survey.JsonObject().toJsonObject(this.survey);
-                        if (this.options && this.options.generateValidJSON) return JSON.stringify(json, null, 1);
-                        return new _json.SurveyJSON5().stringify(json, null, 1);
-                    };
-                    SurveyEditor.prototype.selectedObjectChanged = function(obj) {
-                        var canDeleteObject = false;
-                        this.selectedObjectEditor.selectedObject = obj;
-                        this.surveyVerbs.obj = obj;
-                        var objType = _surveyHelper.SurveyHelper.getObjectType(obj);
-                        if (objType == _surveyHelper.ObjType.Page) {
-                            this.survey.currentPage = obj;
-                            canDeleteObject = this.survey.pages.length > 1;
-                        }
-                        if (objType == _surveyHelper.ObjType.Question) {
-                            this.survey["setselectedQuestion"](obj);
-                            canDeleteObject = true;
-                            this.survey.currentPage = this.survey.getPageByQuestion(this.survey["selectedQuestionValue"]);
-                        } else {
-                            this.survey["setselectedQuestion"](null);
-                        }
-                        this.koCanDeleteObject(canDeleteObject);
-                    };
-                    SurveyEditor.prototype.applyBinding = function() {
-                        if (this.renderedElement == null) return;
-                        ko.cleanNode(this.renderedElement);
-                        ko.applyBindings(this, this.renderedElement);
-                        this.surveyjs = document.getElementById("surveyjs");
-                        if (this.surveyjs) {
-                            var self = this;
-                            this.surveyjs.onkeydown = function(e) {
-                                if (!e) return;
-                                if (e.keyCode == 46) self.deleteQuestion();
-                                if (e.keyCode == 38 || e.keyCode == 40) {
-                                    self.selectQuestion(e.keyCode == 38);
+                            Object.defineProperty(SurveyVerbItem.prototype, "text", {
+                                get: function get() {
+                                    return "";
+                                },
+                                enumerable: true,
+                                configurable: true
+                            });
+                            return SurveyVerbItem;
+                        }();
+                        var SurveyVerbChangeTypeItem = exports.SurveyVerbChangeTypeItem = function(_super) {
+                            __extends(SurveyVerbChangeTypeItem, _super);
+
+                            function SurveyVerbChangeTypeItem(survey, question, onModifiedCallback) {
+                                _super.call(this, survey, question, onModifiedCallback);
+                                this.survey = survey;
+                                this.question = question;
+                                this.onModifiedCallback = onModifiedCallback;
+                                var classes = Survey.JsonObject.metaData.getChildrenClasses("selectbase", true);
+                                var array = [];
+                                for (var i = 0; i < classes.length; i++) {
+                                    array.push({ value: classes[i].name, text: _editorLocalization.editorLocalization.getString("qt." + classes[i].name) });
                                 }
+                                this.koItems(array);
+                                this.koSelectedItem(question.getType());
+                                var self = this;
+                                this.koSelectedItem.subscribe(function(newValue) {
+                                    self.changeType(newValue);
+                                });
+                            }
+                            Object.defineProperty(SurveyVerbChangeTypeItem.prototype, "text", {
+                                get: function get() {
+                                    return _editorLocalization.editorLocalization.getString("pe.verbChangeType");
+                                },
+                                enumerable: true,
+                                configurable: true
+                            });
+                            SurveyVerbChangeTypeItem.prototype.changeType = function(questionType) {
+                                if (questionType == this.question.getType()) return;
+                                var page = this.survey.getPageByQuestion(this.question);
+                                var index = page.questions.indexOf(this.question);
+                                var newQuestion = Survey.QuestionFactory.Instance.createQuestion(questionType, this.question.name);
+                                var jsonObj = new Survey.JsonObject();
+                                var json = jsonObj.toJsonObject(this.question);
+                                jsonObj.toObject(json, newQuestion);
+                                page.removeQuestion(this.question);
+                                page.addQuestion(newQuestion, index);
+                                if (this.onModifiedCallback) this.onModifiedCallback();
                             };
-                        }
-                        this.jsonEditor = ace.edit("surveyjsJSONEditor");
-                        this.surveyjsExample = document.getElementById("surveyjsExample");
-                        this.initSurvey(new _json.SurveyJSON5().parse(SurveyEditor.defaultNewSurveyText));
-                        this.setUndoRedoCurrentState(true);
-                        this.surveyValue.mode = "designer";
-                        this.surveyValue.render(this.surveyjs);
-                        this.initJsonEditor();
-                        _textWorker.SurveyTextWorker.newLineChar = this.jsonEditor.session.doc.getNewLineCharacter();
-                    };
-                    SurveyEditor.prototype.initJsonEditor = function() {
-                        var self = this;
-                        this.jsonEditor.setTheme("ace/theme/monokai");
-                        this.jsonEditor.session.setMode("ace/mode/json");
-                        this.jsonEditor.setShowPrintMargin(false);
-                        this.jsonEditor.getSession().on("change", function() {
-                            self.onJsonEditorChanged();
-                        });
-                        this.jsonEditor.getSession().setUseWorker(true);
-                    };
-                    SurveyEditor.prototype.initSurvey = function(json) {
-                        var self = this;
-                        this.surveyValue = new Survey.Survey();
-                        this.dragDropHelper = new _dragdrophelper.DragDropHelper(this.survey, function() {
-                            self.setModified();
-                        });
-                        this.surveyValue["dragDropHelper"] = this.dragDropHelper;
-                        this.surveyValue["setJsonObject"](json); //TODO
-                        if (this.surveyValue.isEmpty) {
-                            this.surveyValue = new Survey.Survey(new _json.SurveyJSON5().parse(SurveyEditor.defaultNewSurveyText));
-                        }
-                        this.survey.mode = "designer";
-                        this.survey.render(this.surveyjs);
-                        this.surveyObjects.survey = this.survey;
-                        this.pagesEditor.survey = this.survey;
-                        this.pagesEditor.setSelectedPage(this.survey.currentPage);
-                        this.surveyVerbs.survey = this.survey;
-                        this.surveyValue["onSelectedQuestionChanged"].add(function(sender, options) {
-                            self.surveyObjects.selectObject(sender["selectedQuestionValue"]);
-                        });
-                        this.surveyValue["onCopyQuestion"].add(function(sender, options) {
-                            self.copyQuestion(self.koSelectedObject().value);
-                        });
-                        this.surveyValue["onFastCopyQuestion"].add(function(sender, options) {
-                            self.fastCopyQuestion(self.koSelectedObject().value);
-                        });
-                        this.surveyValue.onProcessHtml.add(function(sender, options) {
-                            options.html = self.processHtml(options.html);
-                        });
-                        this.surveyValue.onCurrentPageChanged.add(function(sender, options) {
-                            self.pagesEditor.setSelectedPage(sender.currentPage);
-                        });
-                        this.surveyValue.onQuestionAdded.add(function(sender, options) {
-                            self.onQuestionAdded(options.question);
-                        });
-                        this.surveyValue.onQuestionRemoved.add(function(sender, options) {
-                            self.onQuestionRemoved(options.question);
-                        });
-                    };
-                    SurveyEditor.prototype.processHtml = function(html) {
-                        if (!html) return html;
-                        var scriptRegEx = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi;
-                        while (scriptRegEx.test(html)) {
-                            html = html.replace(scriptRegEx, "");
-                        }
-                        return html;
-                    };
-                    SurveyEditor.prototype.onJsonEditorChanged = function() {
-                        if (this.timeoutId > -1) {
-                            clearTimeout(this.timeoutId);
-                        }
-                        if (this.isProcessingImmediately) {
-                            this.timeoutId = -1;
-                        } else {
-                            var self = this;
-                            this.timeoutId = setTimeout(function() {
-                                self.timeoutId = -1;
-                                self.processJson(self.text);
-                            }, SurveyEditor.updateTextTimeout);
-                        }
-                    };
-                    SurveyEditor.prototype.processJson = function(text) {
-                        this.textWorker = new _textWorker.SurveyTextWorker(text);
-                        if (this.jsonEditor) {
-                            this.jsonEditor.getSession().setAnnotations(this.createAnnotations(text, this.textWorker.errors));
-                        }
-                    };
-                    SurveyEditor.prototype.doDraggingQuestion = function(questionType, e) {
-                        this.dragDropHelper.startDragNewQuestion(e, questionType, this.getNewQuestionName());
-                    };
-                    SurveyEditor.prototype.doDraggingCopiedQuestion = function(json, e) {
-                        this.dragDropHelper.startDragCopiedQuestion(e, this.getNewQuestionName(), json);
-                    };
-                    SurveyEditor.prototype.doClickQuestion = function(questionType) {
-                        this.doClickQuestionCore(Survey.QuestionFactory.Instance.createQuestion(questionType, this.getNewQuestionName()));
-                    };
-                    SurveyEditor.prototype.doClickCopiedQuestion = function(json) {
-                        var name = this.getNewQuestionName();
-                        var question = Survey.QuestionFactory.Instance.createQuestion(json["type"], name);
-                        new Survey.JsonObject().toObject(json, question);
-                        question.name = name;
-                        this.doClickQuestionCore(question);
-                    };
-                    SurveyEditor.prototype.getNewQuestionName = function() {
-                        return _surveyHelper.SurveyHelper.getNewQuestionName(this.survey.getAllQuestions());
-                    };
-                    SurveyEditor.prototype.doClickQuestionCore = function(question) {
-                        var page = this.survey.currentPage;
-                        var index = -1;
-                        if (this.survey["selectedQuestionValue"] != null) {
-                            index = page.questions.indexOf(this.survey["selectedQuestionValue"]) + 1;
-                        }
-                        page.addQuestion(question, index);
-                        this.setModified();
-                    };
-                    SurveyEditor.prototype.deleteQuestion = function() {
-                        var question = this.getSelectedObjAsQuestion();
-                        if (question) {
-                            this.deleteCurrentObject();
-                        }
-                    };
-                    SurveyEditor.prototype.selectQuestion = function(isUp) {
-                        var question = this.getSelectedObjAsQuestion();
-                        if (question) {
-                            this.surveyObjects.selectNextQuestion(isUp);
-                        }
-                    };
-                    SurveyEditor.prototype.getSelectedObjAsQuestion = function() {
-                        var obj = this.koSelectedObject().value;
-                        if (!obj) return null;
-                        return _surveyHelper.SurveyHelper.getObjectType(obj) == _surveyHelper.ObjType.Question ? obj : null;
-                    };
-                    SurveyEditor.prototype.deleteCurrentObject = function() {
-                        this.deleteObject(this.koSelectedObject().value);
-                    };
-                    SurveyEditor.prototype.copyQuestion = function(question) {
-                        var objType = _surveyHelper.SurveyHelper.getObjectType(question);
-                        if (objType != _surveyHelper.ObjType.Question) return;
-                        var json = new Survey.JsonObject().toJsonObject(question);
-                        json.type = question.getType();
-                        var item = this.getCopiedQuestionByName(question.name);
-                        if (item) {
-                            item.json = json;
-                        } else {
-                            this.koCopiedQuestions.push({ name: question.name, json: json });
-                        }
-                        if (this.koCopiedQuestions().length > 3) {
-                            this.koCopiedQuestions.splice(0, 1);
-                        }
-                    };
-                    SurveyEditor.prototype.fastCopyQuestion = function(question) {
-                        var json = new Survey.JsonObject().toJsonObject(question);
-                        json.type = question.getType();
-                        this.doClickCopiedQuestion(json);
-                    };
-                    SurveyEditor.prototype.getCopiedQuestionByName = function(name) {
-                        var items = this.koCopiedQuestions();
-                        for (var i = 0; i < items.length; i++) {
-                            if (items[i].name == name) return items[i];
-                        }
-                        return null;
-                    };
-                    SurveyEditor.prototype.deleteObject = function(obj) {
-                        this.surveyObjects.removeObject(obj);
-                        var objType = _surveyHelper.SurveyHelper.getObjectType(obj);
-                        if (objType == _surveyHelper.ObjType.Page) {
-                            this.survey.removePage(obj);
-                            this.pagesEditor.removePage(obj);
-                            this.setModified();
-                        }
-                        if (objType == _surveyHelper.ObjType.Question) {
-                            this.survey.currentPage.removeQuestion(obj);
-                            this.survey["setselectedQuestion"](null);
-                            this.surveyObjects.selectObject(this.survey.currentPage);
-                            this.setModified();
-                        }
-                        this.survey.render();
-                    };
-                    SurveyEditor.prototype.showLiveSurvey = function() {
-                        var _this = this;
-                        if (!this.surveyjsExample) return;
-                        var json = this.getSurveyJSON();
-                        if (json != null) {
-                            if (json.cookieName) {
-                                delete json.cookieName;
+                            return SurveyVerbChangeTypeItem;
+                        }(SurveyVerbItem);
+                        var SurveyVerbChangePageItem = exports.SurveyVerbChangePageItem = function(_super) {
+                            __extends(SurveyVerbChangePageItem, _super);
+
+                            function SurveyVerbChangePageItem(survey, question, onModifiedCallback) {
+                                _super.call(this, survey, question, onModifiedCallback);
+                                this.survey = survey;
+                                this.question = question;
+                                this.onModifiedCallback = onModifiedCallback;
+                                var array = [];
+                                for (var i = 0; i < this.survey.pages.length; i++) {
+                                    var page = this.survey.pages[i];
+                                    array.push({ value: page, text: _surveyHelper.SurveyHelper.getObjectName(page) });
+                                }
+                                this.koItems(array);
+                                this.prevPage = this.survey.getPageByQuestion(question);
+                                this.koSelectedItem(this.prevPage);
+                                var self = this;
+                                this.koSelectedItem.subscribe(function(newValue) {
+                                    self.changePage(newValue);
+                                });
                             }
-                            var survey = new Survey.Survey(json);
-                            var self = this;
-                            var surveyjsExampleResults = document.getElementById("surveyjsExampleResults");
-                            var surveyjsExamplereRun = document.getElementById("surveyjsExamplereRun");
-                            if (surveyjsExampleResults) surveyjsExampleResults.innerHTML = "";
-                            if (surveyjsExamplereRun) surveyjsExamplereRun.style.display = "none";
-                            survey.onComplete.add(function(sender) {
-                                if (surveyjsExampleResults) surveyjsExampleResults.innerHTML = _this.getLocString("ed.surveyResults") + JSON.stringify(survey.data);
-                                if (surveyjsExamplereRun) surveyjsExamplereRun.style.display = "";
+                            Object.defineProperty(SurveyVerbChangePageItem.prototype, "text", {
+                                get: function get() {
+                                    return _editorLocalization.editorLocalization.getString("pe.verbChangePage");
+                                },
+                                enumerable: true,
+                                configurable: true
                             });
-                            survey.render(this.surveyjsExample);
-                        } else {
-                            this.surveyjsExample.innerHTML = this.getLocString("ed.correctJSON");
-                        }
-                    };
-                    SurveyEditor.prototype.showSurveyEmbeding = function() {
-                        var json = this.getSurveyJSON();
-                        this.surveyEmbeding.json = json;
-                        this.surveyEmbeding.surveyId = this.surveyId;
-                        this.surveyEmbeding.surveyPostId = this.surveyPostId;
-                        this.surveyEmbeding.generateValidJSON = this.options && this.options.generateValidJSON;
-                        this.surveyEmbeding.show();
-                    };
-                    SurveyEditor.prototype.getSurveyJSON = function() {
-                        if (this.koIsShowDesigner()) return new Survey.JsonObject().toJsonObject(this.survey);
-                        if (this.textWorker.isJsonCorrect) return new Survey.JsonObject().toJsonObject(this.textWorker.survey);
-                        return null;
-                    };
-                    SurveyEditor.prototype.createAnnotations = function(text, errors) {
-                        var annotations = new Array();
-                        for (var i = 0; i < errors.length; i++) {
-                            var error = errors[i];
-                            var annotation = { row: error.position.start.row, column: error.position.start.column, text: error.text, type: "error" };
-                            annotations.push(annotation);
-                        }
-                        return annotations;
-                    };
-                    SurveyEditor.updateTextTimeout = 1000;
-                    SurveyEditor.defaultNewSurveyText = "{ pages: [ { name: 'page1'}] }";
-                    return SurveyEditor;
-                }();
-                Survey.Survey.cssType = "bootstrap";
-                new Survey.SurveyTemplateText().replaceText(_template_page.html, "page");
-                new Survey.SurveyTemplateText().replaceText(_template_question.html, "question");
-                Survey.Survey.prototype["onCreating"] = function() {
-                    this.selectedQuestionValue = null;
-                    this.onSelectedQuestionChanged = new Survey.Event();
-                    this.onCopyQuestion = new Survey.Event();
-                    this.onFastCopyQuestion = new Survey.Event();
-                    var self = this;
-                    this.copyQuestionClick = function() {
-                        self.onCopyQuestion.fire(self);
-                    };
-                    this.fastCopyQuestionClick = function(question) {
-                        self.onFastCopyQuestion.fire(self /*, question*/ );
-                    };
-                    this.koDraggingSource = ko.observable(null);
-                };
-                Survey.Survey.prototype["setselectedQuestion"] = function(value) {
-                    if (value == this.selectedQuestionValue) return;
-                    var oldValue = this.selectedQuestionValue;
-                    this.selectedQuestionValue = value;
-                    if (oldValue != null) {
-                        oldValue["onSelectedQuestionChanged"]();
-                    }
-                    if (this.selectedQuestionValue != null) {
-                        this.selectedQuestionValue["onSelectedQuestionChanged"]();
-                    }
-                    this.onSelectedQuestionChanged.fire(this, { 'oldSelectedQuestion': oldValue, 'newSelectedQuestion': value });
-                };
-                Survey.Survey.prototype["getEditorLocString"] = function(value) {
-                    return _editorLocalization.editorLocalization.getString(value);
-                };
-                Survey.Page.prototype["onCreating"] = function() {
-                    var self = this;
-                    this.dragEnterCounter = 0;
-                    this.koDragging = ko.observable(-1);
-                    this.koDraggingQuestion = ko.observable(null);
-                    this.koDraggingBottom = ko.observable(false);
-                    this.koDragging.subscribe(function(newValue) {
-                        if (newValue < 0) {
-                            self.dragEnterCounter = 0;
-                            self.koDraggingQuestion(null);
-                            self.koDraggingBottom(false);
-                        } else {
-                            var question = newValue >= 0 && newValue < self.questions.length ? self.questions[newValue] : null;
-                            self.koDraggingQuestion(question);
-                            self.koDraggingBottom(newValue == self.questions.length);
-                        }
-                    });
-                    this.koDraggingQuestion.subscribe(function(newValue) {
-                        if (newValue) newValue.koIsDragging(true);
-                    });
-                    this.koDraggingQuestion.subscribe(function(oldValue) {
-                        if (oldValue) oldValue.koIsDragging(false);
-                    }, this, "beforeChange");
-                    this.dragEnter = function(e) {
-                        e.preventDefault();
-                        self.dragEnterCounter++;
-                        self.doDragEnter(e);
-                    };
-                    this.dragLeave = function(e) {
-                        self.dragEnterCounter--;
-                        if (self.dragEnterCounter === 0) self.doDragLeave(e);
-                    };
-                    this.dragDrop = function(e) {
-                        self.doDrop(e);
-                    };
-                };
-                Survey.Page.prototype["doDrop"] = function(e) {
-                    var dragDropHelper = this.data["dragDropHelper"];
-                    if (dragDropHelper) {
-                        dragDropHelper.doDrop(e);
-                    }
-                };
-                Survey.Page.prototype["doDragEnter"] = function(e) {
-                    if (this.questions.length > 0 || this.koDragging() > 0) return;
-                    var dragDropHelper = this.data["dragDropHelper"];
-                    if (dragDropHelper && dragDropHelper.isSurveyDragging(e)) {
-                        this.koDragging(0);
-                    }
-                };
-                Survey.Page.prototype["doDragLeave"] = function(e) {
-                    var dragDropHelper = this.data["dragDropHelper"];
-                    if (dragDropHelper) {
-                        dragDropHelper.doLeavePage(e);
-                    }
-                };
-                Survey.QuestionBase.prototype["onCreating"] = function() {
-                    var self = this;
-                    this.dragDropHelperValue = null;
-                    this.koIsDragging = ko.observable(false);
-                    this.koIsDraggingSource = ko.observable(false);
-                    this.dragDropHelper = function() {
-                        if (self.dragDropHelperValue == null) {
-                            self.dragDropHelperValue = self.data["dragDropHelper"];
-                        }
-                        return self.dragDropHelperValue;
-                    };
-                    this.dragOver = function(e) {
-                        self.dragDropHelper().doDragDropOver(e, self);
-                    };
-                    this.dragDrop = function(e) {
-                        self.dragDropHelper().doDrop(e, self);
-                    };
-                    this.dragStart = function(e) {
-                        self.dragDropHelper().startDragQuestion(e, self.name);
-                    };
-                    this.dragEnd = function(e) {
-                        self.dragDropHelper().end();
-                    };
-                    this.koIsSelected = ko.observable(false);
-                    this.koOnClick = function() {
-                        if (self.data == null) return;
-                        self.data["setselectedQuestion"](this);
-                    };
-                };
-                Survey.QuestionBase.prototype["onSelectedQuestionChanged"] = function() {
-                    if (this.data == null) return;
-                    this.koIsSelected(this.data["selectedQuestionValue"] == this);
-                };
-
-                /***/
-            },
-            /* 23 */
-            /***/
-            function(module, exports, __webpack_require__) {
-
-                "use strict";
-
-                exports.__esModule = true;
-                exports.SurveyObjects = exports.SurveyObjectItem = undefined;
-
-                var _surveyHelper = __webpack_require__(8);
-
-                var SurveyObjectItem = exports.SurveyObjectItem = function() {
-                    function SurveyObjectItem() {}
-                    return SurveyObjectItem;
-                }();
-                var SurveyObjects = exports.SurveyObjects = function() {
-                    function SurveyObjects(koObjects, koSelected) {
-                        this.koObjects = koObjects;
-                        this.koSelected = koSelected;
-                    }
-                    Object.defineProperty(SurveyObjects.prototype, "survey", {
-                        get: function get() {
-                            return this.surveyValue;
-                        },
-                        set: function set(value) {
-                            if (this.survey == value) return;
-                            this.surveyValue = value;
-                            this.rebuild();
-                        },
-                        enumerable: true,
-                        configurable: true
-                    });
-                    SurveyObjects.prototype.addPage = function(page) {
-                        var pageItem = this.createPage(page);
-                        var index = this.survey.pages.indexOf(page);
-                        if (index > 0) {
-                            var prevPage = this.survey.pages[index - 1];
-                            index = this.getItemIndex(prevPage) + 1;
-                            index += prevPage.questions.length;
-                        } else {
-                            index = 1; //0 - Survey
-                        }
-                        this.addItem(pageItem, index);
-                        index++;
-                        for (var i = 0; i < page.questions.length; i++) {
-                            var item = this.createQuestion(page.questions[i]);
-                            this.addItem(item, index + i);
-                        }
-                        this.koSelected(pageItem);
-                    };
-                    SurveyObjects.prototype.addQuestion = function(page, question) {
-                        var index = this.getItemIndex(page);
-                        if (index < 0) return;
-                        var questionIndex = page.questions.indexOf(question) + 1;
-                        index += questionIndex;
-                        var item = this.createQuestion(question);
-                        this.addItem(item, index);
-                        this.koSelected(item);
-                    };
-                    SurveyObjects.prototype.selectObject = function(obj) {
-                        var objs = this.koObjects();
-                        for (var i = 0; i < objs.length; i++) {
-                            if (objs[i].value == obj) {
-                                this.koSelected(objs[i]);
-                                return;
+                            SurveyVerbChangePageItem.prototype.changePage = function(newPage) {
+                                if (newPage == null || newPage == this.prevPage) return;
+                                this.prevPage.removeQuestion(this.question);
+                                newPage.addQuestion(this.question);
+                                if (this.onModifiedCallback) this.onModifiedCallback();
+                            };
+                            return SurveyVerbChangePageItem;
+                        }(SurveyVerbItem);
+
+                        /***/
+                    },
+                    /* 21 */
+                    /***/
+                    function(module, exports, __webpack_require__) {
+
+                        "use strict";
+
+                        exports.__esModule = true;
+                        exports.UndoRedoItem = exports.SurveyUndoRedo = undefined;
+
+                        var _surveyKnockout = __webpack_require__(2);
+
+                        var Survey = _interopRequireWildcard(_surveyKnockout);
+
+                        function _interopRequireWildcard(obj) {
+                            if (obj && obj.__esModule) { return obj; } else {
+                                var newObj = {};
+                                if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } }
+                                newObj.default = obj;
+                                return newObj;
                             }
                         }
-                    };
-                    SurveyObjects.prototype.removeObject = function(obj) {
-                        var index = this.getItemIndex(obj);
-                        if (index < 0) return;
-                        var countToRemove = 1;
-                        if (_surveyHelper.SurveyHelper.getObjectType(obj) == _surveyHelper.ObjType.Page) {
-                            var page = obj;
-                            countToRemove += page.questions.length;
-                        }
-                        this.koObjects.splice(index, countToRemove);
-                    };
-                    SurveyObjects.prototype.nameChanged = function(obj) {
-                        var index = this.getItemIndex(obj);
-                        if (index < 0) return;
-                        this.koObjects()[index].text(this.getText(obj));
-                    };
-                    SurveyObjects.prototype.selectNextQuestion = function(isUp) {
-                        var question = this.getSelectedQuestion();
-                        var itemIndex = this.getItemIndex(question);
-                        if (itemIndex < 0) return question;
-                        var objs = this.koObjects();
-                        var newItemIndex = itemIndex + (isUp ? -1 : 1);
-                        if (newItemIndex < objs.length && _surveyHelper.SurveyHelper.getObjectType(objs[newItemIndex].value) == _surveyHelper.ObjType.Question) {
-                            itemIndex = newItemIndex;
-                        } else {
-                            newItemIndex = itemIndex;
-                            while (newItemIndex < objs.length && _surveyHelper.SurveyHelper.getObjectType(objs[newItemIndex].value) == _surveyHelper.ObjType.Question) {
-                                itemIndex = newItemIndex;
-                                newItemIndex += isUp ? 1 : -1;
+
+                        var SurveyUndoRedo = exports.SurveyUndoRedo = function() {
+                            function SurveyUndoRedo() {
+                                this.index = -1;
+                                this.maximumCount = 10;
+                                this.items = [];
+                                this.koCanUndo = ko.observable(false);
+                                this.koCanRedo = ko.observable(false);
                             }
-                        }
-                        this.koSelected(objs[itemIndex]);
-                    };
-                    SurveyObjects.prototype.getSelectedQuestion = function() {
-                        if (!this.koSelected()) return null;
-                        var obj = this.koSelected().value;
-                        if (!obj) return null;
-                        return _surveyHelper.SurveyHelper.getObjectType(obj) == _surveyHelper.ObjType.Question ? obj : null;
-                    };
-                    SurveyObjects.prototype.addItem = function(item, index) {
-                        if (index > this.koObjects().length) {
-                            this.koObjects.push(item);
-                        } else {
-                            this.koObjects.splice(index, 0, item);
-                        }
-                    };
-                    SurveyObjects.prototype.rebuild = function() {
-                        var objs = [];
-                        if (this.survey == null) {
-                            this.koObjects(objs);
-                            this.koSelected(null);
-                            return;
-                        }
-                        objs.push(this.createItem(this.survey, "Survey"));
-                        for (var i = 0; i < this.survey.pages.length; i++) {
-                            var page = this.survey.pages[i];
-                            objs.push(this.createPage(page));
-                            for (var j = 0; j < page.questions.length; j++) {
-                                objs.push(this.createQuestion(page.questions[j]));
+                            SurveyUndoRedo.prototype.clear = function() {
+                                this.items = [];
+                                this.koCanUndo(false);
+                                this.koCanRedo(false);
+                            };
+                            SurveyUndoRedo.prototype.setCurrent = function(survey, selectedObjName) {
+                                var item = new UndoRedoItem();
+                                item.surveyJSON = new Survey.JsonObject().toJsonObject(survey);
+                                item.selectedObjName = selectedObjName;
+                                if (this.index < this.items.length - 1) {
+                                    this.items.splice(this.index + 1);
+                                }
+                                this.items.push(item);
+                                this.removeOldData();
+                                this.index = this.items.length - 1;
+                                this.updateCanUndoRedo();
+                            };
+                            SurveyUndoRedo.prototype.undo = function() {
+                                if (!this.canUndo) return null;
+                                return this.doUndoRedo(-1);
+                            };
+                            SurveyUndoRedo.prototype.redo = function() {
+                                if (!this.canRedo) return null;
+                                return this.doUndoRedo(1);
+                            };
+                            SurveyUndoRedo.prototype.updateCanUndoRedo = function() {
+                                this.koCanUndo(this.canUndo);
+                                this.koCanRedo(this.canRedo);
+                            };
+                            SurveyUndoRedo.prototype.doUndoRedo = function(dIndex) {
+                                this.index += dIndex;
+                                this.updateCanUndoRedo();
+                                return this.index >= 0 && this.index < this.items.length ? this.items[this.index] : null;
+                            };
+                            Object.defineProperty(SurveyUndoRedo.prototype, "canUndo", {
+                                get: function get() {
+                                    return this.index >= 1 && this.index < this.items.length;
+                                },
+                                enumerable: true,
+                                configurable: true
+                            });
+                            Object.defineProperty(SurveyUndoRedo.prototype, "canRedo", {
+                                get: function get() {
+                                    return this.items.length > 1 && this.index < this.items.length - 1;
+                                },
+                                enumerable: true,
+                                configurable: true
+                            });
+                            SurveyUndoRedo.prototype.removeOldData = function() {
+                                if (this.items.length - 1 < this.maximumCount) return;
+                                this.items.splice(0, this.items.length - this.maximumCount - 1);
+                            };
+                            return SurveyUndoRedo;
+                        }();
+                        var UndoRedoItem = exports.UndoRedoItem = function() {
+                            function UndoRedoItem() {}
+                            return UndoRedoItem;
+                        }();
+
+                        /***/
+                    },
+                    /* 22 */
+                    /***/
+                    function(module, exports, __webpack_require__) {
+
+                        "use strict";
+
+                        exports.__esModule = true;
+                        exports.SurveyEditor = undefined;
+
+                        var _editorLocalization = __webpack_require__(7);
+
+                        var _objectEditor = __webpack_require__(10);
+
+                        var _pagesEditor = __webpack_require__(16);
+
+                        var _surveyEmbedingWindow = __webpack_require__(19);
+
+                        var _surveyObjects = __webpack_require__(23);
+
+                        var _objectVerbs = __webpack_require__(20);
+
+                        var _textWorker = __webpack_require__(17);
+
+                        var _undoredo = __webpack_require__(21);
+
+                        var _surveyHelper = __webpack_require__(8);
+
+                        var _dragdrophelper = __webpack_require__(1);
+
+                        var _json = __webpack_require__(18);
+
+                        var _templateEditorKo = __webpack_require__(24);
+
+                        var _template_page = __webpack_require__(25);
+
+                        var _template_question = __webpack_require__(26);
+
+                        var _surveyKnockout = __webpack_require__(2);
+
+                        var Survey = _interopRequireWildcard(_surveyKnockout);
+
+                        function _interopRequireWildcard(obj) {
+                            if (obj && obj.__esModule) { return obj; } else {
+                                var newObj = {};
+                                if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } }
+                                newObj.default = obj;
+                                return newObj;
                             }
                         }
-                        this.koObjects(objs);
-                        this.koSelected(this.survey);
-                    };
-                    SurveyObjects.prototype.createPage = function(page) {
-                        return this.createItem(page, this.getText(page));
-                    };
-                    SurveyObjects.prototype.createQuestion = function(question) {
-                        return this.createItem(question, this.getText(question));
-                    };
-                    SurveyObjects.prototype.createItem = function(value, text) {
-                        var item = new SurveyObjectItem();
-                        item.value = value;
-                        item.text = ko.observable(text);
-                        return item;
-                    };
-                    SurveyObjects.prototype.getItemIndex = function(value) {
-                        var objs = this.koObjects();
-                        for (var i = 0; i < objs.length; i++) {
-                            if (objs[i].value == value) return i;
-                        }
-                        return -1;
-                    };
-                    SurveyObjects.prototype.getText = function(obj) {
-                        var intend = SurveyObjects.intend;
-                        if (_surveyHelper.SurveyHelper.getObjectType(obj) != _surveyHelper.ObjType.Page) {
-                            intend += SurveyObjects.intend;
-                        }
-                        return intend + _surveyHelper.SurveyHelper.getObjectName(obj);
-                    };
-                    SurveyObjects.intend = "...";
-                    return SurveyObjects;
-                }();
 
-                /***/
-            },
-            /* 24 */
-            /***/
-            function(module, exports) {
+                        var SurveyEditor = exports.SurveyEditor = function() {
+                                function SurveyEditor(renderedElement, options) {
+                                    if (renderedElement === void 0) {
+                                        renderedElement = null;
+                                    }
+                                    if (options === void 0) {
+                                        options = null;
+                                    }
+                                    this.stateValue = "";
+                                    this.dragDropHelper = null;
+                                    this.surveyId = null;
+                                    this.surveyPostId = null;
+                                    this.alwaySaveTextInPropertyEditors = false;
+                                    this.saveNo = 0;
+                                    this.timeoutId = -1;
+                                    this.options = options;
+                                    this.questionTypes = this.getQuestionTypes();
+                                    this.koCopiedQuestions = ko.observableArray();
+                                    this.koCanDeleteObject = ko.observable(false);
+                                    var self = this;
+                                    this.koState = ko.observable();
+                                    this.koShowSaveButton = ko.observable(false);
+                                    this.koShowOptions = ko.observable(false);
+                                    this.koTestSurveyWidth = ko.observable("100%");
+                                    this.saveButtonClick = function() {
+                                        self.doSave();
+                                    };
+                                    this.koObjects = ko.observableArray();
+                                    this.koSelectedObject = ko.observable();
+                                    this.koSelectedObject.subscribe(function(newValue) {
+                                        self.selectedObjectChanged(newValue != null ? newValue.value : null);
+                                    });
+                                    this.koGenerateValidJSON = ko.observable(this.options && this.options.generateValidJSON);
+                                    this.koGenerateValidJSON.subscribe(function(newValue) {
+                                        if (!self.options) self.options = {};
+                                        self.options.generateValidJSON = newValue;
+                                        if (self.generateValidJSONChangedCallback) self.generateValidJSONChangedCallback(newValue);
+                                    });
+                                    this.surveyObjects = new _surveyObjects.SurveyObjects(this.koObjects, this.koSelectedObject);
+                                    this.undoRedo = new _undoredo.SurveyUndoRedo();
+                                    this.surveyVerbs = new _objectVerbs.SurveyVerbs(function() {
+                                        self.setModified();
+                                    });
+                                    this.selectedObjectEditor = new _objectEditor.SurveyObjectEditor(this.options);
+                                    this.selectedObjectEditor.onPropertyValueChanged.add(function(sender, options) {
+                                        self.onPropertyValueChanged(options.property, options.object, options.newValue);
+                                    });
+                                    this.pagesEditor = new _pagesEditor.SurveyPagesEditor(function() {
+                                        self.addPage();
+                                    }, function(page) {
+                                        self.surveyObjects.selectObject(page);
+                                    }, function(indexFrom, indexTo) {
+                                        self.movePage(indexFrom, indexTo);
+                                    }, function(page) {
+                                        self.deleteCurrentObject();
+                                    });
+                                    this.surveyEmbeding = new _surveyEmbedingWindow.SurveyEmbedingWindow();
+                                    this.koViewType = ko.observable("designer");
+                                    this.koIsShowDesigner = ko.computed(function() {
+                                        return self.koViewType() == "designer";
+                                    });
+                                    this.selectDesignerClick = function() {
+                                        self.showDesigner();
+                                    };
+                                    this.selectEditorClick = function() {
+                                        self.showJsonEditor();
+                                    };
+                                    this.selectTestClick = function() {
+                                        self.showTestSurvey();
+                                    };
+                                    this.selectEmbedClick = function() {
+                                        self.showEmbedEditor();
+                                    };
+                                    this.generateValidJSONClick = function() {
+                                        self.koGenerateValidJSON(true);
+                                    };
+                                    this.generateReadableJSONClick = function() {
+                                        self.koGenerateValidJSON(false);
+                                    };
+                                    this.runSurveyClick = function() {
+                                        self.showLiveSurvey();
+                                    };
+                                    this.embedingSurveyClick = function() {
+                                        self.showSurveyEmbeding();
+                                    };
+                                    this.deleteObjectClick = function() {
+                                        self.deleteCurrentObject();
+                                    };
+                                    this.draggingQuestion = function(questionType, e) {
+                                        self.doDraggingQuestion(questionType, e);
+                                    };
+                                    this.clickQuestion = function(questionType) {
+                                        self.doClickQuestion(questionType);
+                                    };
+                                    this.draggingCopiedQuestion = function(item, e) {
+                                        self.doDraggingCopiedQuestion(item.json, e);
+                                    };
+                                    this.clickCopiedQuestion = function(item) {
+                                        self.doClickCopiedQuestion(item.json);
+                                    };
+                                    this.dragEnd = function(item, e) {
+                                        self.dragDropHelper.end();
+                                    };
+                                    this.doUndoClick = function() {
+                                        self.doUndoRedo(self.undoRedo.undo());
+                                    };
+                                    this.doRedoClick = function() {
+                                        self.doUndoRedo(self.undoRedo.redo());
+                                    };
+                                    if (renderedElement) {
+                                        // debugger;
+                                        this.render(renderedElement);
+                                    }
+                                }
+                                Object.defineProperty(SurveyEditor.prototype, "survey", {
+                                    get: function get() {
+                                        return this.surveyValue;
+                                    },
+                                    enumerable: true,
+                                    configurable: true
+                                });
+                                SurveyEditor.prototype.render = function(element) {
+                                    if (element === void 0) {
+                                        element = null;
+                                    }
+                                    var self = this;
+                                    if (element && typeof element == "string") {
+                                        element = document.getElementById(element);
+                                    }
+                                    if (element) {
+                                        this.renderedElement = element;
+                                    }
+                                    element = this.renderedElement;
+                                    if (!element) return;
+                                    element.innerHTML = _templateEditorKo.html;
+                                    self.applyBinding();
+                                };
+                                SurveyEditor.prototype.loadSurvey = function(surveyId) {
+                                    var self = this;
+                                    new Survey.dxSurveyService().loadSurvey(surveyId, function(success, result, response) {
+                                        if (success && result) {
+                                            self.text = JSON.stringify(result);
+                                        }
+                                    });
+                                };
+                                Object.defineProperty(SurveyEditor.prototype, "text", {
+                                    get: function get() {
+                                        if (this.koIsShowDesigner()) return this.getSurveyTextFromDesigner();
+                                        return this.jsonEditor != null ? this.jsonEditor.getValue() : "";
+                                    },
+                                    set: function set(value) {
+                                        this.textWorker = new _textWorker.SurveyTextWorker(value);
+                                        if (this.textWorker.isJsonCorrect) {
+                                            this.initSurvey(new Survey.JsonObject().toJsonObject(this.textWorker.survey));
+                                            this.showDesigner();
+                                            this.setUndoRedoCurrentState(true);
+                                        } else {
+                                            this.setTextValue(value);
+                                            this.koViewType("editor");
+                                        }
+                                    },
+                                    enumerable: true,
+                                    configurable: true
+                                });
+                                Object.defineProperty(SurveyEditor.prototype, "state", {
+                                    get: function get() {
+                                        return this.stateValue;
+                                    },
+                                    enumerable: true,
+                                    configurable: true
+                                });
+                                SurveyEditor.prototype.setState = function(value) {
+                                    this.stateValue = value;
+                                    this.koState(this.state);
+                                };
+                                SurveyEditor.prototype.doSave = function() {
+                                    this.setState("saving");
+                                    if (this.saveSurveyFunc) {
+                                        this.saveNo++;
+                                        var self = this;
+                                        this.saveSurveyFunc(this.saveNo, function doSaveCallback(no, isSuccess) {
+                                            self.setState("saved");
+                                            if (self.saveNo == no) {
+                                                if (isSuccess) self.setState("saved");
+                                            }
+                                        });
+                                    }
+                                };
+                                SurveyEditor.prototype.setModified = function() {
+                                    this.setState("modified");
+                                    this.setUndoRedoCurrentState();
+                                };
+                                SurveyEditor.prototype.setUndoRedoCurrentState = function(clearState) {
+                                    if (clearState === void 0) {
+                                        clearState = false;
+                                    }
+                                    if (clearState) {
+                                        this.undoRedo.clear();
+                                    }
+                                    var selObj = this.koSelectedObject() ? this.koSelectedObject().value : null;
+                                    this.undoRedo.setCurrent(this.surveyValue, selObj ? selObj.name : null);
+                                };
+                                Object.defineProperty(SurveyEditor.prototype, "saveSurveyFunc", {
+                                    get: function get() {
+                                        return this.saveSurveyFuncValue;
+                                    },
+                                    set: function set(value) {
+                                        this.saveSurveyFuncValue = value;
+                                        this.koShowSaveButton(value != null);
+                                    },
+                                    enumerable: true,
+                                    configurable: true
+                                });
+                                Object.defineProperty(SurveyEditor.prototype, "showOptions", {
+                                    get: function get() {
+                                        return this.koShowOptions();
+                                    },
+                                    set: function set(value) {
+                                        this.koShowOptions(value);
+                                    },
+                                    enumerable: true,
+                                    configurable: true
+                                });
+                                SurveyEditor.prototype.setTextValue = function(value) {
+                                    this.isProcessingImmediately = true;
+                                    if (this.jsonEditor) {
+                                        this.jsonEditor.setValue(value);
+                                        this.jsonEditor.renderer.updateFull(true);
+                                    }
+                                    this.processJson(value);
+                                    this.isProcessingImmediately = false;
+                                };
+                                SurveyEditor.prototype.addPage = function() {
+                                    var name = _surveyHelper.SurveyHelper.getNewPageName(this.survey.pages);
+                                    var page = this.surveyValue.addNewPage(name);
+                                    this.addPageToUI(page);
+                                    this.setModified();
+                                };
+                                SurveyEditor.prototype.getLocString = function(str) {
+                                    return _editorLocalization.editorLocalization.getString(str);
+                                };
+                                SurveyEditor.prototype.getQuestionTypes = function() {
+                                    var allTypes = Survey.QuestionFactory.Instance.getAllTypes();
+                                    if (!this.options || !this.options.questionTypes || !this.options.questionTypes.length) return allTypes;
+                                    var result = [];
+                                    for (var i = 0; i < this.options.questionTypes.length; i++) {
+                                        var questionType = this.options.questionTypes[i];
+                                        if (allTypes.indexOf(questionType) > -1) {
+                                            result.push(questionType);
+                                        }
+                                    }
+                                    return result;
+                                };
+                                SurveyEditor.prototype.movePage = function(indexFrom, indexTo) {
+                                    var page = this.survey.pages[indexFrom];
+                                    this.survey.pages.splice(indexFrom, 1);
+                                    this.survey.pages.splice(indexTo, 0, page);
+                                    this.pagesEditor.survey = this.survey;
+                                    this.surveyObjects.selectObject(page);
+                                    this.setModified();
+                                };
+                                SurveyEditor.prototype.addPageToUI = function(page) {
+                                    this.pagesEditor.survey = this.surveyValue;
+                                    this.surveyObjects.addPage(page);
+                                };
+                                SurveyEditor.prototype.onQuestionAdded = function(question) {
+                                    var page = this.survey.getPageByQuestion(question);
+                                    this.surveyObjects.addQuestion(page, question);
+                                    this.survey.render();
+                                };
+                                SurveyEditor.prototype.onQuestionRemoved = function(question) {
+                                    this.surveyObjects.removeObject(question);
+                                    this.survey.render();
+                                };
+                                SurveyEditor.prototype.onPropertyValueChanged = function(property, obj, newValue) {
+                                    var isDefault = property.isDefaultValue(newValue);
+                                    obj[property.name] = newValue;
+                                    if (property.name == "name") {
+                                        this.surveyObjects.nameChanged(obj);
+                                        if (_surveyHelper.SurveyHelper.getObjectType(obj) == _surveyHelper.ObjType.Page) {
+                                            this.pagesEditor.changeName(obj);
+                                        }
+                                    }
+                                    this.setModified();
+                                    this.survey.render();
+                                };
+                                SurveyEditor.prototype.doUndoRedo = function(item) {
+                                    this.initSurvey(item.surveyJSON);
+                                    if (item.selectedObjName) {
+                                        var selObj = this.findObjByName(item.selectedObjName);
+                                        if (selObj) {
+                                            this.surveyObjects.selectObject(selObj);
+                                        }
+                                    }
+                                    this.setState(this.undoRedo.koCanUndo() ? "modified" : "saved");
+                                };
+                                SurveyEditor.prototype.findObjByName = function(name) {
+                                    var page = this.survey.getPageByName(name);
+                                    if (page) return page;
+                                    var question = this.survey.getQuestionByName(name);
+                                    if (question) return question;
+                                    return null;
+                                };
+                                SurveyEditor.prototype.canSwitchViewType = function(newType) {
+                                    if (newType && this.koViewType() == newType) return false;
+                                    if (this.koViewType() != "editor" || !this.textWorker) return true;
+                                    if (!this.textWorker.isJsonCorrect) {
+                                        alert(this.getLocString("ed.correctJSON"));
+                                        return false;
+                                    }
+                                    this.initSurvey(new Survey.JsonObject().toJsonObject(this.textWorker.survey));
+                                    return true;
+                                };
+                                SurveyEditor.prototype.showDesigner = function() {
+                                    if (!this.canSwitchViewType("designer")) return;
+                                    this.koViewType("designer");
+                                };
+                                SurveyEditor.prototype.showJsonEditor = function() {
+                                    if (this.koViewType() == "editor") return;
+                                    this.jsonEditor.setValue(this.getSurveyTextFromDesigner());
+                                    this.jsonEditor.focus();
+                                    this.koViewType("editor");
+                                };
+                                SurveyEditor.prototype.showTestSurvey = function() {
+                                    if (!this.canSwitchViewType(null)) return;
+                                    this.showLiveSurvey();
+                                    this.koViewType("test");
+                                };
+                                SurveyEditor.prototype.showEmbedEditor = function() {
+                                    if (!this.canSwitchViewType("embed")) return;
+                                    this.showSurveyEmbeding();
+                                    this.koViewType("embed");
+                                };
+                                SurveyEditor.prototype.getSurveyTextFromDesigner = function() {
+                                    var json = new Survey.JsonObject().toJsonObject(this.survey);
+                                    if (this.options && this.options.generateValidJSON) return JSON.stringify(json, null, 1);
+                                    return new _json.SurveyJSON5().stringify(json, null, 1);
+                                };
+                                SurveyEditor.prototype.selectedObjectChanged = function(obj) {
+                                    var canDeleteObject = false;
+                                    this.selectedObjectEditor.selectedObject = obj;
+                                    this.surveyVerbs.obj = obj;
+                                    var objType = _surveyHelper.SurveyHelper.getObjectType(obj);
+                                    if (objType == _surveyHelper.ObjType.Page) {
+                                        this.survey.currentPage = obj;
+                                        canDeleteObject = this.survey.pages.length > 1;
+                                    }
+                                    if (objType == _surveyHelper.ObjType.Question) {
+                                        this.survey["setselectedQuestion"](obj);
+                                        canDeleteObject = true;
+                                        this.survey.currentPage = this.survey.getPageByQuestion(this.survey["selectedQuestionValue"]);
+                                    } else {
+                                        this.survey["setselectedQuestion"](null);
+                                    }
+                                    this.koCanDeleteObject(canDeleteObject);
+                                };
+                                SurveyEditor.prototype.applyBinding = function() {
+                                    if (this.renderedElement == null) return;
+                                    ko.cleanNode(this.renderedElement);
+                                    ko.applyBindings(this, this.renderedElement);
+                                    this.surveyjs = document.getElementById("surveyjs");
+                                    if (this.surveyjs) {
+                                        var self = this;
+                                        this.surveyjs.onkeydown = function(e) {
+                                            if (!e) return;
+                                            if (e.keyCode == 46) self.deleteQuestion();
+                                            if (e.keyCode == 38 || e.keyCode == 40) {
+                                                self.selectQuestion(e.keyCode == 38);
+                                            }
+                                        };
+                                    }
+                                    this.jsonEditor = ace.edit("surveyjsJSONEditor");
+                                    this.surveyjsExample = document.getElementById("surveyjsExample");
+                                    this.initSurvey(new _json.SurveyJSON5().parse(SurveyEditor.defaultNewSurveyText));
+                                    this.setUndoRedoCurrentState(true);
+                                    this.surveyValue.mode = "designer";
+                                    this.surveyValue.render(this.surveyjs);
+                                    this.initJsonEditor();
+                                    _textWorker.SurveyTextWorker.newLineChar = this.jsonEditor.session.doc.getNewLineCharacter();
+                                };
+                                SurveyEditor.prototype.initJsonEditor = function() {
+                                    var self = this;
+                                    this.jsonEditor.setTheme("ace/theme/monokai");
+                                    this.jsonEditor.session.setMode("ace/mode/json");
+                                    this.jsonEditor.setShowPrintMargin(false);
+                                    this.jsonEditor.getSession().on("change", function() {
+                                        self.onJsonEditorChanged();
+                                    });
+                                    this.jsonEditor.getSession().setUseWorker(true);
+                                };
+                                SurveyEditor.prototype.initSurvey = function(json) {
+                                    var self = this;
+                                    this.surveyValue = new Survey.Survey();
+                                    this.dragDropHelper = new _dragdrophelper.DragDropHelper(this.survey, function() {
+                                        self.setModified();
+                                    });
+                                    this.surveyValue["dragDropHelper"] = this.dragDropHelper;
+                                    this.surveyValue["setJsonObject"](json); //TODO
+                                    if (this.surveyValue.isEmpty) {
+                                        this.surveyValue = new Survey.Survey(new _json.SurveyJSON5().parse(SurveyEditor.defaultNewSurveyText));
+                                    }
+                                    this.survey.mode = "designer";
+                                    this.survey.render(this.surveyjs);
+                                    this.surveyObjects.survey = this.survey;
+                                    this.pagesEditor.survey = this.survey;
+                                    this.pagesEditor.setSelectedPage(this.survey.currentPage);
+                                    this.surveyVerbs.survey = this.survey;
+                                    this.surveyValue["onSelectedQuestionChanged"].add(function(sender, options) {
+                                        self.surveyObjects.selectObject(sender["selectedQuestionValue"]);
+                                    });
+                                    this.surveyValue["onCopyQuestion"].add(function(sender, options) {
+                                        self.copyQuestion(self.koSelectedObject().value);
+                                    });
+                                    this.surveyValue["onFastCopyQuestion"].add(function(sender, options) {
+                                        self.fastCopyQuestion(self.koSelectedObject().value);
+                                    });
+                                    this.surveyValue.onProcessHtml.add(function(sender, options) {
+                                        options.html = self.processHtml(options.html);
+                                    });
+                                    this.surveyValue.onCurrentPageChanged.add(function(sender, options) {
+                                        self.pagesEditor.setSelectedPage(sender.currentPage);
+                                    });
+                                    this.surveyValue.onQuestionAdded.add(function(sender, options) {
+                                        self.onQuestionAdded(options.question);
+                                    });
+                                    this.surveyValue.onQuestionRemoved.add(function(sender, options) {
+                                        self.onQuestionRemoved(options.question);
+                                    });
+                                };
+                                SurveyEditor.prototype.processHtml = function(html) {
+                                    if (!html) return html;
+                                    var scriptRegEx = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi;
+                                    while (scriptRegEx.test(html)) {
+                                        html = html.replace(scriptRegEx, "");
+                                    }
+                                    return html;
+                                };
+                                SurveyEditor.prototype.onJsonEditorChanged = function() {
+                                    if (this.timeoutId > -1) {
+                                        clearTimeout(this.timeoutId);
+                                    }
+                                    if (this.isProcessingImmediately) {
+                                        this.timeoutId = -1;
+                                    } else {
+                                        var self = this;
+                                        this.timeoutId = setTimeout(function() {
+                                            self.timeoutId = -1;
+                                            self.processJson(self.text);
+                                        }, SurveyEditor.updateTextTimeout);
+                                    }
+                                };
+                                SurveyEditor.prototype.processJson = function(text) {
+                                    this.textWorker = new _textWorker.SurveyTextWorker(text);
+                                    if (this.jsonEditor) {
+                                        this.jsonEditor.getSession().setAnnotations(this.createAnnotations(text, this.textWorker.errors));
+                                    }
+                                };
+                                SurveyEditor.prototype.doDraggingQuestion = function(questionType, e) {
+                                    if ($('.itemCount').length > 0 && questionType != 'html') {
+                                        $("#alertModal").modal();
+                                    } else {
+                                        this.dragDropHelper.startDragNewQuestion(e, questionType, this.getNewQuestionName());
+                                    }
+
+                                    SurveyEditor.prototype.doDraggingCopiedQuestion = function(json, e) {
+                                        this.dragDropHelper.startDragCopiedQuestion(e, this.getNewQuestionName(), json);
+                                    };
+                                    SurveyEditor.prototype.doClickQuestion = function(questionType) {
+                                        if ($('.itemCount').length > 0 && questionType != 'html') {
+                                            $("#alertModal").modal();
+                                        } else {
+                                            this.doClickQuestionCore(Survey.QuestionFactory.Instance.createQuestion(questionType, this.getNewQuestionName()));
+                                        }
+                                    };
+                                    SurveyEditor.prototype.doClickCopiedQuestion = function(json) {
+                                        var name = this.getNewQuestionName();
+                                        var question = Survey.QuestionFactory.Instance.createQuestion(json["type"], name);
+                                        new Survey.JsonObject().toObject(json, question);
+                                        question.name = name;
+                                        this.doClickQuestionCore(question);
+                                    };
+                                    SurveyEditor.prototype.getNewQuestionName = function() {
+                                        return _surveyHelper.SurveyHelper.getNewQuestionName(this.survey.getAllQuestions());
+                                    };
+                                    SurveyEditor.prototype.doClickQuestionCore = function(question) {
+                                        var page = this.survey.currentPage;
+                                        var index = -1;
+                                        if (this.survey["selectedQuestionValue"] != null) {
+                                            index = page.questions.indexOf(this.survey["selectedQuestionValue"]) + 1;
+                                        }
+                                        page.addQuestion(question, index);
+                                        this.setModified();
+                                    };
+                                    SurveyEditor.prototype.deleteQuestion = function() {
+                                        var question = this.getSelectedObjAsQuestion();
+                                        if (question) {
+                                            this.deleteCurrentObject();
+                                        }
+                                    };
+                                    SurveyEditor.prototype.selectQuestion = function(isUp) {
+                                        var question = this.getSelectedObjAsQuestion();
+                                        if (question) {
+                                            this.surveyObjects.selectNextQuestion(isUp);
+                                        }
+                                    };
+                                    SurveyEditor.prototype.getSelectedObjAsQuestion = function() {
+                                        var obj = this.koSelectedObject().value;
+                                        if (!obj) return null;
+                                        return _surveyHelper.SurveyHelper.getObjectType(obj) == _surveyHelper.ObjType.Question ? obj : null;
+                                    };
+                                    SurveyEditor.prototype.deleteCurrentObject = function() {
+                                        this.deleteObject(this.koSelectedObject().value);
+                                    };
+                                    SurveyEditor.prototype.copyQuestion = function(question) {
+                                        var objType = _surveyHelper.SurveyHelper.getObjectType(question);
+                                        if (objType != _surveyHelper.ObjType.Question) return;
+                                        var json = new Survey.JsonObject().toJsonObject(question);
+                                        json.type = question.getType();
+                                        var item = this.getCopiedQuestionByName(question.name);
+                                        if (item) {
+                                            item.json = json;
+                                        } else {
+                                            this.koCopiedQuestions.push({ name: question.name, json: json });
+                                        }
+                                        if (this.koCopiedQuestions().length > 3) {
+                                            this.koCopiedQuestions.splice(0, 1);
+                                        }
+                                    };
+                                    SurveyEditor.prototype.fastCopyQuestion = function(question) {
+                                        var json = new Survey.JsonObject().toJsonObject(question);
+                                        json.type = question.getType();
+                                        this.doClickCopiedQuestion(json);
+                                    };
+                                    SurveyEditor.prototype.getCopiedQuestionByName = function(name) {
+                                        var items = this.koCopiedQuestions();
+                                        for (var i = 0; i < items.length; i++) {
+                                            if (items[i].name == name) return items[i];
+                                        }
+                                        return null;
+                                    };
+                                    SurveyEditor.prototype.deleteObject = function(obj) {
+                                        this.surveyObjects.removeObject(obj);
+                                        var objType = _surveyHelper.SurveyHelper.getObjectType(obj);
+                                        if (objType == _surveyHelper.ObjType.Page) {
+                                            this.survey.removePage(obj);
+                                            this.pagesEditor.removePage(obj);
+                                            this.setModified();
+                                        }
+                                        if (objType == _surveyHelper.ObjType.Question) {
+                                            this.survey.currentPage.removeQuestion(obj);
+                                            this.survey["setselectedQuestion"](null);
+                                            this.surveyObjects.selectObject(this.survey.currentPage);
+                                            this.setModified();
+                                        }
+                                        this.survey.render();
+                                    };
+                                    SurveyEditor.prototype.showLiveSurvey = function() {
+                                        var _this = this;
+                                        if (!this.surveyjsExample) return;
+                                        var json = this.getSurveyJSON();
+                                        if (json != null) {
+                                            if (json.cookieName) {
+                                                delete json.cookieName;
+                                            }
+                                            var survey = new Survey.Survey(json);
+                                            var self = this;
+                                            var surveyjsExampleResults = document.getElementById("surveyjsExampleResults");
+                                            var surveyjsExamplereRun = document.getElementById("surveyjsExamplereRun");
+                                            if (surveyjsExampleResults) surveyjsExampleResults.innerHTML = "";
+                                            if (surveyjsExamplereRun) surveyjsExamplereRun.style.display = "none";
+                                            survey.onComplete.add(function(sender) {
+                                                if (surveyjsExampleResults) surveyjsExampleResults.innerHTML = _this.getLocString("ed.surveyResults") + JSON.stringify(survey.data);
+                                                if (surveyjsExamplereRun) surveyjsExamplereRun.style.display = "";
+                                            });
+                                            survey.render(this.surveyjsExample);
+                                        } else {
+                                            this.surveyjsExample.innerHTML = this.getLocString("ed.correctJSON");
+                                        }
+                                    };
+                                    SurveyEditor.prototype.showSurveyEmbeding = function() {
+                                        var json = this.getSurveyJSON();
+                                        this.surveyEmbeding.json = json;
+                                        this.surveyEmbeding.surveyId = this.surveyId;
+                                        this.surveyEmbeding.surveyPostId = this.surveyPostId;
+                                        this.surveyEmbeding.generateValidJSON = this.options && this.options.generateValidJSON;
+                                        this.surveyEmbeding.show();
+                                    };
+                                    SurveyEditor.prototype.getSurveyJSON = function() {
+                                        if (this.koIsShowDesigner()) return new Survey.JsonObject().toJsonObject(this.survey);
+                                        if (this.textWorker.isJsonCorrect) return new Survey.JsonObject().toJsonObject(this.textWorker.survey);
+                                        return null;
+                                    };
+                                    SurveyEditor.prototype.createAnnotations = function(text, errors) {
+                                        var annotations = new Array();
+                                        for (var i = 0; i < errors.length; i++) {
+                                            var error = errors[i];
+                                            var annotation = { row: error.position.start.row, column: error.position.start.column, text: error.text, type: "error" };
+                                            annotations.push(annotation);
+                                        }
+                                        return annotations;
+                                    };
+                                    SurveyEditor.updateTextTimeout = 1000;
+                                    SurveyEditor.defaultNewSurveyText = "{ pages: [ { name: 'page1'}] }";
+                                    return SurveyEditor;
+                                }();
+                                Survey.Survey.cssType = "bootstrap";
+                                new Survey.SurveyTemplateText().replaceText(_template_page.html, "page");
+                                new Survey.SurveyTemplateText().replaceText(_template_question.html, "question");
+                                Survey.Survey.prototype["onCreating"] = function() {
+                                    this.selectedQuestionValue = null;
+                                    this.onSelectedQuestionChanged = new Survey.Event();
+                                    this.onCopyQuestion = new Survey.Event();
+                                    this.onFastCopyQuestion = new Survey.Event();
+                                    var self = this;
+                                    this.copyQuestionClick = function() {
+                                        self.onCopyQuestion.fire(self);
+                                    };
+                                    this.fastCopyQuestionClick = function(question) {
+                                        self.onFastCopyQuestion.fire(self /*, question*/ );
+                                    };
+                                    this.koDraggingSource = ko.observable(null);
+                                };
+                                Survey.Survey.prototype["setselectedQuestion"] = function(value) {
+                                    if (value == this.selectedQuestionValue) return;
+                                    var oldValue = this.selectedQuestionValue;
+                                    this.selectedQuestionValue = value;
+                                    if (oldValue != null) {
+                                        oldValue["onSelectedQuestionChanged"]();
+                                    }
+                                    if (this.selectedQuestionValue != null) {
+                                        this.selectedQuestionValue["onSelectedQuestionChanged"]();
+                                    }
+                                    this.onSelectedQuestionChanged.fire(this, { 'oldSelectedQuestion': oldValue, 'newSelectedQuestion': value });
+                                };
+                                Survey.Survey.prototype["getEditorLocString"] = function(value) {
+                                    return _editorLocalization.editorLocalization.getString(value);
+                                };
+                                Survey.Page.prototype["onCreating"] = function() {
+                                    var self = this;
+                                    this.dragEnterCounter = 0;
+                                    this.koDragging = ko.observable(-1);
+                                    this.koDraggingQuestion = ko.observable(null);
+                                    this.koDraggingBottom = ko.observable(false);
+                                    this.koDragging.subscribe(function(newValue) {
+                                        if (newValue < 0) {
+                                            self.dragEnterCounter = 0;
+                                            self.koDraggingQuestion(null);
+                                            self.koDraggingBottom(false);
+                                        } else {
+                                            var question = newValue >= 0 && newValue < self.questions.length ? self.questions[newValue] : null;
+                                            self.koDraggingQuestion(question);
+                                            self.koDraggingBottom(newValue == self.questions.length);
+                                        }
+                                    });
+                                    this.koDraggingQuestion.subscribe(function(newValue) {
+                                        if (newValue) newValue.koIsDragging(true);
+                                    });
+                                    this.koDraggingQuestion.subscribe(function(oldValue) {
+                                        if (oldValue) oldValue.koIsDragging(false);
+                                    }, this, "beforeChange");
+                                    this.dragEnter = function(e) {
+                                        e.preventDefault();
+                                        self.dragEnterCounter++;
+                                        self.doDragEnter(e);
+                                    };
+                                    this.dragLeave = function(e) {
+                                        self.dragEnterCounter--;
+                                        if (self.dragEnterCounter === 0) self.doDragLeave(e);
+                                    };
+                                    this.dragDrop = function(e) {
+                                        self.doDrop(e);
+                                    };
+                                };
+                                Survey.Page.prototype["doDrop"] = function(e) {
+                                    var dragDropHelper = this.data["dragDropHelper"];
+                                    if (dragDropHelper) {
+                                        dragDropHelper.doDrop(e);
+                                    }
+                                };
+                                Survey.Page.prototype["doDragEnter"] = function(e) {
+                                    if (this.questions.length > 0 || this.koDragging() > 0) return;
+                                    var dragDropHelper = this.data["dragDropHelper"];
+                                    if (dragDropHelper && dragDropHelper.isSurveyDragging(e)) {
+                                        this.koDragging(0);
+                                    }
+                                };
+                                Survey.Page.prototype["doDragLeave"] = function(e) {
+                                    var dragDropHelper = this.data["dragDropHelper"];
+                                    if (dragDropHelper) {
+                                        dragDropHelper.doLeavePage(e);
+                                    }
+                                };
+                                Survey.QuestionBase.prototype["onCreating"] = function() {
+                                    var self = this;
+                                    this.dragDropHelperValue = null;
+                                    this.koIsDragging = ko.observable(false);
+                                    this.koIsDraggingSource = ko.observable(false);
+                                    this.dragDropHelper = function() {
+                                        if (self.dragDropHelperValue == null) {
+                                            self.dragDropHelperValue = self.data["dragDropHelper"];
+                                        }
+                                        return self.dragDropHelperValue;
+                                    };
+                                    this.dragOver = function(e) {
+                                        self.dragDropHelper().doDragDropOver(e, self);
+                                    };
+                                    this.dragDrop = function(e) {
+                                        self.dragDropHelper().doDrop(e, self);
+                                    };
+                                    this.dragStart = function(e) {
+                                        self.dragDropHelper().startDragQuestion(e, self.name);
+                                    };
+                                    this.dragEnd = function(e) {
+                                        self.dragDropHelper().end();
+                                    };
+                                    this.koIsSelected = ko.observable(false);
+                                    this.koOnClick = function() {
+                                        if (self.data == null) return;
+                                        self.data["setselectedQuestion"](this);
+                                    };
+                                };
+                                Survey.QuestionBase.prototype["onSelectedQuestionChanged"] = function() {
+                                    if (this.data == null) return;
+                                    this.koIsSelected(this.data["selectedQuestionValue"] == this);
+                                };
+
+                                /***/
+                            },
+                            /* 23 */
+                            /***/
+                            function(module, exports, __webpack_require__) {
+
+                                "use strict";
+
+                                exports.__esModule = true;
+                                exports.SurveyObjects = exports.SurveyObjectItem = undefined;
+
+                                var _surveyHelper = __webpack_require__(8);
+
+                                var SurveyObjectItem = exports.SurveyObjectItem = function() {
+                                    function SurveyObjectItem() {}
+                                    return SurveyObjectItem;
+                                }();
+                                var SurveyObjects = exports.SurveyObjects = function() {
+                                    function SurveyObjects(koObjects, koSelected) {
+                                        this.koObjects = koObjects;
+                                        this.koSelected = koSelected;
+                                    }
+                                    Object.defineProperty(SurveyObjects.prototype, "survey", {
+                                        get: function get() {
+                                            return this.surveyValue;
+                                        },
+                                        set: function set(value) {
+                                            if (this.survey == value) return;
+                                            this.surveyValue = value;
+                                            this.rebuild();
+                                        },
+                                        enumerable: true,
+                                        configurable: true
+                                    });
+                                    SurveyObjects.prototype.addPage = function(page) {
+                                        var pageItem = this.createPage(page);
+                                        var index = this.survey.pages.indexOf(page);
+                                        if (index > 0) {
+                                            var prevPage = this.survey.pages[index - 1];
+                                            index = this.getItemIndex(prevPage) + 1;
+                                            index += prevPage.questions.length;
+                                        } else {
+                                            index = 1; //0 - Survey
+                                        }
+                                        this.addItem(pageItem, index);
+                                        index++;
+                                        for (var i = 0; i < page.questions.length; i++) {
+                                            var item = this.createQuestion(page.questions[i]);
+                                            this.addItem(item, index + i);
+                                        }
+                                        this.koSelected(pageItem);
+                                    };
+                                    SurveyObjects.prototype.addQuestion = function(page, question) {
+                                        var index = this.getItemIndex(page);
+                                        if (index < 0) return;
+                                        var questionIndex = page.questions.indexOf(question) + 1;
+                                        index += questionIndex;
+                                        var item = this.createQuestion(question);
+                                        this.addItem(item, index);
+                                        this.koSelected(item);
+                                    };
+                                    SurveyObjects.prototype.selectObject = function(obj) {
+                                        var objs = this.koObjects();
+                                        for (var i = 0; i < objs.length; i++) {
+                                            if (objs[i].value == obj) {
+                                                this.koSelected(objs[i]);
+                                                return;
+                                            }
+                                        }
+                                    };
+                                    SurveyObjects.prototype.removeObject = function(obj) {
+                                        var index = this.getItemIndex(obj);
+                                        if (index < 0) return;
+                                        var countToRemove = 1;
+                                        if (_surveyHelper.SurveyHelper.getObjectType(obj) == _surveyHelper.ObjType.Page) {
+                                            var page = obj;
+                                            countToRemove += page.questions.length;
+                                        }
+                                        this.koObjects.splice(index, countToRemove);
+                                    };
+                                    SurveyObjects.prototype.nameChanged = function(obj) {
+                                        var index = this.getItemIndex(obj);
+                                        if (index < 0) return;
+                                        this.koObjects()[index].text(this.getText(obj));
+                                    };
+                                    SurveyObjects.prototype.selectNextQuestion = function(isUp) {
+                                        var question = this.getSelectedQuestion();
+                                        var itemIndex = this.getItemIndex(question);
+                                        if (itemIndex < 0) return question;
+                                        var objs = this.koObjects();
+                                        var newItemIndex = itemIndex + (isUp ? -1 : 1);
+                                        if (newItemIndex < objs.length && _surveyHelper.SurveyHelper.getObjectType(objs[newItemIndex].value) == _surveyHelper.ObjType.Question) {
+                                            itemIndex = newItemIndex;
+                                        } else {
+                                            newItemIndex = itemIndex;
+                                            while (newItemIndex < objs.length && _surveyHelper.SurveyHelper.getObjectType(objs[newItemIndex].value) == _surveyHelper.ObjType.Question) {
+                                                itemIndex = newItemIndex;
+                                                newItemIndex += isUp ? 1 : -1;
+                                            }
+                                        }
+                                        this.koSelected(objs[itemIndex]);
+                                    };
+                                    SurveyObjects.prototype.getSelectedQuestion = function() {
+                                        if (!this.koSelected()) return null;
+                                        var obj = this.koSelected().value;
+                                        if (!obj) return null;
+                                        return _surveyHelper.SurveyHelper.getObjectType(obj) == _surveyHelper.ObjType.Question ? obj : null;
+                                    };
+                                    SurveyObjects.prototype.addItem = function(item, index) {
+                                        if (index > this.koObjects().length) {
+                                            this.koObjects.push(item);
+                                        } else {
+                                            this.koObjects.splice(index, 0, item);
+                                        }
+                                    };
+                                    SurveyObjects.prototype.rebuild = function() {
+                                        var objs = [];
+                                        if (this.survey == null) {
+                                            this.koObjects(objs);
+                                            this.koSelected(null);
+                                            return;
+                                        }
+                                        objs.push(this.createItem(this.survey, "Survey"));
+                                        for (var i = 0; i < this.survey.pages.length; i++) {
+                                            var page = this.survey.pages[i];
+                                            objs.push(this.createPage(page));
+                                            for (var j = 0; j < page.questions.length; j++) {
+                                                objs.push(this.createQuestion(page.questions[j]));
+                                            }
+                                        }
+                                        this.koObjects(objs);
+                                        this.koSelected(this.survey);
+                                    };
+                                    SurveyObjects.prototype.createPage = function(page) {
+                                        return this.createItem(page, this.getText(page));
+                                    };
+                                    SurveyObjects.prototype.createQuestion = function(question) {
+                                        return this.createItem(question, this.getText(question));
+                                    };
+                                    SurveyObjects.prototype.createItem = function(value, text) {
+                                        var item = new SurveyObjectItem();
+                                        item.value = value;
+                                        item.text = ko.observable(text);
+                                        return item;
+                                    };
+                                    SurveyObjects.prototype.getItemIndex = function(value) {
+                                        var objs = this.koObjects();
+                                        for (var i = 0; i < objs.length; i++) {
+                                            if (objs[i].value == value) return i;
+                                        }
+                                        return -1;
+                                    };
+                                    SurveyObjects.prototype.getText = function(obj) {
+                                        var intend = SurveyObjects.intend;
+                                        if (_surveyHelper.SurveyHelper.getObjectType(obj) != _surveyHelper.ObjType.Page) {
+                                            intend += SurveyObjects.intend;
+                                        }
+                                        return intend + _surveyHelper.SurveyHelper.getObjectName(obj);
+                                    };
+                                    SurveyObjects.intend = "...";
+                                    return SurveyObjects;
+                                }();
+
+                                /***/
+                            },
+                            /* 24 */
+                            /***/
+                            function(module, exports) {
 
-                'use strict';
+                                'use strict';
 
-                exports.__esModule = true;
+                                exports.__esModule = true;
 
-                var html = exports.html = html_main;
+                                var html = exports.html = html_main;
 
 
-                /***/
-            },
-            /* 25 */
-            /***/
-            function(module, exports) {
+                                /***/
+                            },
+                            /* 25 */
+                            /***/
+                            function(module, exports) {
 
-                'use strict';
+                                'use strict';
 
-                exports.__esModule = true;
-                var html = exports.html = html_design;
+                                exports.__esModule = true;
+                                var html = exports.html = html_design;
 
-                /***/
-            },
-            /* 26 */
-            /***/
-            function(module, exports) {
+                                /***/
+                            },
+                            /* 26 */
+                            /***/
+                            function(module, exports) {
 
-                'use strict';
+                                'use strict';
 
-                exports.__esModule = true;
-                var html = exports.html = html_header;
+                                exports.__esModule = true;
+                                var html = exports.html = html_header;
 
-                /***/
-            }
-            /******/
-        ])
-});;
\ No newline at end of file
+                                /***/
+                            }
+                            /******/
+                    ])
+            });;
\ No newline at end of file
diff --git a/index.php b/index.php
index 89613e2..5f5e63c 100644
--- a/index.php
+++ b/index.php
@@ -22,17 +22,68 @@
     <script src="./editable/survey.ko.js"></script>
         
     <script src="./editable/surveyeditor.js"></script>
+     <script src="./editable/extension.js"></script>
 
-    <!--End of Editable JS-->
-   
 
+   
+<style>
+.container {
+  max-width: 750px;
+  padding: 15px;
+}
+</style>
 
 </head>
+<body>
 <div id="surveyjseditor"></div>
+
+<!-- Modal -->
+<div id="uploadModal" class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
+    <div class="modal-dialog" role="document">
+        <!--Content-->
+        <div class="modal-content">
+            <!--Header-->
+            <!--Body-->
+            <div class="modal-body">
+            </div>
+            <!--Footer-->
+            <div class="modal-footer">
+                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
+                <button type="button" class="btn btn-primary">Save changes</button>
+            </div>
+        </div>
+        <!--/.Content-->
+    </div>
+</div>
+<!--Modal Alert Dup-->
+<div class="modal fade" id="alertModal" role="dialog">
+    <div class="modal-dialog">
+
+        <!-- Modal content-->
+        <div class="modal-content">
+            <div class="modal-header bg-danger">
+                <button type="button" class="close" data-dismiss="modal">&times;</button>
+                <h2 class="modal-title">Message</h2>
+            </div>
+            <div class="modal-body text-danger">
+                <h3>Question already exist in this page.</h3>
+            </div>
+            <div class="modal-footer">
+                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
+            </div>
+        </div>
+
+    </div>
+</div>
+</body>
 <script type="text/javascript">
    var options = {};
-        options.questionTypes = ["checkbox","radiogroup"];
+        options.questionTypes = ["radiogroup"];
         options.generateValidJSON = true;
         var editor = new SurveyEditor.SurveyEditor("surveyjseditor", options);
         editor.showOptions = false;
-</script>
\ No newline at end of file
+
+    
+</script>
+<footer>
+</footer>
\ No newline at end of file
